
EEPROM_DRIVER_PRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000433a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000433a  000043ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080008a  0080008a  000043f8  2**0
                  ALLOC
  3 .stab         00005628  00000000  00000000  000043f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000241a  00000000  00000000  00009a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000be3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000bf7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000dd33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ec1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f9cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fb2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fdb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010587  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__vector_1>
       8:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__vector_2>
       c:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_3>
      10:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__vector_4>
      14:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_5>
      18:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_6>
      1c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_7>
      20:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__vector_8>
      24:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_9>
      28:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__vector_10>
      2c:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_11>
      30:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__vector_12>
      34:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__vector_13>
      38:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__vector_14>
      3c:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_15>
      40:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 20 	call	0x40fe	; 0x40fe <main>
      8a:	0c 94 9b 21 	jmp	0x4336	; 0x4336 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 74 21 	jmp	0x42e8	; 0x42e8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 90 21 	jmp	0x4320	; 0x4320 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_VidInit>:
#include"MUART_Private.h"
#include"MUART_Config.h"

void (*CALLBACK) (void);
 void MUART_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	 uint8 Loc_uint8TempRegister=0;
     b50:	19 82       	std	Y+1, r1	; 0x01
	 SET_BIT(Loc_uint8TempRegister,7);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	89 83       	std	Y+1, r24	; 0x01
	   /*Mode UART Select */
#if UART_SELECTMODE == UART_ASYNCHRONOUS
	 CLR_BIT(Loc_uint8TempRegister,6);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	8f 7b       	andi	r24, 0xBF	; 191
     b5c:	89 83       	std	Y+1, r24	; 0x01
#error"UART Mode Select Option Is Not Valid.."
#endif

	 /*UART Parity Mode Option CHECK*/
#if UART_PARITYCHECK_MODE   == PARTIYCHECK_DISABLED
	 CLR_BIT(Loc_uint8TempRegister,4);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	8f 7e       	andi	r24, 0xEF	; 239
     b62:	89 83       	std	Y+1, r24	; 0x01
	 CLR_BIT(Loc_uint8TempRegister,4);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	8f 7e       	andi	r24, 0xEF	; 239
     b68:	89 83       	std	Y+1, r24	; 0x01
#error"PARTIY Check Option Is Not Valid.."
#endif

	 /*STOP Bit Option*/
#if UART_STOPBIT == ONE_BIT
	 CLR_BIT(Loc_uint8TempRegister,3);
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	87 7f       	andi	r24, 0xF7	; 247
     b6e:	89 83       	std	Y+1, r24	; 0x01
#elif UART_NUMBEROFDATA_BIT==CHAR_7Bit
	 CLR_BIT(Loc_uint8TempRegister,1);
	 SET_BIT(Loc_uint8TempRegister,2);
	 CLR_BIT(UCSRB,2);
#elif UART_NUMBEROFDATA_BIT==CHAR_8Bit
	 SET_BIT(Loc_uint8TempRegister,1);
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	82 60       	ori	r24, 0x02	; 2
     b74:	89 83       	std	Y+1, r24	; 0x01
	 SET_BIT(Loc_uint8TempRegister,2);
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	84 60       	ori	r24, 0x04	; 4
     b7a:	89 83       	std	Y+1, r24	; 0x01
	 CLR_BIT(UCSRB,2);
     b7c:	aa e2       	ldi	r26, 0x2A	; 42
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	ea e2       	ldi	r30, 0x2A	; 42
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	8b 7f       	andi	r24, 0xFB	; 251
     b88:	8c 93       	st	X, r24
	 SET_BIT(Loc_uint8TempRegister,2);
	 SET_BIT(UCSRB,2);
#else
	 #error"Data Bit Option Is Not Valid.."
#endif
	 UCSRC=Loc_uint8TempRegister;
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	80 83       	st	Z, r24
	 /*Set BaudRate -->9600*/
	 UBRRL=UART_BAUDRATE;
     b92:	e9 e2       	ldi	r30, 0x29	; 41
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	87 e6       	ldi	r24, 0x67	; 103
     b98:	80 83       	st	Z, r24
	          /*Enable Receiver*/
	 SET_BIT(UCSRB,4);
     b9a:	aa e2       	ldi	r26, 0x2A	; 42
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ea e2       	ldi	r30, 0x2A	; 42
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 61       	ori	r24, 0x10	; 16
     ba6:	8c 93       	st	X, r24
	          /*Enable transmit*/
	 SET_BIT(UCSRB,3);
     ba8:	aa e2       	ldi	r26, 0x2A	; 42
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ea e2       	ldi	r30, 0x2A	; 42
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	88 60       	ori	r24, 0x08	; 8
     bb4:	8c 93       	st	X, r24
	          /*Enable Transmit TX Interrupt*/
	 SET_BIT(UCSRB,6);
     bb6:	aa e2       	ldi	r26, 0x2A	; 42
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	ea e2       	ldi	r30, 0x2A	; 42
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	80 64       	ori	r24, 0x40	; 64
     bc2:	8c 93       	st	X, r24
	          /*Enable Receiver RX Interrupt*/
	 SET_BIT(UCSRB,7);
     bc4:	aa e2       	ldi	r26, 0x2A	; 42
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	ea e2       	ldi	r30, 0x2A	; 42
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	80 68       	ori	r24, 0x80	; 128
     bd0:	8c 93       	st	X, r24
	          /*Data Register Interrupt Enable*/
	 SET_BIT(UCSRB,5);
     bd2:	aa e2       	ldi	r26, 0x2A	; 42
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ea e2       	ldi	r30, 0x2A	; 42
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 62       	ori	r24, 0x20	; 32
     bde:	8c 93       	st	X, r24

 }
     be0:	0f 90       	pop	r0
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	08 95       	ret

00000be8 <MUART_VidSendChar>:
 void MUART_VidSendChar(uint8 copy_uint8Char)
 {
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	0f 92       	push	r0
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	89 83       	std	Y+1, r24	; 0x01
	 while(GET_BIT(UCSRA,5==0));
     bf4:	eb e2       	ldi	r30, 0x2B	; 43
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	82 95       	swap	r24
     bfc:	86 95       	lsr	r24
     bfe:	87 70       	andi	r24, 0x07	; 7
     c00:	88 23       	and	r24, r24
     c02:	c1 f3       	breq	.-16     	; 0xbf4 <MUART_VidSendChar+0xc>
	 UDR=copy_uint8Char;
     c04:	ec e2       	ldi	r30, 0x2C	; 44
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	80 83       	st	Z, r24
 }
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <MUART_vidSendString>:
 void MUART_vidSendString(uint8 *copy_uint8String)
 {
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	00 d0       	rcall	.+0      	; 0xc1a <MUART_vidSendString+0x6>
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	9b 83       	std	Y+3, r25	; 0x03
     c22:	8a 83       	std	Y+2, r24	; 0x02
	 uint8 Loc_uint8count=0;
     c24:	19 82       	std	Y+1, r1	; 0x01
     c26:	0e c0       	rjmp	.+28     	; 0xc44 <MUART_vidSendString+0x30>
	 while(copy_uint8String[Loc_uint8count]!='\0')
	 {
		MUART_VidSendChar(copy_uint8String[Loc_uint8count]);
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	9b 81       	ldd	r25, Y+3	; 0x03
     c32:	fc 01       	movw	r30, r24
     c34:	e2 0f       	add	r30, r18
     c36:	f3 1f       	adc	r31, r19
     c38:	80 81       	ld	r24, Z
     c3a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MUART_VidSendChar>
		Loc_uint8count++;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	89 83       	std	Y+1, r24	; 0x01
	 UDR=copy_uint8Char;
 }
 void MUART_vidSendString(uint8 *copy_uint8String)
 {
	 uint8 Loc_uint8count=0;
	 while(copy_uint8String[Loc_uint8count]!='\0')
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	9b 81       	ldd	r25, Y+3	; 0x03
     c4e:	fc 01       	movw	r30, r24
     c50:	e2 0f       	add	r30, r18
     c52:	f3 1f       	adc	r31, r19
     c54:	80 81       	ld	r24, Z
     c56:	88 23       	and	r24, r24
     c58:	39 f7       	brne	.-50     	; 0xc28 <MUART_vidSendString+0x14>
	 {
		MUART_VidSendChar(copy_uint8String[Loc_uint8count]);
		Loc_uint8count++;
	 }
 }
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <MUART_uint8ReciverChar>:
 uint8 MUART_uint8ReciverChar(void)
 {
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
	 while(GET_BIT(UCSRA,7)==0);
     c6e:	eb e2       	ldi	r30, 0x2B	; 43
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	88 23       	and	r24, r24
     c76:	dc f7       	brge	.-10     	; 0xc6e <MUART_uint8ReciverChar+0x8>
	 return UDR;
     c78:	ec e2       	ldi	r30, 0x2C	; 44
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
 }
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <MUART_VidSetTXCallBack>:
 void MUART_VidSetTXCallBack(void(*PtrToFun)(void))
 {
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	00 d0       	rcall	.+0      	; 0xc8a <MUART_VidSetTXCallBack+0x6>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	90 93 8c 00 	sts	0x008C, r25
     c9a:	80 93 8b 00 	sts	0x008B, r24
 }
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <MUART_VidSetRXCallBack>:
 void MUART_VidSetRXCallBack(void(*PtrToFun)(void))
 {
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	00 d0       	rcall	.+0      	; 0xcae <MUART_VidSetRXCallBack+0x6>
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	90 93 8c 00 	sts	0x008C, r25
     cbe:	80 93 8b 00 	sts	0x008B, r24
 }
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <MUART_VidUSART_REG_SetCallBack>:
 void MUART_VidUSART_REG_SetCallBack(void(*PtrToFun)(void))
 {
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <MUART_VidUSART_REG_SetCallBack+0x6>
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	90 93 8c 00 	sts	0x008C, r25
     ce2:	80 93 8b 00 	sts	0x008B, r24
 }
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <__vector_15>:
  /*TX*/

 void __vector_15(void)   __attribute__((signal));
 void __vector_15(void)
 {
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2f 93       	push	r18
     cfc:	3f 93       	push	r19
     cfe:	4f 93       	push	r20
     d00:	5f 93       	push	r21
     d02:	6f 93       	push	r22
     d04:	7f 93       	push	r23
     d06:	8f 93       	push	r24
     d08:	9f 93       	push	r25
     d0a:	af 93       	push	r26
     d0c:	bf 93       	push	r27
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     d1a:	e0 91 8b 00 	lds	r30, 0x008B
     d1e:	f0 91 8c 00 	lds	r31, 0x008C
     d22:	09 95       	icall
 }
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	ff 91       	pop	r31
     d2a:	ef 91       	pop	r30
     d2c:	bf 91       	pop	r27
     d2e:	af 91       	pop	r26
     d30:	9f 91       	pop	r25
     d32:	8f 91       	pop	r24
     d34:	7f 91       	pop	r23
     d36:	6f 91       	pop	r22
     d38:	5f 91       	pop	r21
     d3a:	4f 91       	pop	r20
     d3c:	3f 91       	pop	r19
     d3e:	2f 91       	pop	r18
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	0f 90       	pop	r0
     d46:	1f 90       	pop	r1
     d48:	18 95       	reti

00000d4a <__vector_13>:
 /*RX*/
 void __vector_13(void)   __attribute__((signal));
 void __vector_13(void)
 {
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	2f 93       	push	r18
     d56:	3f 93       	push	r19
     d58:	4f 93       	push	r20
     d5a:	5f 93       	push	r21
     d5c:	6f 93       	push	r22
     d5e:	7f 93       	push	r23
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	af 93       	push	r26
     d66:	bf 93       	push	r27
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     d74:	e0 91 8b 00 	lds	r30, 0x008B
     d78:	f0 91 8c 00 	lds	r31, 0x008C
     d7c:	09 95       	icall
 }
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	7f 91       	pop	r23
     d90:	6f 91       	pop	r22
     d92:	5f 91       	pop	r21
     d94:	4f 91       	pop	r20
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	0f 90       	pop	r0
     da0:	1f 90       	pop	r1
     da2:	18 95       	reti

00000da4 <__vector_14>:
 /*UART DATA Register Empty*/
 void __vector_14(void)   __attribute__((signal));
 void __vector_14(void)
 {
     da4:	1f 92       	push	r1
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	0f 92       	push	r0
     dac:	11 24       	eor	r1, r1
     dae:	2f 93       	push	r18
     db0:	3f 93       	push	r19
     db2:	4f 93       	push	r20
     db4:	5f 93       	push	r21
     db6:	6f 93       	push	r22
     db8:	7f 93       	push	r23
     dba:	8f 93       	push	r24
     dbc:	9f 93       	push	r25
     dbe:	af 93       	push	r26
     dc0:	bf 93       	push	r27
     dc2:	ef 93       	push	r30
     dc4:	ff 93       	push	r31
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     dce:	e0 91 8b 00 	lds	r30, 0x008B
     dd2:	f0 91 8c 00 	lds	r31, 0x008C
     dd6:	09 95       	icall
 }
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <MTWI_VidInitMaster>:
#include "../MTWI/MI2C_Private.h"

/*TWI Init as a master*/

void MTWI_VidInitMaster(uint8 copy_uint8Address)
{
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	0f 92       	push	r0
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Ack*/
	SET_BIT(TWCR,6);
     e0a:	a6 e5       	ldi	r26, 0x56	; 86
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e6 e5       	ldi	r30, 0x56	; 86
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 64       	ori	r24, 0x40	; 64
     e16:	8c 93       	st	X, r24
	/*Set SCL Freq to 400KHZ ,With 16MHZ system Freq--> "Rate Bit" */
	TWBR=3;
     e18:	e0 e2       	ldi	r30, 0x20	; 32
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	80 83       	st	Z, r24
	/*Set PreScaler =1 */
	CLR_BIT(TWSR,1);
     e20:	a1 e2       	ldi	r26, 0x21	; 33
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 e2       	ldi	r30, 0x21	; 33
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8d 7f       	andi	r24, 0xFD	; 253
     e2c:	8c 93       	st	X, r24
	CLR_BIT(TWSR,0);
     e2e:	a1 e2       	ldi	r26, 0x21	; 33
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e1 e2       	ldi	r30, 0x21	; 33
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8e 7f       	andi	r24, 0xFE	; 254
     e3a:	8c 93       	st	X, r24
	/*Enable TWI*/
	SET_BIT(TWCR,2);
     e3c:	a6 e5       	ldi	r26, 0x56	; 86
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e6 e5       	ldi	r30, 0x56	; 86
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	84 60       	ori	r24, 0x04	; 4
     e48:	8c 93       	st	X, r24
	/*write Address */
	if(copy_uint8Address !=0)
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	88 23       	and	r24, r24
     e4e:	29 f0       	breq	.+10     	; 0xe5a <MTWI_VidInitMaster+0x5c>
	{
		TWAR=copy_uint8Address<<1; //3ashn homa 7 bit bs
     e50:	e2 e2       	ldi	r30, 0x22	; 34
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	88 0f       	add	r24, r24
     e58:	80 83       	st	Z, r24
	}
	else
	{
		//Nothing
	}
}
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <MTWI_VidInitSalve>:

/*TWI Init as a Salve*/

void MTWI_VidInitSalve(uint8 copy_uint8Address)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	0f 92       	push	r0
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Ack*/
	SET_BIT(TWCR,6);
     e6e:	a6 e5       	ldi	r26, 0x56	; 86
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e5       	ldi	r30, 0x56	; 86
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 64       	ori	r24, 0x40	; 64
     e7a:	8c 93       	st	X, r24
		/*Enable TWI*/
	SET_BIT(TWCR,2);
     e7c:	a6 e5       	ldi	r26, 0x56	; 86
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e5       	ldi	r30, 0x56	; 86
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	84 60       	ori	r24, 0x04	; 4
     e88:	8c 93       	st	X, r24
	/*write Address */
	if(copy_uint8Address !=0)
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	88 23       	and	r24, r24
     e8e:	29 f0       	breq	.+10     	; 0xe9a <MTWI_VidInitSalve+0x38>
	{
		TWAR=copy_uint8Address<<1; //3ashn homa 7 bit bs
     e90:	e2 e2       	ldi	r30, 0x22	; 34
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	88 0f       	add	r24, r24
     e98:	80 83       	st	Z, r24
	}
	else
	{
		//Nothing
	}
}
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <MTWI_SendSatrtCondition>:

/*TWI Start condition*/
TWI_ErrorState MTWI_SendSatrtCondition(void)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Loc_Error=NoError;
     eac:	19 82       	std	Y+1, r1	; 0x01
	/*send satrt condition*/
	SET_BIT(TWCR,5);
     eae:	a6 e5       	ldi	r26, 0x56	; 86
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e6 e5       	ldi	r30, 0x56	; 86
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 62       	ori	r24, 0x20	; 32
     eba:	8c 93       	st	X, r24
	/*Clear  TWI flag*/
	SET_BIT(TWCR,7);
     ebc:	a6 e5       	ldi	r26, 0x56	; 86
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e6 e5       	ldi	r30, 0x56	; 86
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 68       	ori	r24, 0x80	; 128
     ec8:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,7)==0);
     eca:	e6 e5       	ldi	r30, 0x56	; 86
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	88 23       	and	r24, r24
     ed2:	dc f7       	brge	.-10     	; 0xeca <MTWI_SendSatrtCondition+0x28>
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x08)
     ed4:	e1 e2       	ldi	r30, 0x21	; 33
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	88 7f       	andi	r24, 0xF8	; 248
     ee0:	90 70       	andi	r25, 0x00	; 0
     ee2:	88 30       	cpi	r24, 0x08	; 8
     ee4:	91 05       	cpc	r25, r1
     ee6:	11 f0       	breq	.+4      	; 0xeec <MTWI_SendSatrtCondition+0x4a>
	{
		Loc_Error=StartConditionError;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_Error;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
}
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <MTWI_SendSatrtRepeatedCondition>:
/*TWI Start Repeated Function*/
TWI_ErrorState  MTWI_SendSatrtRepeatedCondition(void)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Loc_Error=NoError;
     f00:	19 82       	std	Y+1, r1	; 0x01
		/*send satrt condition*/
		SET_BIT(TWCR,5);
     f02:	a6 e5       	ldi	r26, 0x56	; 86
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e6 e5       	ldi	r30, 0x56	; 86
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 62       	ori	r24, 0x20	; 32
     f0e:	8c 93       	st	X, r24
		/*Clear  TWI flag*/
		SET_BIT(TWCR,7);
     f10:	a6 e5       	ldi	r26, 0x56	; 86
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e6 e5       	ldi	r30, 0x56	; 86
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 68       	ori	r24, 0x80	; 128
     f1c:	8c 93       	st	X, r24
		/*wait until the operation finish and Flag Is Rasised*/
		while(GET_BIT(TWCR,7)==0);
     f1e:	e6 e5       	ldi	r30, 0x56	; 86
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	88 23       	and	r24, r24
     f26:	dc f7       	brge	.-10     	; 0xf1e <MTWI_SendSatrtRepeatedCondition+0x28>
		/*Check the operation statues*/
		if((TWSR&0xF8) != 0x10)
     f28:	e1 e2       	ldi	r30, 0x21	; 33
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	88 7f       	andi	r24, 0xF8	; 248
     f34:	90 70       	andi	r25, 0x00	; 0
     f36:	80 31       	cpi	r24, 0x10	; 16
     f38:	91 05       	cpc	r25, r1
     f3a:	11 f0       	breq	.+4      	; 0xf40 <MTWI_SendSatrtRepeatedCondition+0x4a>
		{
			Loc_Error=RepeatedStartConditionError;
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			/*Do nothing*/
		}
		return Loc_Error;
     f40:	89 81       	ldd	r24, Y+1	; 0x01
}
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <MTWI_SendSalveAddressWithWrite>:
/*TWI send  SLave Address with Write*/
TWI_ErrorState MTWI_SendSalveAddressWithWrite(uint8 copy_uint8SalveAddress)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <MTWI_SendSalveAddressWithWrite+0x6>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Loc_Error=NoError;
     f56:	19 82       	std	Y+1, r1	; 0x01
	/*Send Salve Address --> 7 Bit with write */
	TWDR=copy_uint8SalveAddress<<1;
     f58:	e3 e2       	ldi	r30, 0x23	; 35
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	88 0f       	add	r24, r24
     f60:	80 83       	st	Z, r24
	/*Set write Bit Request in The LSB in Data Regsiter*/
	CLR_BIT(TWDR,0);
     f62:	a3 e2       	ldi	r26, 0x23	; 35
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e3 e2       	ldi	r30, 0x23	; 35
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8e 7f       	andi	r24, 0xFE	; 254
     f6e:	8c 93       	st	X, r24
	/*Clear Start Condition*/
	CLR_BIT(TWCR,5);
     f70:	a6 e5       	ldi	r26, 0x56	; 86
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e6 e5       	ldi	r30, 0x56	; 86
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8f 7d       	andi	r24, 0xDF	; 223
     f7c:	8c 93       	st	X, r24
	/*Clear interrupt TWI Flag*/
	SET_BIT(TWCR,7);
     f7e:	a6 e5       	ldi	r26, 0x56	; 86
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e6 e5       	ldi	r30, 0x56	; 86
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	80 68       	ori	r24, 0x80	; 128
     f8a:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,7)==0);
     f8c:	e6 e5       	ldi	r30, 0x56	; 86
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	88 23       	and	r24, r24
     f94:	dc f7       	brge	.-10     	; 0xf8c <MTWI_SendSalveAddressWithWrite+0x42>
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x18)
     f96:	e1 e2       	ldi	r30, 0x21	; 33
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	88 7f       	andi	r24, 0xF8	; 248
     fa2:	90 70       	andi	r25, 0x00	; 0
     fa4:	88 31       	cpi	r24, 0x18	; 24
     fa6:	91 05       	cpc	r25, r1
     fa8:	11 f0       	breq	.+4      	; 0xfae <MTWI_SendSalveAddressWithWrite+0x64>
	{
		Loc_Error=SlaveAddressWriteError;
     faa:	83 e0       	ldi	r24, 0x03	; 3
     fac:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_Error;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <MTWI_SendSalveAddressWithRead>:
/*TWI send SLave Address with Read*/
TWI_ErrorState MTWI_SendSalveAddressWithRead(uint8 copy_uint8SalveAddress)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <MTWI_SendSalveAddressWithRead+0x6>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Loc_Error=NoError;
     fc6:	19 82       	std	Y+1, r1	; 0x01
	/*Send Salve Address --> 7 Bit with Read */
	TWDR=copy_uint8SalveAddress<<1;
     fc8:	e3 e2       	ldi	r30, 0x23	; 35
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 0f       	add	r24, r24
     fd0:	80 83       	st	Z, r24
	/*Set read Bit Request in The LSB in Data Regsiter*/
	SET_BIT(TWDR,0);
     fd2:	a3 e2       	ldi	r26, 0x23	; 35
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e3 e2       	ldi	r30, 0x23	; 35
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	81 60       	ori	r24, 0x01	; 1
     fde:	8c 93       	st	X, r24
	/*Clear Start Condition*/
	CLR_BIT(TWCR,5);
     fe0:	a6 e5       	ldi	r26, 0x56	; 86
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e6 e5       	ldi	r30, 0x56	; 86
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7d       	andi	r24, 0xDF	; 223
     fec:	8c 93       	st	X, r24
	/*Clear interrupt TWI Flag*/
	SET_BIT(TWCR,7);
     fee:	a6 e5       	ldi	r26, 0x56	; 86
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e6 e5       	ldi	r30, 0x56	; 86
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 68       	ori	r24, 0x80	; 128
     ffa:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,7)==0);
     ffc:	e6 e5       	ldi	r30, 0x56	; 86
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	88 23       	and	r24, r24
    1004:	dc f7       	brge	.-10     	; 0xffc <MTWI_SendSalveAddressWithRead+0x42>
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x40)
    1006:	e1 e2       	ldi	r30, 0x21	; 33
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	88 7f       	andi	r24, 0xF8	; 248
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	80 34       	cpi	r24, 0x40	; 64
    1016:	91 05       	cpc	r25, r1
    1018:	11 f0       	breq	.+4      	; 0x101e <MTWI_SendSalveAddressWithRead+0x64>
	{
		Loc_Error=SlaveAddressReadError;
    101a:	84 e0       	ldi	r24, 0x04	; 4
    101c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_Error;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <MTWI_MasterWriteDataByte>:
/*TWI send data as a master*/
TWI_ErrorState MTWI_MasterWriteDataByte(uint8 copy_uint8Data)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <MTWI_MasterWriteDataByte+0x6>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Loc_Error=NoError;
    1036:	19 82       	std	Y+1, r1	; 0x01
	/*Send Data */
	TWDR=copy_uint8Data;
    1038:	e3 e2       	ldi	r30, 0x23	; 35
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	80 83       	st	Z, r24
	/*Clear interrupt TWI Flag*/
	SET_BIT(TWCR,7);
    1040:	a6 e5       	ldi	r26, 0x56	; 86
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e6 e5       	ldi	r30, 0x56	; 86
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 68       	ori	r24, 0x80	; 128
    104c:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,7)==0);
    104e:	e6 e5       	ldi	r30, 0x56	; 86
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	88 23       	and	r24, r24
    1056:	dc f7       	brge	.-10     	; 0x104e <MTWI_MasterWriteDataByte+0x24>
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x28)
    1058:	e1 e2       	ldi	r30, 0x21	; 33
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	88 7f       	andi	r24, 0xF8	; 248
    1064:	90 70       	andi	r25, 0x00	; 0
    1066:	88 32       	cpi	r24, 0x28	; 40
    1068:	91 05       	cpc	r25, r1
    106a:	11 f0       	breq	.+4      	; 0x1070 <MTWI_MasterWriteDataByte+0x46>
	{
		Loc_Error=MasterWriteByteError;
    106c:	85 e0       	ldi	r24, 0x05	; 5
    106e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_Error;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <MTWI_MasterReadDataByte>:
/*TWI read data as a master*/
TWI_ErrorState MTWI_MasterReadDataByte(uint8 *copy_uint8Data)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <MTWI_MasterReadDataByte+0x6>
    1082:	0f 92       	push	r0
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	9b 83       	std	Y+3, r25	; 0x03
    108a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Loc_Error=NoError;
    108c:	19 82       	std	Y+1, r1	; 0x01

	/*Clear interrupt TWI Flag*/
	SET_BIT(TWCR,7);
    108e:	a6 e5       	ldi	r26, 0x56	; 86
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e6 e5       	ldi	r30, 0x56	; 86
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	80 68       	ori	r24, 0x80	; 128
    109a:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,7)==0);
    109c:	e6 e5       	ldi	r30, 0x56	; 86
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	88 23       	and	r24, r24
    10a4:	dc f7       	brge	.-10     	; 0x109c <MTWI_MasterReadDataByte+0x20>
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x50)
    10a6:	e1 e2       	ldi	r30, 0x21	; 33
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	88 7f       	andi	r24, 0xF8	; 248
    10b2:	90 70       	andi	r25, 0x00	; 0
    10b4:	80 35       	cpi	r24, 0x50	; 80
    10b6:	91 05       	cpc	r25, r1
    10b8:	19 f0       	breq	.+6      	; 0x10c0 <MTWI_MasterReadDataByte+0x44>
	{
		Loc_Error=MasterReadByteError;
    10ba:	86 e0       	ldi	r24, 0x06	; 6
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	06 c0       	rjmp	.+12     	; 0x10cc <MTWI_MasterReadDataByte+0x50>
	}
	else
	{
		*copy_uint8Data=TWDR;
    10c0:	e3 e2       	ldi	r30, 0x23	; 35
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	ea 81       	ldd	r30, Y+2	; 0x02
    10c8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ca:	80 83       	st	Z, r24
	}
	return Loc_Error;
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <MTWI_SendStopCondtion>:

/*TWI Stop condition*/

void MTWI_SendStopCondtion(void)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
	/*Send Stop Condition*/
	SET_BIT(TWCR,4);
    10e2:	a6 e5       	ldi	r26, 0x56	; 86
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e6 e5       	ldi	r30, 0x56	; 86
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 61       	ori	r24, 0x10	; 16
    10ee:	8c 93       	st	X, r24
	/*Clear TWI  interrupt flag*/
	SET_BIT(TWCR,7);
    10f0:	a6 e5       	ldi	r26, 0x56	; 86
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e6 e5       	ldi	r30, 0x56	; 86
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	80 68       	ori	r24, 0x80	; 128
    10fc:	8c 93       	st	X, r24
}
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <MTIMER2_VidInit>:
#include"MTIMER2_Config.h"


void (*MTIMER2_CALLBACK)(void);
void MTIMER2_VidInit(void)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,6);
	/*OverFlow Interrupt Enable */
	SET_BIT(TIMSK,6);

#elif TIMER2SETMODE == TIMER2_FASTPWMMODE
	SET_BIT(TCCR2,6);
    110c:	a5 e4       	ldi	r26, 0x45	; 69
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e4       	ldi	r30, 0x45	; 69
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	80 64       	ori	r24, 0x40	; 64
    1118:	8c 93       	st	X, r24
	SET_BIT(TCCR2,3);
    111a:	a5 e4       	ldi	r26, 0x45	; 69
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e5 e4       	ldi	r30, 0x45	; 69
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	88 60       	ori	r24, 0x08	; 8
    1126:	8c 93       	st	X, r24
  #if TIMER2_PWMMODE_OC2PINMODE==TIMER2_PWMMODE_NON_INVERTING
	CLR_BIT(TCCR2,4);
    1128:	a5 e4       	ldi	r26, 0x45	; 69
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e5 e4       	ldi	r30, 0x45	; 69
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8f 7e       	andi	r24, 0xEF	; 239
    1134:	8c 93       	st	X, r24
	SET_BIT(TCCR2,5);
    1136:	a5 e4       	ldi	r26, 0x45	; 69
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e5 e4       	ldi	r30, 0x45	; 69
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	80 62       	ori	r24, 0x20	; 32
    1142:	8c 93       	st	X, r24
#else
	#error"Timer2 Mode Options Is Not Valid.."
#endif

	              /*SET PRESCALER*/
	TCCR2&=0xF8;
    1144:	a5 e4       	ldi	r26, 0x45	; 69
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e4       	ldi	r30, 0x45	; 69
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	88 7f       	andi	r24, 0xF8	; 248
    1150:	8c 93       	st	X, r24
	TCCR2|=MTIMER2_SET_PRESCALER;
    1152:	a5 e4       	ldi	r26, 0x45	; 69
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e5 e4       	ldi	r30, 0x45	; 69
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	85 60       	ori	r24, 0x05	; 5
    115e:	8c 93       	st	X, r24
}
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <MTIMER2_VidSetPreLoad>:
void MTIMER2_VidSetPreLoad(uint8 copy_uint8PreLoadValue)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	0f 92       	push	r0
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=copy_uint8PreLoadValue;
    1172:	e4 e4       	ldi	r30, 0x44	; 68
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	80 83       	st	Z, r24
}
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <MTIMER2_VidSetCTCRegister>:
void MTIMER2_VidSetCTCRegister(uint8 copy_uint8CTCRegisteValue)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	89 83       	std	Y+1, r24	; 0x01
	OCR2=copy_uint8CTCRegisteValue;
    118e:	e3 e4       	ldi	r30, 0x43	; 67
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	80 83       	st	Z, r24
}
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <MTIMER2_VidTIMER2_OVERFLOW_SetCallBack>:
void MTIMER2_VidTIMER2_OVERFLOW_SetCallBack(void (*PtrToFun)(void))
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <MTIMER2_VidTIMER2_OVERFLOW_SetCallBack+0x6>
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	89 83       	std	Y+1, r24	; 0x01
	MTIMER2_CALLBACK=PtrToFun;
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	90 93 8e 00 	sts	0x008E, r25
    11b4:	80 93 8d 00 	sts	0x008D, r24
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <MTIMER2_VidTIMER2_CTC_SetCallBack>:
void MTIMER2_VidTIMER2_CTC_SetCallBack(void (*PtrToFun)(void))
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <MTIMER2_VidTIMER2_CTC_SetCallBack+0x6>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
	MTIMER2_CALLBACK=PtrToFun;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	90 93 8e 00 	sts	0x008E, r25
    11d8:	80 93 8d 00 	sts	0x008D, r24
}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <__vector_4>:
           /*CTC*/
void __vector_4(void)   __attribute__((signal));
void __vector_4(void)
{
    11e6:	1f 92       	push	r1
    11e8:	0f 92       	push	r0
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	0f 92       	push	r0
    11ee:	11 24       	eor	r1, r1
    11f0:	2f 93       	push	r18
    11f2:	3f 93       	push	r19
    11f4:	4f 93       	push	r20
    11f6:	5f 93       	push	r21
    11f8:	6f 93       	push	r22
    11fa:	7f 93       	push	r23
    11fc:	8f 93       	push	r24
    11fe:	9f 93       	push	r25
    1200:	af 93       	push	r26
    1202:	bf 93       	push	r27
    1204:	ef 93       	push	r30
    1206:	ff 93       	push	r31
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	MTIMER2_CALLBACK();
    1210:	e0 91 8d 00 	lds	r30, 0x008D
    1214:	f0 91 8e 00 	lds	r31, 0x008E
    1218:	09 95       	icall
}
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	ff 91       	pop	r31
    1220:	ef 91       	pop	r30
    1222:	bf 91       	pop	r27
    1224:	af 91       	pop	r26
    1226:	9f 91       	pop	r25
    1228:	8f 91       	pop	r24
    122a:	7f 91       	pop	r23
    122c:	6f 91       	pop	r22
    122e:	5f 91       	pop	r21
    1230:	4f 91       	pop	r20
    1232:	3f 91       	pop	r19
    1234:	2f 91       	pop	r18
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	0f 90       	pop	r0
    123c:	1f 90       	pop	r1
    123e:	18 95       	reti

00001240 <__vector_5>:
         /*overflow */
void __vector_5(void)   __attribute__((signal));
void __vector_5(void)
{
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	11 24       	eor	r1, r1
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
	MTIMER2_CALLBACK();
    126a:	e0 91 8d 00 	lds	r30, 0x008D
    126e:	f0 91 8e 00 	lds	r31, 0x008E
    1272:	09 95       	icall
}
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	ff 91       	pop	r31
    127a:	ef 91       	pop	r30
    127c:	bf 91       	pop	r27
    127e:	af 91       	pop	r26
    1280:	9f 91       	pop	r25
    1282:	8f 91       	pop	r24
    1284:	7f 91       	pop	r23
    1286:	6f 91       	pop	r22
    1288:	5f 91       	pop	r21
    128a:	4f 91       	pop	r20
    128c:	3f 91       	pop	r19
    128e:	2f 91       	pop	r18
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	0f 90       	pop	r0
    1296:	1f 90       	pop	r1
    1298:	18 95       	reti

0000129a <MTIMER1_VidInit>:


void (*MTIMER1_CALLBACK)(void);

void MTIMER1_VidInit(void)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	/*Compare Match Enable Interrupt*/
	SET_BIT(TIMSK,4);
	SET_BIT(TIMSK,3);

#elif TIMER1SETMODE == TIMER1_NORMALMODE
	CLR_BIT(TCCR1A,0);
    12a2:	af e4       	ldi	r26, 0x4F	; 79
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	ef e4       	ldi	r30, 0x4F	; 79
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8e 7f       	andi	r24, 0xFE	; 254
    12ae:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    12b0:	af e4       	ldi	r26, 0x4F	; 79
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	ef e4       	ldi	r30, 0x4F	; 79
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8d 7f       	andi	r24, 0xFD	; 253
    12bc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
    12be:	ae e4       	ldi	r26, 0x4E	; 78
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ee e4       	ldi	r30, 0x4E	; 78
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	87 7f       	andi	r24, 0xF7	; 247
    12ca:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    12cc:	ae e4       	ldi	r26, 0x4E	; 78
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ee e4       	ldi	r30, 0x4E	; 78
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8f 7e       	andi	r24, 0xEF	; 239
    12d8:	8c 93       	st	X, r24
	/*OVERFLOW  Enable Interrupt */
	SET_BIT(TIMSK,2);
    12da:	a9 e5       	ldi	r26, 0x59	; 89
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e9 e5       	ldi	r30, 0x59	; 89
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	84 60       	ori	r24, 0x04	; 4
    12e6:	8c 93       	st	X, r24
#else
#error "Timer 1 Options Is Not Valid."
#endif

/*********SET PRESCALER *********/
	TCCR1B&=0xF8;
    12e8:	ae e4       	ldi	r26, 0x4E	; 78
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ee e4       	ldi	r30, 0x4E	; 78
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	88 7f       	andi	r24, 0xF8	; 248
    12f4:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SETPRESCALER;
    12f6:	ae e4       	ldi	r26, 0x4E	; 78
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ee e4       	ldi	r30, 0x4E	; 78
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	83 60       	ori	r24, 0x03	; 3
    1302:	8c 93       	st	X, r24
}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <MTIMER1_VidInit_ICU>:
void MTIMER1_VidInit_ICU(void)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
    1312:	a9 e5       	ldi	r26, 0x59	; 89
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e9 e5       	ldi	r30, 0x59	; 89
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	80 62       	ori	r24, 0x20	; 32
    131e:	8c 93       	st	X, r24
	    /*Enable ICU Noise Canceler */
	SET_BIT(TCCR1B,7);
    1320:	ae e4       	ldi	r26, 0x4E	; 78
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ee e4       	ldi	r30, 0x4E	; 78
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	80 68       	ori	r24, 0x80	; 128
    132c:	8c 93       	st	X, r24
}
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <MTIMER1_VidICU_SelectEdge>:
void MTIMER1_VidICU_SelectEdge(uint8 copy_uint8SelectEgde)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	00 d0       	rcall	.+0      	; 0x133a <MTIMER1_VidICU_SelectEdge+0x6>
    133a:	0f 92       	push	r0
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_uint8SelectEgde)
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3b 83       	std	Y+3, r19	; 0x03
    134a:	2a 83       	std	Y+2, r18	; 0x02
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	9b 81       	ldd	r25, Y+3	; 0x03
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	69 f0       	breq	.+26     	; 0x136e <MTIMER1_VidICU_SelectEdge+0x3a>
    1354:	2a 81       	ldd	r18, Y+2	; 0x02
    1356:	3b 81       	ldd	r19, Y+3	; 0x03
    1358:	21 30       	cpi	r18, 0x01	; 1
    135a:	31 05       	cpc	r19, r1
    135c:	79 f4       	brne	.+30     	; 0x137c <MTIMER1_VidICU_SelectEdge+0x48>
	{
	case ICU_RISING_EDGE:
	{
	     SET_BIT(TCCR1B,6);
    135e:	ae e4       	ldi	r26, 0x4E	; 78
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ee e4       	ldi	r30, 0x4E	; 78
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 64       	ori	r24, 0x40	; 64
    136a:	8c 93       	st	X, r24
    136c:	07 c0       	rjmp	.+14     	; 0x137c <MTIMER1_VidICU_SelectEdge+0x48>
	     break;
	}
	case ICU_FALLING_EDGE:
	{
		CLR_BIT(TCCR1B,6);
    136e:	ae e4       	ldi	r26, 0x4E	; 78
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ee e4       	ldi	r30, 0x4E	; 78
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8f 7b       	andi	r24, 0xBF	; 191
    137a:	8c 93       	st	X, r24
		break;
	}

	}
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <MTIMER1_VidSetPreLoad>:
void MTIMER1_VidSetPreLoad(uint16 copy_uint16PreLoadvalue)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <MTIMER1_VidSetPreLoad+0x6>
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
	/*Normal mode data Register*/
	//uint16 TCNT1;
	TCNT1=copy_uint16PreLoadvalue;
    1396:	ec e4       	ldi	r30, 0x4C	; 76
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
	/*TCNT1=TCNT1H;
	TCNT1|=TCNT1L<<8;
	TCNT1=copy_uint8PreLoadvalue;*/
}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <MTIMER1_VidSetCTCRegister_CHB>:
void MTIMER1_VidSetCTCRegister_CHB(uint16 copy_uint16CTCValue)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <MTIMER1_VidSetCTCRegister_CHB+0x6>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	9a 83       	std	Y+2, r25	; 0x02
    13b8:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=copy_uint16CTCValue;
    13ba:	e8 e4       	ldi	r30, 0x48	; 72
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
	/*OutPut Compare match B option*/
	/*OCR1B=OCR1BH;
	OCR1B|=OCR1BL<<8;
	OCR1B=copy_uint16CTCValue;*/
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <MTIMER1_VidSetCTCRegister_CHA>:
void MTIMER1_VidSetCTCRegister_CHA(uint16 copy_uint16CTCValue)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <MTIMER1_VidSetCTCRegister_CHA+0x6>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=copy_uint16CTCValue;
    13de:	ea e4       	ldi	r30, 0x4A	; 74
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
	/*OutPut Compare match A option*/
	//OCR1A=copy_uint16CTCValue;
	/*OCR1A=OCR1AH;
		OCR1A|=OCR1AL<<8;
		OCR1A=copy_uint16CTCValue;*/
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <MTIMER1_VidSetCTCRegister_ICR1>:
void MTIMER1_VidSetCTCRegister_ICR1(uint16 copy_uint16CTCValue)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <MTIMER1_VidSetCTCRegister_ICR1+0x6>
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01
	ICR1=copy_uint16CTCValue;
    1402:	e6 e4       	ldi	r30, 0x46	; 70
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <MTIMER1_VidTimer1_OverFlow_SetCallBack>:
void MTIMER1_VidTimer1_OverFlow_SetCallBack(void (*PtrToFun)(void))
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <MTIMER1_VidTimer1_OverFlow_SetCallBack+0x6>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	90 93 90 00 	sts	0x0090, r25
    142e:	80 93 8f 00 	sts	0x008F, r24
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <MTIMER1_VidTimer1_CTC_SetCallBack>:
void MTIMER1_VidTimer1_CTC_SetCallBack(void (*PtrToFun)(void))
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <MTIMER1_VidTimer1_CTC_SetCallBack+0x6>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	90 93 90 00 	sts	0x0090, r25
    1452:	80 93 8f 00 	sts	0x008F, r24
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <MTIMER1_uint32Read_ICR1>:

uint32 MTIMER1_uint32Read_ICR1(void)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1468:	e6 e4       	ldi	r30, 0x46	; 70
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	cc 01       	movw	r24, r24
    1472:	a0 e0       	ldi	r26, 0x00	; 0
    1474:	b0 e0       	ldi	r27, 0x00	; 0
}
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <MTIMER1_VidTimer1_ICU_SetCallBack>:
void MTIMER1_VidTimer1_ICU_SetCallBack(void(*PtrToFun)(void))
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <MTIMER1_VidTimer1_ICU_SetCallBack+0x6>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	90 93 90 00 	sts	0x0090, r25
    1496:	80 93 8f 00 	sts	0x008F, r24
}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <__vector_7>:
     /*Compare A*/
void __vector_7(void)  __attribute__((signal));
void __vector_7(void)
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	2f 93       	push	r18
    14b0:	3f 93       	push	r19
    14b2:	4f 93       	push	r20
    14b4:	5f 93       	push	r21
    14b6:	6f 93       	push	r22
    14b8:	7f 93       	push	r23
    14ba:	8f 93       	push	r24
    14bc:	9f 93       	push	r25
    14be:	af 93       	push	r26
    14c0:	bf 93       	push	r27
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    14ce:	e0 91 8f 00 	lds	r30, 0x008F
    14d2:	f0 91 90 00 	lds	r31, 0x0090
    14d6:	09 95       	icall
}
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	ff 91       	pop	r31
    14de:	ef 91       	pop	r30
    14e0:	bf 91       	pop	r27
    14e2:	af 91       	pop	r26
    14e4:	9f 91       	pop	r25
    14e6:	8f 91       	pop	r24
    14e8:	7f 91       	pop	r23
    14ea:	6f 91       	pop	r22
    14ec:	5f 91       	pop	r21
    14ee:	4f 91       	pop	r20
    14f0:	3f 91       	pop	r19
    14f2:	2f 91       	pop	r18
    14f4:	0f 90       	pop	r0
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	0f 90       	pop	r0
    14fa:	1f 90       	pop	r1
    14fc:	18 95       	reti

000014fe <__vector_8>:
   /*Compare B*/
void __vector_8(void)  __attribute__((signal));
void __vector_8(void)
{
    14fe:	1f 92       	push	r1
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	2f 93       	push	r18
    150a:	3f 93       	push	r19
    150c:	4f 93       	push	r20
    150e:	5f 93       	push	r21
    1510:	6f 93       	push	r22
    1512:	7f 93       	push	r23
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    1528:	e0 91 8f 00 	lds	r30, 0x008F
    152c:	f0 91 90 00 	lds	r31, 0x0090
    1530:	09 95       	icall
}
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <__vector_9>:
   /*OverFlow */
void __vector_9(void)  __attribute__((signal));
void __vector_9(void)
{
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	2f 93       	push	r18
    1564:	3f 93       	push	r19
    1566:	4f 93       	push	r20
    1568:	5f 93       	push	r21
    156a:	6f 93       	push	r22
    156c:	7f 93       	push	r23
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
    1572:	af 93       	push	r26
    1574:	bf 93       	push	r27
    1576:	ef 93       	push	r30
    1578:	ff 93       	push	r31
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    1582:	e0 91 8f 00 	lds	r30, 0x008F
    1586:	f0 91 90 00 	lds	r31, 0x0090
    158a:	09 95       	icall
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <__vector_6>:
  /*ICU*/
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	0f 92       	push	r0
    15ba:	11 24       	eor	r1, r1
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	4f 93       	push	r20
    15c2:	5f 93       	push	r21
    15c4:	6f 93       	push	r22
    15c6:	7f 93       	push	r23
    15c8:	8f 93       	push	r24
    15ca:	9f 93       	push	r25
    15cc:	af 93       	push	r26
    15ce:	bf 93       	push	r27
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    15dc:	e0 91 8f 00 	lds	r30, 0x008F
    15e0:	f0 91 90 00 	lds	r31, 0x0090
    15e4:	09 95       	icall
}
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	ff 91       	pop	r31
    15ec:	ef 91       	pop	r30
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	9f 91       	pop	r25
    15f4:	8f 91       	pop	r24
    15f6:	7f 91       	pop	r23
    15f8:	6f 91       	pop	r22
    15fa:	5f 91       	pop	r21
    15fc:	4f 91       	pop	r20
    15fe:	3f 91       	pop	r19
    1600:	2f 91       	pop	r18
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti

0000160c <MTIMER0_VidInit>:
#include"MTIMER0_Private.h"
#include"MTIMER0_Config.h"

void (*MTIMER0_CALLBACK)(void);
void MTIMER0_VidInit(void)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
	#else #error "OC0 PIN Is Not Valid.."
	#endif
	/*CTC Enable interrupt */
	SET_BIT(TIMSK,1);
#elif TIMER0_SETMODE == TIMER0_NORMALMODE
	CLR_BIT(TCCR0,3);
    1614:	a3 e5       	ldi	r26, 0x53	; 83
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e3 e5       	ldi	r30, 0x53	; 83
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	87 7f       	andi	r24, 0xF7	; 247
    1620:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
    1622:	a3 e5       	ldi	r26, 0x53	; 83
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e3 e5       	ldi	r30, 0x53	; 83
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8f 7b       	andi	r24, 0xBF	; 191
    162e:	8c 93       	st	X, r24
	/*OVERFLOW  Enable interrupt */
	SET_BIT(TIMSK,0);
    1630:	a9 e5       	ldi	r26, 0x59	; 89
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e9 e5       	ldi	r30, 0x59	; 89
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	81 60       	ori	r24, 0x01	; 1
    163c:	8c 93       	st	X, r24

#else
	#error"TIMER0 MODE Is Not Valid.."
#endif
	/*Set PreScaler*/
	TCCR0&=0xF8;
    163e:	a3 e5       	ldi	r26, 0x53	; 83
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e3 e5       	ldi	r30, 0x53	; 83
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	88 7f       	andi	r24, 0xF8	; 248
    164a:	8c 93       	st	X, r24
	TCCR0|=TIMER0_SETPRESCALER;
    164c:	a3 e5       	ldi	r26, 0x53	; 83
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e3 e5       	ldi	r30, 0x53	; 83
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	84 60       	ori	r24, 0x04	; 4
    1658:	8c 93       	st	X, r24
}
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <MTIMER0_uint32Read>:
uint8 MTIMER0_uint32Read(void)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1668:	e2 e5       	ldi	r30, 0x52	; 82
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <MTIMER0_VidSetPreLoad>:
void MTIMER0_VidSetPreLoad(uint8 copy_uint8PreLoad)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	0f 92       	push	r0
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=copy_uint8PreLoad;
    1680:	e2 e5       	ldi	r30, 0x52	; 82
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	80 83       	st	Z, r24
}
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <MTIMER0_VidSetCTCRegister>:
void MTIMER0_VidSetCTCRegister(uint8 copy_uint8CTCValue)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	0f 92       	push	r0
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	89 83       	std	Y+1, r24	; 0x01
	OCR0=copy_uint8CTCValue;
    169c:	ec e5       	ldi	r30, 0x5C	; 92
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	80 83       	st	Z, r24
}
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <MTIMER0_VidTimerOverFlow_SetCallBack>:
void MTIMER0_VidTimerOverFlow_SetCallBack(void (*PtrToFun)(void))
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <MTIMER0_VidTimerOverFlow_SetCallBack+0x6>
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	9a 83       	std	Y+2, r25	; 0x02
    16b8:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_CALLBACK=PtrToFun;
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	9a 81       	ldd	r25, Y+2	; 0x02
    16be:	90 93 92 00 	sts	0x0092, r25
    16c2:	80 93 91 00 	sts	0x0091, r24
}
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <MTIMER0_VidTimerCTC_SetCallBack>:
void MTIMER0_VidTimerCTC_SetCallBack(void (*PtrToFun)(void))
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <MTIMER0_VidTimerCTC_SetCallBack+0x6>
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_CALLBACK=PtrToFun;
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	90 93 92 00 	sts	0x0092, r25
    16e6:	80 93 91 00 	sts	0x0091, r24
}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <__vector_10>:

/*CTC*/
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    16f4:	1f 92       	push	r1
    16f6:	0f 92       	push	r0
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	0f 92       	push	r0
    16fc:	11 24       	eor	r1, r1
    16fe:	2f 93       	push	r18
    1700:	3f 93       	push	r19
    1702:	4f 93       	push	r20
    1704:	5f 93       	push	r21
    1706:	6f 93       	push	r22
    1708:	7f 93       	push	r23
    170a:	8f 93       	push	r24
    170c:	9f 93       	push	r25
    170e:	af 93       	push	r26
    1710:	bf 93       	push	r27
    1712:	ef 93       	push	r30
    1714:	ff 93       	push	r31
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_CALLBACK();
    171e:	e0 91 91 00 	lds	r30, 0x0091
    1722:	f0 91 92 00 	lds	r31, 0x0092
    1726:	09 95       	icall
}
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	ff 91       	pop	r31
    172e:	ef 91       	pop	r30
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	0f 90       	pop	r0
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	0f 90       	pop	r0
    174a:	1f 90       	pop	r1
    174c:	18 95       	reti

0000174e <__vector_11>:
/*OVERFLOW*/
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_CALLBACK();
    1778:	e0 91 91 00 	lds	r30, 0x0091
    177c:	f0 91 92 00 	lds	r31, 0x0092
    1780:	09 95       	icall
}
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	bf 91       	pop	r27
    178c:	af 91       	pop	r26
    178e:	9f 91       	pop	r25
    1790:	8f 91       	pop	r24
    1792:	7f 91       	pop	r23
    1794:	6f 91       	pop	r22
    1796:	5f 91       	pop	r21
    1798:	4f 91       	pop	r20
    179a:	3f 91       	pop	r19
    179c:	2f 91       	pop	r18
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	0f 90       	pop	r0
    17a4:	1f 90       	pop	r1
    17a6:	18 95       	reti

000017a8 <MSPI_VidMasterInit>:
#include"MSPI_Private.h"
#include"MSPI_Config.h"

void (*MSPI_CALLBACK)(void);
void MSPI_VidMasterInit(void)
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Order */
#if MSPI_DATAORDER == MSPI_LSB_DATAORDER
	SET_BIT(SPCR,5);
    17b0:	ad e2       	ldi	r26, 0x2D	; 45
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ed e2       	ldi	r30, 0x2D	; 45
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	80 62       	ori	r24, 0x20	; 32
    17bc:	8c 93       	st	X, r24
#else
#error"Data Order Option Is Not Valid.."
#endif
	/*Set Clock Polarity And Phase*/
#if MSPI_SETCLOCKPOLARIT == MSPI_RISING_POLARITY
	CLR_BIT(SPCR,3);
    17be:	ad e2       	ldi	r26, 0x2D	; 45
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ed e2       	ldi	r30, 0x2D	; 45
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	87 7f       	andi	r24, 0xF7	; 247
    17ca:	8c 93       	st	X, r24
#else
#error"Clock Polarity Option Is Not Valid.."
#endif

#if MSPI_SETCLOCKPHASE == MSPI_SETUP_PHASE
	SET_BIT(SPCR,2);
    17cc:	ad e2       	ldi	r26, 0x2D	; 45
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ed e2       	ldi	r30, 0x2D	; 45
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	84 60       	ori	r24, 0x04	; 4
    17d8:	8c 93       	st	X, r24
#else
#error"Clock Phase Option Is Not Valid.."
#endif
	/*Set Double Speed*/
#if MSPI_SETDOUBLESPEED == MSPI_DOUBLESPEED
	SET_BIT(SPSR,0);
    17da:	ae e2       	ldi	r26, 0x2E	; 46
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ee e2       	ldi	r30, 0x2E	; 46
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	81 60       	ori	r24, 0x01	; 1
    17e6:	8c 93       	st	X, r24
	CLR_BIT(SPSR,0);
#else
#error"Double Speed Option Is Not Valid.."
#endif
	       /*Set PreScaler */
	SPCR&=0x3F;
    17e8:	ad e2       	ldi	r26, 0x2D	; 45
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	ed e2       	ldi	r30, 0x2D	; 45
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8f 73       	andi	r24, 0x3F	; 63
    17f4:	8c 93       	st	X, r24
	SPCR|=MSPI_PRESCALER;
    17f6:	ad e2       	ldi	r26, 0x2D	; 45
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	ed e2       	ldi	r30, 0x2D	; 45
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	81 60       	ori	r24, 0x01	; 1
    1802:	8c 93       	st	X, r24
	      /*SET as Master*/
	SET_BIT(SPCR,4);
    1804:	ad e2       	ldi	r26, 0x2D	; 45
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	ed e2       	ldi	r30, 0x2D	; 45
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	80 61       	ori	r24, 0x10	; 16
    1810:	8c 93       	st	X, r24
	      /*Enable SPI*/
	SET_BIT(SPCR,6);
    1812:	ad e2       	ldi	r26, 0x2D	; 45
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	ed e2       	ldi	r30, 0x2D	; 45
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	80 64       	ori	r24, 0x40	; 64
    181e:	8c 93       	st	X, r24
	/*Enable SPI interrupt*/
	SET_BIT(SPCR,7);
    1820:	ad e2       	ldi	r26, 0x2D	; 45
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	ed e2       	ldi	r30, 0x2D	; 45
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	80 68       	ori	r24, 0x80	; 128
    182c:	8c 93       	st	X, r24
}
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <MSPI_VidSalveInit>:
void MSPI_VidSalveInit(void)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Order */
#if MSPI_DATAORDER == MSPI_LSB_DATAORDER
	SET_BIT(SPCR,5);
    183c:	ad e2       	ldi	r26, 0x2D	; 45
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ed e2       	ldi	r30, 0x2D	; 45
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	80 62       	ori	r24, 0x20	; 32
    1848:	8c 93       	st	X, r24
#else
#error"Data Order Option Is Not Valid.."
#endif
	/*Set Clock Polarity And Phase*/
#if MSPI_SETCLOCKPOLARIT == MSPI_RISING_POLARITY
	CLR_BIT(SPCR,3);
    184a:	ad e2       	ldi	r26, 0x2D	; 45
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	ed e2       	ldi	r30, 0x2D	; 45
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	87 7f       	andi	r24, 0xF7	; 247
    1856:	8c 93       	st	X, r24
#else
#error"Clock Polarity Option Is Not Valid.."
#endif

#if MSPI_SETCLOCKPHASE == MSPI_SETUP_PHASE
	SET_BIT(SPCR,2);
    1858:	ad e2       	ldi	r26, 0x2D	; 45
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	ed e2       	ldi	r30, 0x2D	; 45
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	84 60       	ori	r24, 0x04	; 4
    1864:	8c 93       	st	X, r24
#else
#error"Clock Phase Option Is Not Valid.."
#endif

	       /*SET as Salve*/
	CLR_BIT(SPCR,4);
    1866:	ad e2       	ldi	r26, 0x2D	; 45
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	ed e2       	ldi	r30, 0x2D	; 45
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8f 7e       	andi	r24, 0xEF	; 239
    1872:	8c 93       	st	X, r24
	       /*Enable SPI*/
	SET_BIT(SPCR,6);
    1874:	ad e2       	ldi	r26, 0x2D	; 45
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	ed e2       	ldi	r30, 0x2D	; 45
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	80 64       	ori	r24, 0x40	; 64
    1880:	8c 93       	st	X, r24
	      /*Enable SPI interrupt*/
		SET_BIT(SPCR,7);
    1882:	ad e2       	ldi	r26, 0x2D	; 45
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ed e2       	ldi	r30, 0x2D	; 45
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	80 68       	ori	r24, 0x80	; 128
    188e:	8c 93       	st	X, r24

}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <MSPI_uint8SendReceiveChar>:
uint8 MSPI_uint8SendReceiveChar(uint8 copy_uint8Char)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	89 83       	std	Y+1, r24	; 0x01
	SPDR=copy_uint8Char;
    18a2:	ef e2       	ldi	r30, 0x2F	; 47
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,6)==0);
    18aa:	ee e2       	ldi	r30, 0x2E	; 46
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	82 95       	swap	r24
    18b2:	86 95       	lsr	r24
    18b4:	86 95       	lsr	r24
    18b6:	83 70       	andi	r24, 0x03	; 3
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	81 70       	andi	r24, 0x01	; 1
    18be:	90 70       	andi	r25, 0x00	; 0
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	99 f3       	breq	.-26     	; 0x18aa <MSPI_uint8SendReceiveChar+0x14>
	return SPDR;
    18c4:	ef e2       	ldi	r30, 0x2F	; 47
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
}
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <MSPI_VidSPI_SetCallBack>:
void MSPI_VidSPI_SetCallBack(void(*PtrToFun)(void))
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <MSPI_VidSPI_SetCallBack+0x6>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	9a 83       	std	Y+2, r25	; 0x02
    18de:	89 83       	std	Y+1, r24	; 0x01
	MSPI_CALLBACK=PtrToFun;
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	9a 81       	ldd	r25, Y+2	; 0x02
    18e4:	90 93 94 00 	sts	0x0094, r25
    18e8:	80 93 93 00 	sts	0x0093, r24
}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <__vector_12>:
void __vector_12(void)    __attribute__((signal));
void __vector_12(void)
{
    18f6:	1f 92       	push	r1
    18f8:	0f 92       	push	r0
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	0f 92       	push	r0
    18fe:	11 24       	eor	r1, r1
    1900:	2f 93       	push	r18
    1902:	3f 93       	push	r19
    1904:	4f 93       	push	r20
    1906:	5f 93       	push	r21
    1908:	6f 93       	push	r22
    190a:	7f 93       	push	r23
    190c:	8f 93       	push	r24
    190e:	9f 93       	push	r25
    1910:	af 93       	push	r26
    1912:	bf 93       	push	r27
    1914:	ef 93       	push	r30
    1916:	ff 93       	push	r31
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
	MSPI_CALLBACK();
    1920:	e0 91 93 00 	lds	r30, 0x0093
    1924:	f0 91 94 00 	lds	r31, 0x0094
    1928:	09 95       	icall
}
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	ff 91       	pop	r31
    1930:	ef 91       	pop	r30
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	7f 91       	pop	r23
    193c:	6f 91       	pop	r22
    193e:	5f 91       	pop	r21
    1940:	4f 91       	pop	r20
    1942:	3f 91       	pop	r19
    1944:	2f 91       	pop	r18
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	0f 90       	pop	r0
    194c:	1f 90       	pop	r1
    194e:	18 95       	reti

00001950 <MGIE_Enable>:

#include"../../LIB/LSTD_TYPES.h"
#include"../../LIB/LBIT_MATH.h"
#include"MGIE_Private.h"
void MGIE_Enable(void)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1958:	af e5       	ldi	r26, 0x5F	; 95
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ef e5       	ldi	r30, 0x5F	; 95
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	80 68       	ori	r24, 0x80	; 128
    1964:	8c 93       	st	X, r24
}
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <MGIE_Disable>:
void MGIE_Disable(void)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1974:	af e5       	ldi	r26, 0x5F	; 95
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	ef e5       	ldi	r30, 0x5F	; 95
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8f 77       	andi	r24, 0x7F	; 127
    1980:	8c 93       	st	X, r24
}
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <MEXTI_VidInitEXTI0>:
#include "MEXTI_Config.h"

void (*CALLBACK)(void);

void MEXTI_VidInitEXTI0(void)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
	/*Select sense control*/
#if SET_SENCECONTROL_EXTI0==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,1);
	SET_BIT(MCUCR,0);
#elif SET_SENCECONTROL_EXTI0==MEXTI_FALLING_EDGE
	SET_BIT(MCUCR,1);
    1990:	a5 e5       	ldi	r26, 0x55	; 85
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e5 e5       	ldi	r30, 0x55	; 85
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	82 60       	ori	r24, 0x02	; 2
    199c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);
    199e:	a5 e5       	ldi	r26, 0x55	; 85
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e5 e5       	ldi	r30, 0x55	; 85
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8e 7f       	andi	r24, 0xFE	; 254
    19aa:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI0 is not valid"

#endif
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
    19ac:	ab e5       	ldi	r26, 0x5B	; 91
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	eb e5       	ldi	r30, 0x5B	; 91
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	80 64       	ori	r24, 0x40	; 64
    19b8:	8c 93       	st	X, r24

}
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <MEXTI_VidInitEXTI1>:
void MEXTI_VidInitEXTI1(void)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control */
#if SET_SENCECONTROL_EXTI1==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,3);
    19c8:	a5 e5       	ldi	r26, 0x55	; 85
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e5 e5       	ldi	r30, 0x55	; 85
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	88 60       	ori	r24, 0x08	; 8
    19d4:	8c 93       	st	X, r24
	SET_BIT(MCUCR,2);
    19d6:	a5 e5       	ldi	r26, 0x55	; 85
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e5 e5       	ldi	r30, 0x55	; 85
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	84 60       	ori	r24, 0x04	; 4
    19e2:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI1 is not valid"

#endif
	/* Enable EXTI 1*/
	SET_BIT(GICR,7);
    19e4:	ab e5       	ldi	r26, 0x5B	; 91
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	eb e5       	ldi	r30, 0x5B	; 91
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	80 68       	ori	r24, 0x80	; 128
    19f0:	8c 93       	st	X, r24
}
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <MEXTI_VidInitEXTI2>:
void MEXTI_VidInitEXTI2(void)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control */
	#if SET_SENCECONTROL_EXTI2==MEXTI_RISING_EDGE
		SET_BIT(MCUCSR,6);
	#elif SET_SENCECONTROL_EXTI2==MEXTI_FALLING_EDGE
		CLR_BIT(MCUCSR,6);
    1a00:	a4 e5       	ldi	r26, 0x54	; 84
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e4 e5       	ldi	r30, 0x54	; 84
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	8f 7b       	andi	r24, 0xBF	; 191
    1a0c:	8c 93       	st	X, r24
	#else
	#error "Sense Control option of EXTI2 is not valid"

	#endif
		/* Enable EXTI 2*/
		SET_BIT(GICR,5);
    1a0e:	ab e5       	ldi	r26, 0x5B	; 91
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	eb e5       	ldi	r30, 0x5B	; 91
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	80 62       	ori	r24, 0x20	; 32
    1a1a:	8c 93       	st	X, r24

}
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <MEXTI_VidSenseControlSelect>:
void MEXTI_VidSenseControlSelect(uint8 copy_uint8EXTI_ID,uint8 copy_uint8EXTI_SenseControl)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <MEXTI_VidSenseControlSelect+0x6>
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <MEXTI_VidSenseControlSelect+0x8>
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_uint8EXTI_ID)
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	3c 83       	std	Y+4, r19	; 0x04
    1a3a:	2b 83       	std	Y+3, r18	; 0x03
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	91 05       	cpc	r25, r1
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <MEXTI_VidSenseControlSelect+0x26>
    1a46:	54 c0       	rjmp	.+168    	; 0x1af0 <MEXTI_VidSenseControlSelect+0xce>
    1a48:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4c:	22 30       	cpi	r18, 0x02	; 2
    1a4e:	31 05       	cpc	r19, r1
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <MEXTI_VidSenseControlSelect+0x32>
    1a52:	96 c0       	rjmp	.+300    	; 0x1b80 <MEXTI_VidSenseControlSelect+0x15e>
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <MEXTI_VidSenseControlSelect+0x3c>
    1a5c:	a6 c0       	rjmp	.+332    	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
	{
	case EXTI0:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	88 23       	and	r24, r24
    1a62:	79 f4       	brne	.+30     	; 0x1a82 <MEXTI_VidSenseControlSelect+0x60>
		{
			SET_BIT(MCUCR,1);
    1a64:	a5 e5       	ldi	r26, 0x55	; 85
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e5 e5       	ldi	r30, 0x55	; 85
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	82 60       	ori	r24, 0x02	; 2
    1a70:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1a72:	a5 e5       	ldi	r26, 0x55	; 85
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e5 e5       	ldi	r30, 0x55	; 85
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	81 60       	ori	r24, 0x01	; 1
    1a7e:	8c 93       	st	X, r24
    1a80:	94 c0       	rjmp	.+296    	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	79 f4       	brne	.+30     	; 0x1aa6 <MEXTI_VidSenseControlSelect+0x84>
		{
			SET_BIT(MCUCR,1);
    1a88:	a5 e5       	ldi	r26, 0x55	; 85
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e5 e5       	ldi	r30, 0x55	; 85
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	82 60       	ori	r24, 0x02	; 2
    1a94:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    1a96:	a5 e5       	ldi	r26, 0x55	; 85
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e5 e5       	ldi	r30, 0x55	; 85
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	8e 7f       	andi	r24, 0xFE	; 254
    1aa2:	8c 93       	st	X, r24
    1aa4:	82 c0       	rjmp	.+260    	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	79 f4       	brne	.+30     	; 0x1aca <MEXTI_VidSenseControlSelect+0xa8>
		{
			CLR_BIT(MCUCR,1);
    1aac:	a5 e5       	ldi	r26, 0x55	; 85
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e5 e5       	ldi	r30, 0x55	; 85
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8d 7f       	andi	r24, 0xFD	; 253
    1ab8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1aba:	a5 e5       	ldi	r26, 0x55	; 85
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e5 e5       	ldi	r30, 0x55	; 85
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	81 60       	ori	r24, 0x01	; 1
    1ac6:	8c 93       	st	X, r24
    1ac8:	70 c0       	rjmp	.+224    	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <MEXTI_VidSenseControlSelect+0xb0>
    1ad0:	6c c0       	rjmp	.+216    	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,1);
    1ad2:	a5 e5       	ldi	r26, 0x55	; 85
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e5 e5       	ldi	r30, 0x55	; 85
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	8d 7f       	andi	r24, 0xFD	; 253
    1ade:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    1ae0:	a5 e5       	ldi	r26, 0x55	; 85
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e5 e5       	ldi	r30, 0x55	; 85
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	8e 7f       	andi	r24, 0xFE	; 254
    1aec:	8c 93       	st	X, r24
    1aee:	5d c0       	rjmp	.+186    	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI1:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	88 23       	and	r24, r24
    1af4:	79 f4       	brne	.+30     	; 0x1b14 <MEXTI_VidSenseControlSelect+0xf2>
		{
			SET_BIT(MCUCR,3);
    1af6:	a5 e5       	ldi	r26, 0x55	; 85
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e5 e5       	ldi	r30, 0x55	; 85
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	88 60       	ori	r24, 0x08	; 8
    1b02:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    1b04:	a5 e5       	ldi	r26, 0x55	; 85
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e5 e5       	ldi	r30, 0x55	; 85
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	84 60       	ori	r24, 0x04	; 4
    1b10:	8c 93       	st	X, r24
    1b12:	4b c0       	rjmp	.+150    	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	79 f4       	brne	.+30     	; 0x1b38 <MEXTI_VidSenseControlSelect+0x116>
		{
			SET_BIT(MCUCR,3);
    1b1a:	a5 e5       	ldi	r26, 0x55	; 85
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e5 e5       	ldi	r30, 0x55	; 85
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	88 60       	ori	r24, 0x08	; 8
    1b26:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    1b28:	a5 e5       	ldi	r26, 0x55	; 85
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e5 e5       	ldi	r30, 0x55	; 85
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	8b 7f       	andi	r24, 0xFB	; 251
    1b34:	8c 93       	st	X, r24
    1b36:	39 c0       	rjmp	.+114    	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	79 f4       	brne	.+30     	; 0x1b5c <MEXTI_VidSenseControlSelect+0x13a>
		{
			CLR_BIT(MCUCR,3);
    1b3e:	a5 e5       	ldi	r26, 0x55	; 85
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e5       	ldi	r30, 0x55	; 85
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	87 7f       	andi	r24, 0xF7	; 247
    1b4a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    1b4c:	a5 e5       	ldi	r26, 0x55	; 85
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e5 e5       	ldi	r30, 0x55	; 85
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	84 60       	ori	r24, 0x04	; 4
    1b58:	8c 93       	st	X, r24
    1b5a:	27 c0       	rjmp	.+78     	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	21 f5       	brne	.+72     	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,3);
    1b62:	a5 e5       	ldi	r26, 0x55	; 85
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e5 e5       	ldi	r30, 0x55	; 85
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	87 7f       	andi	r24, 0xF7	; 247
    1b6e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    1b70:	a5 e5       	ldi	r26, 0x55	; 85
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e5 e5       	ldi	r30, 0x55	; 85
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	8b 7f       	andi	r24, 0xFB	; 251
    1b7c:	8c 93       	st	X, r24
    1b7e:	15 c0       	rjmp	.+42     	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI2:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	88 23       	and	r24, r24
    1b84:	41 f4       	brne	.+16     	; 0x1b96 <MEXTI_VidSenseControlSelect+0x174>
		{
			SET_BIT(MCUCSR,6);
    1b86:	a4 e5       	ldi	r26, 0x54	; 84
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e4 e5       	ldi	r30, 0x54	; 84
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	80 64       	ori	r24, 0x40	; 64
    1b92:	8c 93       	st	X, r24
    1b94:	0a c0       	rjmp	.+20     	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	39 f4       	brne	.+14     	; 0x1baa <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCSR,6);		}
    1b9c:	a4 e5       	ldi	r26, 0x54	; 84
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e4 e5       	ldi	r30, 0x54	; 84
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	8f 7b       	andi	r24, 0xBF	; 191
    1ba8:	8c 93       	st	X, r24
			/*do nothing*/
		}
		break;
	}

}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <MEXTI0_VidSetCallBack>:
void MEXTI0_VidSetCallBack(void (*PtrToFun)(void))
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <MEXTI0_VidSetCallBack+0x6>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	90 93 8c 00 	sts	0x008C, r25
    1bce:	80 93 8b 00 	sts	0x008B, r24
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <MEXTI1_VidSetCallBack>:
void MEXTI1_VidSetCallBack(void (*PtrToFun)(void))
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <MEXTI1_VidSetCallBack+0x6>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	90 93 8c 00 	sts	0x008C, r25
    1bf2:	80 93 8b 00 	sts	0x008B, r24
}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <MEXTI2_VidSetCallBack>:
void MEXTI2_VidSetCallBack(void (*PtrToFun)(void))
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <MEXTI2_VidSetCallBack+0x6>
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	9a 83       	std	Y+2, r25	; 0x02
    1c0c:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	90 93 8c 00 	sts	0x008C, r25
    1c16:	80 93 8b 00 	sts	0x008B, r24
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <__vector_1>:
/*EXTI0*/
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    1c24:	1f 92       	push	r1
    1c26:	0f 92       	push	r0
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	0f 92       	push	r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	2f 93       	push	r18
    1c30:	3f 93       	push	r19
    1c32:	4f 93       	push	r20
    1c34:	5f 93       	push	r21
    1c36:	6f 93       	push	r22
    1c38:	7f 93       	push	r23
    1c3a:	8f 93       	push	r24
    1c3c:	9f 93       	push	r25
    1c3e:	af 93       	push	r26
    1c40:	bf 93       	push	r27
    1c42:	ef 93       	push	r30
    1c44:	ff 93       	push	r31
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1c4e:	e0 91 8b 00 	lds	r30, 0x008B
    1c52:	f0 91 8c 00 	lds	r31, 0x008C
    1c56:	09 95       	icall
}
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	ff 91       	pop	r31
    1c5e:	ef 91       	pop	r30
    1c60:	bf 91       	pop	r27
    1c62:	af 91       	pop	r26
    1c64:	9f 91       	pop	r25
    1c66:	8f 91       	pop	r24
    1c68:	7f 91       	pop	r23
    1c6a:	6f 91       	pop	r22
    1c6c:	5f 91       	pop	r21
    1c6e:	4f 91       	pop	r20
    1c70:	3f 91       	pop	r19
    1c72:	2f 91       	pop	r18
    1c74:	0f 90       	pop	r0
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	0f 90       	pop	r0
    1c7a:	1f 90       	pop	r1
    1c7c:	18 95       	reti

00001c7e <__vector_2>:
/*EXTI 1 */
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    1c7e:	1f 92       	push	r1
    1c80:	0f 92       	push	r0
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	0f 92       	push	r0
    1c86:	11 24       	eor	r1, r1
    1c88:	2f 93       	push	r18
    1c8a:	3f 93       	push	r19
    1c8c:	4f 93       	push	r20
    1c8e:	5f 93       	push	r21
    1c90:	6f 93       	push	r22
    1c92:	7f 93       	push	r23
    1c94:	8f 93       	push	r24
    1c96:	9f 93       	push	r25
    1c98:	af 93       	push	r26
    1c9a:	bf 93       	push	r27
    1c9c:	ef 93       	push	r30
    1c9e:	ff 93       	push	r31
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1ca8:	e0 91 8b 00 	lds	r30, 0x008B
    1cac:	f0 91 8c 00 	lds	r31, 0x008C
    1cb0:	09 95       	icall
}
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	ff 91       	pop	r31
    1cb8:	ef 91       	pop	r30
    1cba:	bf 91       	pop	r27
    1cbc:	af 91       	pop	r26
    1cbe:	9f 91       	pop	r25
    1cc0:	8f 91       	pop	r24
    1cc2:	7f 91       	pop	r23
    1cc4:	6f 91       	pop	r22
    1cc6:	5f 91       	pop	r21
    1cc8:	4f 91       	pop	r20
    1cca:	3f 91       	pop	r19
    1ccc:	2f 91       	pop	r18
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <__vector_3>:
/*EXTI2*/
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	2f 93       	push	r18
    1ce4:	3f 93       	push	r19
    1ce6:	4f 93       	push	r20
    1ce8:	5f 93       	push	r21
    1cea:	6f 93       	push	r22
    1cec:	7f 93       	push	r23
    1cee:	8f 93       	push	r24
    1cf0:	9f 93       	push	r25
    1cf2:	af 93       	push	r26
    1cf4:	bf 93       	push	r27
    1cf6:	ef 93       	push	r30
    1cf8:	ff 93       	push	r31
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1d02:	e0 91 8b 00 	lds	r30, 0x008B
    1d06:	f0 91 8c 00 	lds	r31, 0x008C
    1d0a:	09 95       	icall
}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	ff 91       	pop	r31
    1d12:	ef 91       	pop	r30
    1d14:	bf 91       	pop	r27
    1d16:	af 91       	pop	r26
    1d18:	9f 91       	pop	r25
    1d1a:	8f 91       	pop	r24
    1d1c:	7f 91       	pop	r23
    1d1e:	6f 91       	pop	r22
    1d20:	5f 91       	pop	r21
    1d22:	4f 91       	pop	r20
    1d24:	3f 91       	pop	r19
    1d26:	2f 91       	pop	r18
    1d28:	0f 90       	pop	r0
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	0f 90       	pop	r0
    1d2e:	1f 90       	pop	r1
    1d30:	18 95       	reti

00001d32 <MDIO_Errorstate_SetPinDirection>:

/********* Set pin direction************/

ErrorState MDIO_Errorstate_SetPinDirection (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinDirection)

{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	28 97       	sbiw	r28, 0x08	; 8
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	8a 83       	std	Y+2, r24	; 0x02
    1d48:	6b 83       	std	Y+3, r22	; 0x03
    1d4a:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	89 83       	std	Y+1, r24	; 0x01

	if (copy_uint8PinNumber<8)
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	88 30       	cpi	r24, 0x08	; 8
    1d54:	08 f0       	brcs	.+2      	; 0x1d58 <MDIO_Errorstate_SetPinDirection+0x26>
    1d56:	f1 c0       	rjmp	.+482    	; 0x1f3a <MDIO_Errorstate_SetPinDirection+0x208>
	{
		if(copy_uint8PinDirection==PIN_OUTPUT)
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <MDIO_Errorstate_SetPinDirection+0x2e>
    1d5e:	71 c0       	rjmp	.+226    	; 0x1e42 <MDIO_Errorstate_SetPinDirection+0x110>
		{
			switch(copy_uint8PortID)
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	38 87       	std	Y+8, r19	; 0x08
    1d68:	2f 83       	std	Y+7, r18	; 0x07
    1d6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d6c:	98 85       	ldd	r25, Y+8	; 0x08
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	91 05       	cpc	r25, r1
    1d72:	49 f1       	breq	.+82     	; 0x1dc6 <MDIO_Errorstate_SetPinDirection+0x94>
    1d74:	2f 81       	ldd	r18, Y+7	; 0x07
    1d76:	38 85       	ldd	r19, Y+8	; 0x08
    1d78:	22 30       	cpi	r18, 0x02	; 2
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <MDIO_Errorstate_SetPinDirection+0x56>
    1d7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d80:	98 85       	ldd	r25, Y+8	; 0x08
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	61 f0       	breq	.+24     	; 0x1d9e <MDIO_Errorstate_SetPinDirection+0x6c>
    1d86:	5b c0       	rjmp	.+182    	; 0x1e3e <MDIO_Errorstate_SetPinDirection+0x10c>
    1d88:	2f 81       	ldd	r18, Y+7	; 0x07
    1d8a:	38 85       	ldd	r19, Y+8	; 0x08
    1d8c:	22 30       	cpi	r18, 0x02	; 2
    1d8e:	31 05       	cpc	r19, r1
    1d90:	71 f1       	breq	.+92     	; 0x1dee <MDIO_Errorstate_SetPinDirection+0xbc>
    1d92:	8f 81       	ldd	r24, Y+7	; 0x07
    1d94:	98 85       	ldd	r25, Y+8	; 0x08
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	91 05       	cpc	r25, r1
    1d9a:	e9 f1       	breq	.+122    	; 0x1e16 <MDIO_Errorstate_SetPinDirection+0xe4>
    1d9c:	50 c0       	rjmp	.+160    	; 0x1e3e <MDIO_Errorstate_SetPinDirection+0x10c>
			{
			case MDIO_PORTA:
				SET_BIT(DDRA,copy_uint8PinNumber);
    1d9e:	aa e3       	ldi	r26, 0x3A	; 58
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	ea e3       	ldi	r30, 0x3A	; 58
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <MDIO_Errorstate_SetPinDirection+0x8a>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <MDIO_Errorstate_SetPinDirection+0x86>
    1dc0:	84 2b       	or	r24, r20
    1dc2:	8c 93       	st	X, r24
    1dc4:	bb c0       	rjmp	.+374    	; 0x1f3c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				SET_BIT(DDRB,copy_uint8PinNumber);
    1dc6:	a7 e3       	ldi	r26, 0x37	; 55
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e7 e3       	ldi	r30, 0x37	; 55
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <MDIO_Errorstate_SetPinDirection+0xb2>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <MDIO_Errorstate_SetPinDirection+0xae>
    1de8:	84 2b       	or	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	a7 c0       	rjmp	.+334    	; 0x1f3c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				SET_BIT(DDRC,copy_uint8PinNumber);
    1dee:	a4 e3       	ldi	r26, 0x34	; 52
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e4 e3       	ldi	r30, 0x34	; 52
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <MDIO_Errorstate_SetPinDirection+0xda>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <MDIO_Errorstate_SetPinDirection+0xd6>
    1e10:	84 2b       	or	r24, r20
    1e12:	8c 93       	st	X, r24
    1e14:	93 c0       	rjmp	.+294    	; 0x1f3c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				SET_BIT(DDRD,copy_uint8PinNumber);
    1e16:	a1 e3       	ldi	r26, 0x31	; 49
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e1 e3       	ldi	r30, 0x31	; 49
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	48 2f       	mov	r20, r24
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	02 2e       	mov	r0, r18
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <MDIO_Errorstate_SetPinDirection+0x102>
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	0a 94       	dec	r0
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <MDIO_Errorstate_SetPinDirection+0xfe>
    1e38:	84 2b       	or	r24, r20
    1e3a:	8c 93       	st	X, r24
    1e3c:	7f c0       	rjmp	.+254    	; 0x1f3c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    1e3e:	19 82       	std	Y+1, r1	; 0x01
    1e40:	7d c0       	rjmp	.+250    	; 0x1f3c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			}
		}

		else if(copy_uint8PinDirection==PIN_INPUT)
    1e42:	8c 81       	ldd	r24, Y+4	; 0x04
    1e44:	88 23       	and	r24, r24
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <MDIO_Errorstate_SetPinDirection+0x118>
    1e48:	76 c0       	rjmp	.+236    	; 0x1f36 <MDIO_Errorstate_SetPinDirection+0x204>
		{
			switch(copy_uint8PortID)
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	3e 83       	std	Y+6, r19	; 0x06
    1e52:	2d 83       	std	Y+5, r18	; 0x05
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	59 f1       	breq	.+86     	; 0x1eb4 <MDIO_Errorstate_SetPinDirection+0x182>
    1e5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e60:	3e 81       	ldd	r19, Y+6	; 0x06
    1e62:	22 30       	cpi	r18, 0x02	; 2
    1e64:	31 05       	cpc	r19, r1
    1e66:	2c f4       	brge	.+10     	; 0x1e72 <MDIO_Errorstate_SetPinDirection+0x140>
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	69 f0       	breq	.+26     	; 0x1e8a <MDIO_Errorstate_SetPinDirection+0x158>
    1e70:	60 c0       	rjmp	.+192    	; 0x1f32 <MDIO_Errorstate_SetPinDirection+0x200>
    1e72:	2d 81       	ldd	r18, Y+5	; 0x05
    1e74:	3e 81       	ldd	r19, Y+6	; 0x06
    1e76:	22 30       	cpi	r18, 0x02	; 2
    1e78:	31 05       	cpc	r19, r1
    1e7a:	89 f1       	breq	.+98     	; 0x1ede <MDIO_Errorstate_SetPinDirection+0x1ac>
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	83 30       	cpi	r24, 0x03	; 3
    1e82:	91 05       	cpc	r25, r1
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <MDIO_Errorstate_SetPinDirection+0x156>
    1e86:	40 c0       	rjmp	.+128    	; 0x1f08 <MDIO_Errorstate_SetPinDirection+0x1d6>
    1e88:	54 c0       	rjmp	.+168    	; 0x1f32 <MDIO_Errorstate_SetPinDirection+0x200>
			{
			case MDIO_PORTA:
				CLR_BIT(DDRA,copy_uint8PinNumber);
    1e8a:	aa e3       	ldi	r26, 0x3A	; 58
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	ea e3       	ldi	r30, 0x3A	; 58
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	48 2f       	mov	r20, r24
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	02 2e       	mov	r0, r18
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <MDIO_Errorstate_SetPinDirection+0x176>
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	0a 94       	dec	r0
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <MDIO_Errorstate_SetPinDirection+0x172>
    1eac:	80 95       	com	r24
    1eae:	84 23       	and	r24, r20
    1eb0:	8c 93       	st	X, r24
    1eb2:	44 c0       	rjmp	.+136    	; 0x1f3c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				CLR_BIT(DDRB,copy_uint8PinNumber);
    1eb4:	a7 e3       	ldi	r26, 0x37	; 55
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e7 e3       	ldi	r30, 0x37	; 55
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	48 2f       	mov	r20, r24
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	02 2e       	mov	r0, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <MDIO_Errorstate_SetPinDirection+0x1a0>
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	0a 94       	dec	r0
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <MDIO_Errorstate_SetPinDirection+0x19c>
    1ed6:	80 95       	com	r24
    1ed8:	84 23       	and	r24, r20
    1eda:	8c 93       	st	X, r24
    1edc:	2f c0       	rjmp	.+94     	; 0x1f3c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				CLR_BIT(DDRC,copy_uint8PinNumber);
    1ede:	a4 e3       	ldi	r26, 0x34	; 52
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e4 e3       	ldi	r30, 0x34	; 52
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	48 2f       	mov	r20, r24
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	02 2e       	mov	r0, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <MDIO_Errorstate_SetPinDirection+0x1ca>
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	0a 94       	dec	r0
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <MDIO_Errorstate_SetPinDirection+0x1c6>
    1f00:	80 95       	com	r24
    1f02:	84 23       	and	r24, r20
    1f04:	8c 93       	st	X, r24
    1f06:	1a c0       	rjmp	.+52     	; 0x1f3c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				CLR_BIT(DDRD,copy_uint8PinNumber);
    1f08:	a1 e3       	ldi	r26, 0x31	; 49
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e1 e3       	ldi	r30, 0x31	; 49
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	48 2f       	mov	r20, r24
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 2e       	mov	r0, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <MDIO_Errorstate_SetPinDirection+0x1f4>
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	0a 94       	dec	r0
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <MDIO_Errorstate_SetPinDirection+0x1f0>
    1f2a:	80 95       	com	r24
    1f2c:	84 23       	and	r24, r20
    1f2e:	8c 93       	st	X, r24
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    1f32:	19 82       	std	Y+1, r1	; 0x01
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <MDIO_Errorstate_SetPinDirection+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    1f36:	19 82       	std	Y+1, r1	; 0x01
    1f38:	01 c0       	rjmp	.+2      	; 0x1f3c <MDIO_Errorstate_SetPinDirection+0x20a>
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    1f3a:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state ;
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3e:	28 96       	adiw	r28, 0x08	; 8
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <MDIO_Errorstate_SetPinValue>:

/********* Set pin value************/
ErrorState MDIO_Errorstate_SetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinValue)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	28 97       	sbiw	r28, 0x08	; 8
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	8a 83       	std	Y+2, r24	; 0x02
    1f66:	6b 83       	std	Y+3, r22	; 0x03
    1f68:	4c 83       	std	Y+4, r20	; 0x04
	{
		ErrorState loc_Errorstate_Error_state = OK;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 83       	std	Y+1, r24	; 0x01

		if (copy_uint8PinNumber<8)
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	88 30       	cpi	r24, 0x08	; 8
    1f72:	08 f0       	brcs	.+2      	; 0x1f76 <MDIO_Errorstate_SetPinValue+0x26>
    1f74:	f1 c0       	rjmp	.+482    	; 0x2158 <MDIO_Errorstate_SetPinValue+0x208>
		{
			if(copy_uint8PinValue==PIN_HIGH)
    1f76:	8c 81       	ldd	r24, Y+4	; 0x04
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <MDIO_Errorstate_SetPinValue+0x2e>
    1f7c:	71 c0       	rjmp	.+226    	; 0x2060 <MDIO_Errorstate_SetPinValue+0x110>
			{
				switch(copy_uint8PortID)
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	38 87       	std	Y+8, r19	; 0x08
    1f86:	2f 83       	std	Y+7, r18	; 0x07
    1f88:	8f 81       	ldd	r24, Y+7	; 0x07
    1f8a:	98 85       	ldd	r25, Y+8	; 0x08
    1f8c:	81 30       	cpi	r24, 0x01	; 1
    1f8e:	91 05       	cpc	r25, r1
    1f90:	49 f1       	breq	.+82     	; 0x1fe4 <MDIO_Errorstate_SetPinValue+0x94>
    1f92:	2f 81       	ldd	r18, Y+7	; 0x07
    1f94:	38 85       	ldd	r19, Y+8	; 0x08
    1f96:	22 30       	cpi	r18, 0x02	; 2
    1f98:	31 05       	cpc	r19, r1
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <MDIO_Errorstate_SetPinValue+0x56>
    1f9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f9e:	98 85       	ldd	r25, Y+8	; 0x08
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	61 f0       	breq	.+24     	; 0x1fbc <MDIO_Errorstate_SetPinValue+0x6c>
    1fa4:	5b c0       	rjmp	.+182    	; 0x205c <MDIO_Errorstate_SetPinValue+0x10c>
    1fa6:	2f 81       	ldd	r18, Y+7	; 0x07
    1fa8:	38 85       	ldd	r19, Y+8	; 0x08
    1faa:	22 30       	cpi	r18, 0x02	; 2
    1fac:	31 05       	cpc	r19, r1
    1fae:	71 f1       	breq	.+92     	; 0x200c <MDIO_Errorstate_SetPinValue+0xbc>
    1fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb2:	98 85       	ldd	r25, Y+8	; 0x08
    1fb4:	83 30       	cpi	r24, 0x03	; 3
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	e9 f1       	breq	.+122    	; 0x2034 <MDIO_Errorstate_SetPinValue+0xe4>
    1fba:	50 c0       	rjmp	.+160    	; 0x205c <MDIO_Errorstate_SetPinValue+0x10c>
				{
				case MDIO_PORTA:
					SET_BIT(PORTA,copy_uint8PinNumber);
    1fbc:	ab e3       	ldi	r26, 0x3B	; 59
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	eb e3       	ldi	r30, 0x3B	; 59
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	48 2f       	mov	r20, r24
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	02 2e       	mov	r0, r18
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <MDIO_Errorstate_SetPinValue+0x8a>
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	0a 94       	dec	r0
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <MDIO_Errorstate_SetPinValue+0x86>
    1fde:	84 2b       	or	r24, r20
    1fe0:	8c 93       	st	X, r24
    1fe2:	bb c0       	rjmp	.+374    	; 0x215a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					SET_BIT(PORTB,copy_uint8PinNumber);
    1fe4:	a8 e3       	ldi	r26, 0x38	; 56
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e8 e3       	ldi	r30, 0x38	; 56
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	48 2f       	mov	r20, r24
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	02 2e       	mov	r0, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <MDIO_Errorstate_SetPinValue+0xb2>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <MDIO_Errorstate_SetPinValue+0xae>
    2006:	84 2b       	or	r24, r20
    2008:	8c 93       	st	X, r24
    200a:	a7 c0       	rjmp	.+334    	; 0x215a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					SET_BIT(PORTC,copy_uint8PinNumber);
    200c:	a5 e3       	ldi	r26, 0x35	; 53
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e5 e3       	ldi	r30, 0x35	; 53
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	48 2f       	mov	r20, r24
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	02 2e       	mov	r0, r18
    2024:	02 c0       	rjmp	.+4      	; 0x202a <MDIO_Errorstate_SetPinValue+0xda>
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	0a 94       	dec	r0
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <MDIO_Errorstate_SetPinValue+0xd6>
    202e:	84 2b       	or	r24, r20
    2030:	8c 93       	st	X, r24
    2032:	93 c0       	rjmp	.+294    	; 0x215a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					SET_BIT(PORTD,copy_uint8PinNumber);
    2034:	a2 e3       	ldi	r26, 0x32	; 50
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e2 e3       	ldi	r30, 0x32	; 50
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	48 2f       	mov	r20, r24
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	02 2e       	mov	r0, r18
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <MDIO_Errorstate_SetPinValue+0x102>
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	0a 94       	dec	r0
    2054:	e2 f7       	brpl	.-8      	; 0x204e <MDIO_Errorstate_SetPinValue+0xfe>
    2056:	84 2b       	or	r24, r20
    2058:	8c 93       	st	X, r24
    205a:	7f c0       	rjmp	.+254    	; 0x215a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    205c:	19 82       	std	Y+1, r1	; 0x01
    205e:	7d c0       	rjmp	.+250    	; 0x215a <MDIO_Errorstate_SetPinValue+0x20a>

					break;
				}
			}

			else if(copy_uint8PinValue==PIN_LOW)
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	88 23       	and	r24, r24
    2064:	09 f0       	breq	.+2      	; 0x2068 <MDIO_Errorstate_SetPinValue+0x118>
    2066:	76 c0       	rjmp	.+236    	; 0x2154 <MDIO_Errorstate_SetPinValue+0x204>
			{
				switch(copy_uint8PortID)
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	3e 83       	std	Y+6, r19	; 0x06
    2070:	2d 83       	std	Y+5, r18	; 0x05
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	81 30       	cpi	r24, 0x01	; 1
    2078:	91 05       	cpc	r25, r1
    207a:	59 f1       	breq	.+86     	; 0x20d2 <MDIO_Errorstate_SetPinValue+0x182>
    207c:	2d 81       	ldd	r18, Y+5	; 0x05
    207e:	3e 81       	ldd	r19, Y+6	; 0x06
    2080:	22 30       	cpi	r18, 0x02	; 2
    2082:	31 05       	cpc	r19, r1
    2084:	2c f4       	brge	.+10     	; 0x2090 <MDIO_Errorstate_SetPinValue+0x140>
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	69 f0       	breq	.+26     	; 0x20a8 <MDIO_Errorstate_SetPinValue+0x158>
    208e:	60 c0       	rjmp	.+192    	; 0x2150 <MDIO_Errorstate_SetPinValue+0x200>
    2090:	2d 81       	ldd	r18, Y+5	; 0x05
    2092:	3e 81       	ldd	r19, Y+6	; 0x06
    2094:	22 30       	cpi	r18, 0x02	; 2
    2096:	31 05       	cpc	r19, r1
    2098:	89 f1       	breq	.+98     	; 0x20fc <MDIO_Errorstate_SetPinValue+0x1ac>
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
    209c:	9e 81       	ldd	r25, Y+6	; 0x06
    209e:	83 30       	cpi	r24, 0x03	; 3
    20a0:	91 05       	cpc	r25, r1
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <MDIO_Errorstate_SetPinValue+0x156>
    20a4:	40 c0       	rjmp	.+128    	; 0x2126 <MDIO_Errorstate_SetPinValue+0x1d6>
    20a6:	54 c0       	rjmp	.+168    	; 0x2150 <MDIO_Errorstate_SetPinValue+0x200>
				{
				case MDIO_PORTA:
					CLR_BIT(PORTA,copy_uint8PinNumber);
    20a8:	ab e3       	ldi	r26, 0x3B	; 59
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	eb e3       	ldi	r30, 0x3B	; 59
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	48 2f       	mov	r20, r24
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	02 2e       	mov	r0, r18
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <MDIO_Errorstate_SetPinValue+0x176>
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	0a 94       	dec	r0
    20c8:	e2 f7       	brpl	.-8      	; 0x20c2 <MDIO_Errorstate_SetPinValue+0x172>
    20ca:	80 95       	com	r24
    20cc:	84 23       	and	r24, r20
    20ce:	8c 93       	st	X, r24
    20d0:	44 c0       	rjmp	.+136    	; 0x215a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					CLR_BIT(PORTB,copy_uint8PinNumber);
    20d2:	a8 e3       	ldi	r26, 0x38	; 56
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e8 e3       	ldi	r30, 0x38	; 56
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	48 2f       	mov	r20, r24
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 2e       	mov	r0, r18
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <MDIO_Errorstate_SetPinValue+0x1a0>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <MDIO_Errorstate_SetPinValue+0x19c>
    20f4:	80 95       	com	r24
    20f6:	84 23       	and	r24, r20
    20f8:	8c 93       	st	X, r24
    20fa:	2f c0       	rjmp	.+94     	; 0x215a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					CLR_BIT(PORTC,copy_uint8PinNumber);
    20fc:	a5 e3       	ldi	r26, 0x35	; 53
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e5 e3       	ldi	r30, 0x35	; 53
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	48 2f       	mov	r20, r24
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	02 2e       	mov	r0, r18
    2114:	02 c0       	rjmp	.+4      	; 0x211a <MDIO_Errorstate_SetPinValue+0x1ca>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	0a 94       	dec	r0
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <MDIO_Errorstate_SetPinValue+0x1c6>
    211e:	80 95       	com	r24
    2120:	84 23       	and	r24, r20
    2122:	8c 93       	st	X, r24
    2124:	1a c0       	rjmp	.+52     	; 0x215a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					CLR_BIT(PORTD,copy_uint8PinNumber);
    2126:	a2 e3       	ldi	r26, 0x32	; 50
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e2 e3       	ldi	r30, 0x32	; 50
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	48 2f       	mov	r20, r24
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 2e       	mov	r0, r18
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <MDIO_Errorstate_SetPinValue+0x1f4>
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	0a 94       	dec	r0
    2146:	e2 f7       	brpl	.-8      	; 0x2140 <MDIO_Errorstate_SetPinValue+0x1f0>
    2148:	80 95       	com	r24
    214a:	84 23       	and	r24, r20
    214c:	8c 93       	st	X, r24
    214e:	05 c0       	rjmp	.+10     	; 0x215a <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    2150:	19 82       	std	Y+1, r1	; 0x01
    2152:	03 c0       	rjmp	.+6      	; 0x215a <MDIO_Errorstate_SetPinValue+0x20a>
				}
			}
			else
			{
				loc_Errorstate_Error_state=NOK;
    2154:	19 82       	std	Y+1, r1	; 0x01
    2156:	01 c0       	rjmp	.+2      	; 0x215a <MDIO_Errorstate_SetPinValue+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    2158:	19 82       	std	Y+1, r1	; 0x01
		}
		return loc_Errorstate_Error_state ;
    215a:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    215c:	28 96       	adiw	r28, 0x08	; 8
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <MDIO_Errorstate_GetPinValue>:


/********* get pin value************/
ErrorState MDIO_Errorstate_GetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 *puint8PinValue)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	27 97       	sbiw	r28, 0x07	; 7
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	8a 83       	std	Y+2, r24	; 0x02
    2184:	6b 83       	std	Y+3, r22	; 0x03
    2186:	5d 83       	std	Y+5, r21	; 0x05
    2188:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_uint8PinNumber<8)
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	88 30       	cpi	r24, 0x08	; 8
    2192:	08 f0       	brcs	.+2      	; 0x2196 <MDIO_Errorstate_GetPinValue+0x28>
    2194:	73 c0       	rjmp	.+230    	; 0x227c <MDIO_Errorstate_GetPinValue+0x10e>
	{
		switch(copy_uint8PortID)
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	3f 83       	std	Y+7, r19	; 0x07
    219e:	2e 83       	std	Y+6, r18	; 0x06
    21a0:	4e 81       	ldd	r20, Y+6	; 0x06
    21a2:	5f 81       	ldd	r21, Y+7	; 0x07
    21a4:	41 30       	cpi	r20, 0x01	; 1
    21a6:	51 05       	cpc	r21, r1
    21a8:	59 f1       	breq	.+86     	; 0x2200 <MDIO_Errorstate_GetPinValue+0x92>
    21aa:	8e 81       	ldd	r24, Y+6	; 0x06
    21ac:	9f 81       	ldd	r25, Y+7	; 0x07
    21ae:	82 30       	cpi	r24, 0x02	; 2
    21b0:	91 05       	cpc	r25, r1
    21b2:	34 f4       	brge	.+12     	; 0x21c0 <MDIO_Errorstate_GetPinValue+0x52>
    21b4:	2e 81       	ldd	r18, Y+6	; 0x06
    21b6:	3f 81       	ldd	r19, Y+7	; 0x07
    21b8:	21 15       	cp	r18, r1
    21ba:	31 05       	cpc	r19, r1
    21bc:	69 f0       	breq	.+26     	; 0x21d8 <MDIO_Errorstate_GetPinValue+0x6a>
    21be:	5c c0       	rjmp	.+184    	; 0x2278 <MDIO_Errorstate_GetPinValue+0x10a>
    21c0:	4e 81       	ldd	r20, Y+6	; 0x06
    21c2:	5f 81       	ldd	r21, Y+7	; 0x07
    21c4:	42 30       	cpi	r20, 0x02	; 2
    21c6:	51 05       	cpc	r21, r1
    21c8:	79 f1       	breq	.+94     	; 0x2228 <MDIO_Errorstate_GetPinValue+0xba>
    21ca:	8e 81       	ldd	r24, Y+6	; 0x06
    21cc:	9f 81       	ldd	r25, Y+7	; 0x07
    21ce:	83 30       	cpi	r24, 0x03	; 3
    21d0:	91 05       	cpc	r25, r1
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <MDIO_Errorstate_GetPinValue+0x68>
    21d4:	3d c0       	rjmp	.+122    	; 0x2250 <MDIO_Errorstate_GetPinValue+0xe2>
    21d6:	50 c0       	rjmp	.+160    	; 0x2278 <MDIO_Errorstate_GetPinValue+0x10a>
		{
		case MDIO_PORTA:
			*puint8PinValue= GET_BIT(PINA,copy_uint8PinNumber);
    21d8:	e9 e3       	ldi	r30, 0x39	; 57
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	a9 01       	movw	r20, r18
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <MDIO_Errorstate_GetPinValue+0x82>
    21ec:	55 95       	asr	r21
    21ee:	47 95       	ror	r20
    21f0:	8a 95       	dec	r24
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <MDIO_Errorstate_GetPinValue+0x7e>
    21f4:	ca 01       	movw	r24, r20
    21f6:	81 70       	andi	r24, 0x01	; 1
    21f8:	ec 81       	ldd	r30, Y+4	; 0x04
    21fa:	fd 81       	ldd	r31, Y+5	; 0x05
    21fc:	80 83       	st	Z, r24
    21fe:	3f c0       	rjmp	.+126    	; 0x227e <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTB:
			*puint8PinValue=GET_BIT(PINB,copy_uint8PinNumber);
    2200:	e6 e3       	ldi	r30, 0x36	; 54
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	a9 01       	movw	r20, r18
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <MDIO_Errorstate_GetPinValue+0xaa>
    2214:	55 95       	asr	r21
    2216:	47 95       	ror	r20
    2218:	8a 95       	dec	r24
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <MDIO_Errorstate_GetPinValue+0xa6>
    221c:	ca 01       	movw	r24, r20
    221e:	81 70       	andi	r24, 0x01	; 1
    2220:	ec 81       	ldd	r30, Y+4	; 0x04
    2222:	fd 81       	ldd	r31, Y+5	; 0x05
    2224:	80 83       	st	Z, r24
    2226:	2b c0       	rjmp	.+86     	; 0x227e <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTC:
			*puint8PinValue=GET_BIT(PINC,copy_uint8PinNumber);
    2228:	e3 e3       	ldi	r30, 0x33	; 51
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	88 2f       	mov	r24, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a9 01       	movw	r20, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <MDIO_Errorstate_GetPinValue+0xd2>
    223c:	55 95       	asr	r21
    223e:	47 95       	ror	r20
    2240:	8a 95       	dec	r24
    2242:	e2 f7       	brpl	.-8      	; 0x223c <MDIO_Errorstate_GetPinValue+0xce>
    2244:	ca 01       	movw	r24, r20
    2246:	81 70       	andi	r24, 0x01	; 1
    2248:	ec 81       	ldd	r30, Y+4	; 0x04
    224a:	fd 81       	ldd	r31, Y+5	; 0x05
    224c:	80 83       	st	Z, r24
    224e:	17 c0       	rjmp	.+46     	; 0x227e <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTD:
			*puint8PinValue=GET_BIT(PIND,copy_uint8PinNumber);
    2250:	e0 e3       	ldi	r30, 0x30	; 48
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	88 2f       	mov	r24, r24
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a9 01       	movw	r20, r18
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <MDIO_Errorstate_GetPinValue+0xfa>
    2264:	55 95       	asr	r21
    2266:	47 95       	ror	r20
    2268:	8a 95       	dec	r24
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <MDIO_Errorstate_GetPinValue+0xf6>
    226c:	ca 01       	movw	r24, r20
    226e:	81 70       	andi	r24, 0x01	; 1
    2270:	ec 81       	ldd	r30, Y+4	; 0x04
    2272:	fd 81       	ldd	r31, Y+5	; 0x05
    2274:	80 83       	st	Z, r24
    2276:	03 c0       	rjmp	.+6      	; 0x227e <MDIO_Errorstate_GetPinValue+0x110>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    2278:	19 82       	std	Y+1, r1	; 0x01
    227a:	01 c0       	rjmp	.+2      	; 0x227e <MDIO_Errorstate_GetPinValue+0x110>

		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    227c:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    227e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2280:	27 96       	adiw	r28, 0x07	; 7
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <MDIO_Errorstate_SetPortDirection>:

/********* set port direction & value************/
ErrorState MDIO_Errorstate_SetPortDirection (uint8 copy_uint8PortID , uint8 copy_uint8PortDirection)
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <MDIO_Errorstate_SetPortDirection+0x6>
    2298:	00 d0       	rcall	.+0      	; 0x229a <MDIO_Errorstate_SetPortDirection+0x8>
    229a:	0f 92       	push	r0
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	8a 83       	std	Y+2, r24	; 0x02
    22a2:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	89 83       	std	Y+1, r24	; 0x01

	if((copy_uint8PortDirection== PORT_OUTPUT) ||(copy_uint8PortDirection==PORT_INPUT))
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	8f 3f       	cpi	r24, 0xFF	; 255
    22ac:	19 f0       	breq	.+6      	; 0x22b4 <MDIO_Errorstate_SetPortDirection+0x22>
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	88 23       	and	r24, r24
    22b2:	a9 f5       	brne	.+106    	; 0x231e <MDIO_Errorstate_SetPortDirection+0x8c>
	{
		switch(copy_uint8PortID)
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	3d 83       	std	Y+5, r19	; 0x05
    22bc:	2c 83       	std	Y+4, r18	; 0x04
    22be:	8c 81       	ldd	r24, Y+4	; 0x04
    22c0:	9d 81       	ldd	r25, Y+5	; 0x05
    22c2:	81 30       	cpi	r24, 0x01	; 1
    22c4:	91 05       	cpc	r25, r1
    22c6:	d1 f0       	breq	.+52     	; 0x22fc <MDIO_Errorstate_SetPortDirection+0x6a>
    22c8:	2c 81       	ldd	r18, Y+4	; 0x04
    22ca:	3d 81       	ldd	r19, Y+5	; 0x05
    22cc:	22 30       	cpi	r18, 0x02	; 2
    22ce:	31 05       	cpc	r19, r1
    22d0:	2c f4       	brge	.+10     	; 0x22dc <MDIO_Errorstate_SetPortDirection+0x4a>
    22d2:	8c 81       	ldd	r24, Y+4	; 0x04
    22d4:	9d 81       	ldd	r25, Y+5	; 0x05
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	61 f0       	breq	.+24     	; 0x22f2 <MDIO_Errorstate_SetPortDirection+0x60>
    22da:	1f c0       	rjmp	.+62     	; 0x231a <MDIO_Errorstate_SetPortDirection+0x88>
    22dc:	2c 81       	ldd	r18, Y+4	; 0x04
    22de:	3d 81       	ldd	r19, Y+5	; 0x05
    22e0:	22 30       	cpi	r18, 0x02	; 2
    22e2:	31 05       	cpc	r19, r1
    22e4:	81 f0       	breq	.+32     	; 0x2306 <MDIO_Errorstate_SetPortDirection+0x74>
    22e6:	8c 81       	ldd	r24, Y+4	; 0x04
    22e8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ea:	83 30       	cpi	r24, 0x03	; 3
    22ec:	91 05       	cpc	r25, r1
    22ee:	81 f0       	breq	.+32     	; 0x2310 <MDIO_Errorstate_SetPortDirection+0x7e>
    22f0:	14 c0       	rjmp	.+40     	; 0x231a <MDIO_Errorstate_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortDirection;
    22f2:	ea e3       	ldi	r30, 0x3A	; 58
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	80 83       	st	Z, r24
    22fa:	12 c0       	rjmp	.+36     	; 0x2320 <MDIO_Errorstate_SetPortDirection+0x8e>

			break;
		case MDIO_PORTB:
			DDRB=copy_uint8PortDirection;
    22fc:	e7 e3       	ldi	r30, 0x37	; 55
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	80 83       	st	Z, r24
    2304:	0d c0       	rjmp	.+26     	; 0x2320 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=copy_uint8PortDirection;
    2306:	e4 e3       	ldi	r30, 0x34	; 52
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	80 83       	st	Z, r24
    230e:	08 c0       	rjmp	.+16     	; 0x2320 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=copy_uint8PortDirection;
    2310:	e1 e3       	ldi	r30, 0x31	; 49
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	80 83       	st	Z, r24
    2318:	03 c0       	rjmp	.+6      	; 0x2320 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    231a:	19 82       	std	Y+1, r1	; 0x01
    231c:	01 c0       	rjmp	.+2      	; 0x2320 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    231e:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    2320:	89 81       	ldd	r24, Y+1	; 0x01
}
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <MDIO_Errorstate_SetPortValue>:

/*************** set port value ***********/
ErrorState MDIO_Errorstate_SetPortValue (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	00 d0       	rcall	.+0      	; 0x2338 <MDIO_Errorstate_SetPortValue+0x6>
    2338:	00 d0       	rcall	.+0      	; 0x233a <MDIO_Errorstate_SetPortValue+0x8>
    233a:	0f 92       	push	r0
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	8a 83       	std	Y+2, r24	; 0x02
    2342:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	89 83       	std	Y+1, r24	; 0x01

	if(copy_uint8PortValue<=PORT_HIGH)
	{
		switch(copy_uint8PortID)
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	3d 83       	std	Y+5, r19	; 0x05
    2350:	2c 83       	std	Y+4, r18	; 0x04
    2352:	8c 81       	ldd	r24, Y+4	; 0x04
    2354:	9d 81       	ldd	r25, Y+5	; 0x05
    2356:	81 30       	cpi	r24, 0x01	; 1
    2358:	91 05       	cpc	r25, r1
    235a:	d1 f0       	breq	.+52     	; 0x2390 <MDIO_Errorstate_SetPortValue+0x5e>
    235c:	2c 81       	ldd	r18, Y+4	; 0x04
    235e:	3d 81       	ldd	r19, Y+5	; 0x05
    2360:	22 30       	cpi	r18, 0x02	; 2
    2362:	31 05       	cpc	r19, r1
    2364:	2c f4       	brge	.+10     	; 0x2370 <MDIO_Errorstate_SetPortValue+0x3e>
    2366:	8c 81       	ldd	r24, Y+4	; 0x04
    2368:	9d 81       	ldd	r25, Y+5	; 0x05
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	61 f0       	breq	.+24     	; 0x2386 <MDIO_Errorstate_SetPortValue+0x54>
    236e:	1f c0       	rjmp	.+62     	; 0x23ae <MDIO_Errorstate_SetPortValue+0x7c>
    2370:	2c 81       	ldd	r18, Y+4	; 0x04
    2372:	3d 81       	ldd	r19, Y+5	; 0x05
    2374:	22 30       	cpi	r18, 0x02	; 2
    2376:	31 05       	cpc	r19, r1
    2378:	81 f0       	breq	.+32     	; 0x239a <MDIO_Errorstate_SetPortValue+0x68>
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	9d 81       	ldd	r25, Y+5	; 0x05
    237e:	83 30       	cpi	r24, 0x03	; 3
    2380:	91 05       	cpc	r25, r1
    2382:	81 f0       	breq	.+32     	; 0x23a4 <MDIO_Errorstate_SetPortValue+0x72>
    2384:	14 c0       	rjmp	.+40     	; 0x23ae <MDIO_Errorstate_SetPortValue+0x7c>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortValue;
    2386:	ea e3       	ldi	r30, 0x3A	; 58
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	80 83       	st	Z, r24
    238e:	10 c0       	rjmp	.+32     	; 0x23b0 <MDIO_Errorstate_SetPortValue+0x7e>

			break;
		case MDIO_PORTB:
			PORTB=copy_uint8PortValue;
    2390:	e8 e3       	ldi	r30, 0x38	; 56
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	80 83       	st	Z, r24
    2398:	0b c0       	rjmp	.+22     	; 0x23b0 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTC:
			PORTC=copy_uint8PortValue;
    239a:	e5 e3       	ldi	r30, 0x35	; 53
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	80 83       	st	Z, r24
    23a2:	06 c0       	rjmp	.+12     	; 0x23b0 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTD:
			PORTD=copy_uint8PortValue;
    23a4:	e2 e3       	ldi	r30, 0x32	; 50
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	80 83       	st	Z, r24
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    23ae:	19 82       	std	Y+1, r1	; 0x01
	}
		else
		{
			loc_Errorstate_Error_state=NOK;
		}
		return loc_Errorstate_Error_state;
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
	}
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <MDIO_Errorstate_Set4MostBits>:

ErrorState MDIO_Errorstate_Set4MostBits (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <MDIO_Errorstate_Set4MostBits+0x6>
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <MDIO_Errorstate_Set4MostBits+0x8>
    23ca:	0f 92       	push	r0
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	8a 83       	std	Y+2, r24	; 0x02
    23d2:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState Loc_Errorstate_Error_state = OK;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_uint8PortID)
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	3d 83       	std	Y+5, r19	; 0x05
    23e0:	2c 83       	std	Y+4, r18	; 0x04
    23e2:	8c 81       	ldd	r24, Y+4	; 0x04
    23e4:	9d 81       	ldd	r25, Y+5	; 0x05
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	91 05       	cpc	r25, r1
    23ea:	29 f1       	breq	.+74     	; 0x2436 <MDIO_Errorstate_Set4MostBits+0x74>
    23ec:	2c 81       	ldd	r18, Y+4	; 0x04
    23ee:	3d 81       	ldd	r19, Y+5	; 0x05
    23f0:	22 30       	cpi	r18, 0x02	; 2
    23f2:	31 05       	cpc	r19, r1
    23f4:	2c f4       	brge	.+10     	; 0x2400 <MDIO_Errorstate_Set4MostBits+0x3e>
    23f6:	8c 81       	ldd	r24, Y+4	; 0x04
    23f8:	9d 81       	ldd	r25, Y+5	; 0x05
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	61 f0       	breq	.+24     	; 0x2416 <MDIO_Errorstate_Set4MostBits+0x54>
    23fe:	4b c0       	rjmp	.+150    	; 0x2496 <MDIO_Errorstate_Set4MostBits+0xd4>
    2400:	2c 81       	ldd	r18, Y+4	; 0x04
    2402:	3d 81       	ldd	r19, Y+5	; 0x05
    2404:	22 30       	cpi	r18, 0x02	; 2
    2406:	31 05       	cpc	r19, r1
    2408:	31 f1       	breq	.+76     	; 0x2456 <MDIO_Errorstate_Set4MostBits+0x94>
    240a:	8c 81       	ldd	r24, Y+4	; 0x04
    240c:	9d 81       	ldd	r25, Y+5	; 0x05
    240e:	83 30       	cpi	r24, 0x03	; 3
    2410:	91 05       	cpc	r25, r1
    2412:	89 f1       	breq	.+98     	; 0x2476 <MDIO_Errorstate_Set4MostBits+0xb4>
    2414:	40 c0       	rjmp	.+128    	; 0x2496 <MDIO_Errorstate_Set4MostBits+0xd4>
			{
			case MDIO_PORTA:
				PORTA&=0x0F;
    2416:	ab e3       	ldi	r26, 0x3B	; 59
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	eb e3       	ldi	r30, 0x3B	; 59
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	8f 70       	andi	r24, 0x0F	; 15
    2422:	8c 93       	st	X, r24
				PORTA|=copy_uint8PortValue;
    2424:	ab e3       	ldi	r26, 0x3B	; 59
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	eb e3       	ldi	r30, 0x3B	; 59
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	90 81       	ld	r25, Z
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	89 2b       	or	r24, r25
    2432:	8c 93       	st	X, r24
    2434:	31 c0       	rjmp	.+98     	; 0x2498 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTB:
				PORTB&=0x0F;
    2436:	a8 e3       	ldi	r26, 0x38	; 56
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e8 e3       	ldi	r30, 0x38	; 56
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	8f 70       	andi	r24, 0x0F	; 15
    2442:	8c 93       	st	X, r24
				PORTB|=copy_uint8PortValue;
    2444:	a8 e3       	ldi	r26, 0x38	; 56
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e8 e3       	ldi	r30, 0x38	; 56
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	90 81       	ld	r25, Z
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	89 2b       	or	r24, r25
    2452:	8c 93       	st	X, r24
    2454:	21 c0       	rjmp	.+66     	; 0x2498 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTC:
				PORTC&=0x0F;
    2456:	a5 e3       	ldi	r26, 0x35	; 53
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e5 e3       	ldi	r30, 0x35	; 53
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	8f 70       	andi	r24, 0x0F	; 15
    2462:	8c 93       	st	X, r24
				PORTC|=copy_uint8PortValue;
    2464:	a5 e3       	ldi	r26, 0x35	; 53
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e5 e3       	ldi	r30, 0x35	; 53
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	90 81       	ld	r25, Z
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	89 2b       	or	r24, r25
    2472:	8c 93       	st	X, r24
    2474:	11 c0       	rjmp	.+34     	; 0x2498 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTD:
				PORTD&=0x0F;
    2476:	a2 e3       	ldi	r26, 0x32	; 50
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e2 e3       	ldi	r30, 0x32	; 50
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	8f 70       	andi	r24, 0x0F	; 15
    2482:	8c 93       	st	X, r24
				PORTD|=copy_uint8PortValue;
    2484:	a2 e3       	ldi	r26, 0x32	; 50
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e2 e3       	ldi	r30, 0x32	; 50
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	90 81       	ld	r25, Z
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	89 2b       	or	r24, r25
    2492:	8c 93       	st	X, r24
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			default :
				Loc_Errorstate_Error_state=NOK;
    2496:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
	return Loc_Errorstate_Error_state;
    2498:	89 81       	ldd	r24, Y+1	; 0x01
}
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <MADC_VidSingleConversion_Init>:
#include"MADC_Config.h"

void (*MADC_CALLBACK)(void);

void MADC_VidSingleConversion_Init(void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	/* 1-Select Reference Volt*/
#if MADC_SET_REFERENCVOLT == MADC_Vref_AVCC
	SET_BIT(ADMUX,6);
    24b2:	a7 e2       	ldi	r26, 0x27	; 39
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e7 e2       	ldi	r30, 0x27	; 39
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	80 64       	ori	r24, 0x40	; 64
    24be:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    24c0:	a7 e2       	ldi	r26, 0x27	; 39
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e7 e2       	ldi	r30, 0x27	; 39
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	8f 77       	andi	r24, 0x7F	; 127
    24cc:	8c 93       	st	X, r24
#else
#error"Reference Volt Option Is Not Valid.."
#endif
	/*  2-Select Left Or Right Adjustment Result*/
#if MADC_SET_ADJUSTRESULT==MADC_RIGHT_ADJUST
	SET_BIT(ADMUX,5);
    24ce:	a7 e2       	ldi	r26, 0x27	; 39
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e7 e2       	ldi	r30, 0x27	; 39
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	80 62       	ori	r24, 0x20	; 32
    24da:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,5);
#else
	#error"Adjustment Result Is Not Valid.. "
#endif
	/*  3-Select ADC PreScaler*/
	ADCSRA&=0xF8;
    24dc:	a6 e2       	ldi	r26, 0x26	; 38
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e6 e2       	ldi	r30, 0x26	; 38
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	88 7f       	andi	r24, 0xF8	; 248
    24e8:	8c 93       	st	X, r24
	ADCSRA|=ADC_SET_PRESCALER;
    24ea:	a6 e2       	ldi	r26, 0x26	; 38
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e6 e2       	ldi	r30, 0x26	; 38
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	87 60       	ori	r24, 0x07	; 7
    24f6:	8c 93       	st	X, r24
	 /* 4-Enable ADC peripheral*/
	SET_BIT(ADCSRA,7);
    24f8:	a6 e2       	ldi	r26, 0x26	; 38
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e6 e2       	ldi	r30, 0x26	; 38
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	80 68       	ori	r24, 0x80	; 128
    2504:	8c 93       	st	X, r24
}
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <MADC_VidAutoTrigger_Init>:

void MADC_VidAutoTrigger_Init(void)
{
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
	/*1-Auto trigger Enable*/
	SET_BIT(ADCSRA,5);
    2514:	a6 e2       	ldi	r26, 0x26	; 38
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e6 e2       	ldi	r30, 0x26	; 38
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	80 62       	ori	r24, 0x20	; 32
    2520:	8c 93       	st	X, r24
	 /*2-ADC_Auto_Trigger_Source*/
#if MADC_SET_AUTO_TRIGGER_SOURCE ==MADC_FREERUNNING

	 SFIOR&=0x1F;
    2522:	a0 e5       	ldi	r26, 0x50	; 80
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e0 e5       	ldi	r30, 0x50	; 80
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8f 71       	andi	r24, 0x1F	; 31
    252e:	8c 93       	st	X, r24
	SFIOR|=MADC_FREERUNNING;
    2530:	a0 e5       	ldi	r26, 0x50	; 80
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e0 e5       	ldi	r30, 0x50	; 80
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	8c 93       	st	X, r24
#else
#error "Auto Trigger Source Is Not Valid.."
#endif
}
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <MADC_VidInterrupt_Enable>:

void MADC_VidInterrupt_Enable(void)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
 /* 1-Set ADC Interrupt Enable */
	SET_BIT(ADCSRA,3);
    254a:	a6 e2       	ldi	r26, 0x26	; 38
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e6 e2       	ldi	r30, 0x26	; 38
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	88 60       	ori	r24, 0x08	; 8
    2556:	8c 93       	st	X, r24
}
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <MADC_VidADCStartSingleConversion>:

void MADC_VidADCStartSingleConversion(uint8 copy_uint8Channel)
{
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	0f 92       	push	r0
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	89 83       	std	Y+1, r24	; 0x01
	/*1-Select Analog Channels
	 * single Ended or Differential */
#if MADC_SET_ANALOGCHANNEL ==  MADC_SINGLEENDED_CHANNEL
	ADMUX&=0xE0;
    256a:	a7 e2       	ldi	r26, 0x27	; 39
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e7 e2       	ldi	r30, 0x27	; 39
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	80 7e       	andi	r24, 0xE0	; 224
    2576:	8c 93       	st	X, r24
	ADMUX|=copy_uint8Channel;
    2578:	a7 e2       	ldi	r26, 0x27	; 39
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e7 e2       	ldi	r30, 0x27	; 39
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	90 81       	ld	r25, Z
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	89 2b       	or	r24, r25
    2586:	8c 93       	st	X, r24
#else
#error "Analog Channel Is Not Valid.."
#endif
	/* 2-Start Conversion*/
	SET_BIT(ADCSRA,6);
    2588:	a6 e2       	ldi	r26, 0x26	; 38
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e6 e2       	ldi	r30, 0x26	; 38
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	80 64       	ori	r24, 0x40	; 64
    2594:	8c 93       	st	X, r24
	/*wait until flag is set to 1*/
	while(GET_BIT(ADCSRA,4)==0);
    2596:	e6 e2       	ldi	r30, 0x26	; 38
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	82 95       	swap	r24
    259e:	8f 70       	andi	r24, 0x0F	; 15
    25a0:	88 2f       	mov	r24, r24
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	81 70       	andi	r24, 0x01	; 1
    25a6:	90 70       	andi	r25, 0x00	; 0
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	a9 f3       	breq	.-22     	; 0x2596 <MADC_VidADCStartSingleConversion+0x38>

}
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <MADC_VidADCStartSingleConversion_With_Interrupt>:
void MADC_VidADCStartSingleConversion_With_Interrupt(uint8 copy_uint8Channel)
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	0f 92       	push	r0
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	89 83       	std	Y+1, r24	; 0x01
#if MADC_SET_ANALOGCHANNEL == MADC_SINGLEENDED_CHANNEL
	ADMUX&=0xE0;
    25c0:	a7 e2       	ldi	r26, 0x27	; 39
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e7 e2       	ldi	r30, 0x27	; 39
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	80 7e       	andi	r24, 0xE0	; 224
    25cc:	8c 93       	st	X, r24
	ADMUX|=copy_uint8Channel;
    25ce:	a7 e2       	ldi	r26, 0x27	; 39
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e7 e2       	ldi	r30, 0x27	; 39
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	90 81       	ld	r25, Z
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	89 2b       	or	r24, r25
    25dc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,6);
    25de:	a6 e2       	ldi	r26, 0x26	; 38
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e6 e2       	ldi	r30, 0x26	; 38
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	80 64       	ori	r24, 0x40	; 64
    25ea:	8c 93       	st	X, r24
#else
	#error "Analog Channel Is Not Valid .."
#endif
}
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <MADC_uint16Read>:

uint16 MADC_uint16Read(void)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <MADC_uint16Read+0x6>
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
	uint16 ADC;
	/*1- right adjust*/
#if MADC_SET_ADJUSTRESULT==MADC_RIGHT_ADJUST

	ADC=ADCH;
    25fe:	e5 e2       	ldi	r30, 0x25	; 37
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	91 81       	ldd	r25, Z+1	; 0x01
    2606:	9a 83       	std	Y+2, r25	; 0x02
    2608:	89 83       	std	Y+1, r24	; 0x01
	ADC|=ADCL<<8;
    260a:	e4 e2       	ldi	r30, 0x24	; 36
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	38 2f       	mov	r19, r24
    2614:	22 27       	eor	r18, r18
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	82 2b       	or	r24, r18
    261c:	93 2b       	or	r25, r19
    261e:	9a 83       	std	Y+2, r25	; 0x02
    2620:	89 83       	std	Y+1, r24	; 0x01
	return ADC;
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02

 #else
	#error"Analog Channel Is Not Valid .."
#endif
	//return ADC;
}
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	08 95       	ret

00002630 <MADC_SetCallBack>:
void MADC_SetCallBack(void(*PtrToFun)(void))
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	00 d0       	rcall	.+0      	; 0x2636 <MADC_SetCallBack+0x6>
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	89 83       	std	Y+1, r24	; 0x01
	MADC_CALLBACK=PtrToFun;
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	90 93 96 00 	sts	0x0096, r25
    2646:	80 93 95 00 	sts	0x0095, r24
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <__vector_16>:
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)  	{
    2654:	1f 92       	push	r1
    2656:	0f 92       	push	r0
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	0f 92       	push	r0
    265c:	11 24       	eor	r1, r1
    265e:	2f 93       	push	r18
    2660:	3f 93       	push	r19
    2662:	4f 93       	push	r20
    2664:	5f 93       	push	r21
    2666:	6f 93       	push	r22
    2668:	7f 93       	push	r23
    266a:	8f 93       	push	r24
    266c:	9f 93       	push	r25
    266e:	af 93       	push	r26
    2670:	bf 93       	push	r27
    2672:	ef 93       	push	r30
    2674:	ff 93       	push	r31
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
	MADC_CALLBACK();
    267e:	e0 91 95 00 	lds	r30, 0x0095
    2682:	f0 91 96 00 	lds	r31, 0x0096
    2686:	09 95       	icall
}
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	ff 91       	pop	r31
    268e:	ef 91       	pop	r30
    2690:	bf 91       	pop	r27
    2692:	af 91       	pop	r26
    2694:	9f 91       	pop	r25
    2696:	8f 91       	pop	r24
    2698:	7f 91       	pop	r23
    269a:	6f 91       	pop	r22
    269c:	5f 91       	pop	r21
    269e:	4f 91       	pop	r20
    26a0:	3f 91       	pop	r19
    26a2:	2f 91       	pop	r18
    26a4:	0f 90       	pop	r0
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	0f 90       	pop	r0
    26aa:	1f 90       	pop	r1
    26ac:	18 95       	reti

000026ae <HStepper_Init>:
#include "../HSTEPPER/HStepper_Config.h"
#include "../HSTEPPER/HStepper_Interface.h"
#define F_CPU 16000000UL
#include<util/delay.h>
void HStepper_Init(void)
{
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL1,PIN_OUTPUT);
    26b6:	82 e0       	ldi	r24, 0x02	; 2
    26b8:	63 e0       	ldi	r22, 0x03	; 3
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL2,PIN_OUTPUT);
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	64 e0       	ldi	r22, 0x04	; 4
    26c4:	41 e0       	ldi	r20, 0x01	; 1
    26c6:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL3,PIN_OUTPUT);
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	65 e0       	ldi	r22, 0x05	; 5
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL4,PIN_OUTPUT);
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    26d6:	66 e0       	ldi	r22, 0x06	; 6
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
}
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <HStepper_SetStepsDirection>:
void HStepper_SetStepsDirection(uint16 copy_uint16Steps,uint8 copy_uint8Direction)
{
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	c9 57       	subi	r28, 0x79	; 121
    26f2:	d0 40       	sbci	r29, 0x00	; 0
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	fe 01       	movw	r30, r28
    2700:	eb 58       	subi	r30, 0x8B	; 139
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24
    2708:	fe 01       	movw	r30, r28
    270a:	e9 58       	subi	r30, 0x89	; 137
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	60 83       	st	Z, r22
	switch(copy_uint8Direction)
    2710:	fe 01       	movw	r30, r28
    2712:	e9 58       	subi	r30, 0x89	; 137
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	ea 96       	adiw	r28, 0x3a	; 58
    271e:	3f af       	std	Y+63, r19	; 0x3f
    2720:	2e af       	std	Y+62, r18	; 0x3e
    2722:	ea 97       	sbiw	r28, 0x3a	; 58
    2724:	ea 96       	adiw	r28, 0x3a	; 58
    2726:	8e ad       	ldd	r24, Y+62	; 0x3e
    2728:	9f ad       	ldd	r25, Y+63	; 0x3f
    272a:	ea 97       	sbiw	r28, 0x3a	; 58
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	49 f0       	breq	.+18     	; 0x2742 <HStepper_SetStepsDirection+0x5e>
    2730:	ea 96       	adiw	r28, 0x3a	; 58
    2732:	ee ad       	ldd	r30, Y+62	; 0x3e
    2734:	ff ad       	ldd	r31, Y+63	; 0x3f
    2736:	ea 97       	sbiw	r28, 0x3a	; 58
    2738:	e1 30       	cpi	r30, 0x01	; 1
    273a:	f1 05       	cpc	r31, r1
    273c:	09 f4       	brne	.+2      	; 0x2740 <HStepper_SetStepsDirection+0x5c>
    273e:	10 c3       	rjmp	.+1568   	; 0x2d60 <HStepper_SetStepsDirection+0x67c>
    2740:	47 c5       	rjmp	.+2702   	; 0x31d0 <HStepper_SetStepsDirection+0xaec>
		{
	                         /*clock wise */
		     case CW:
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2742:	fe 01       	movw	r30, r28
    2744:	ed 58       	subi	r30, 0x8D	; 141
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	11 82       	std	Z+1, r1	; 0x01
    274a:	10 82       	st	Z, r1
    274c:	f9 c2       	rjmp	.+1522   	; 0x2d40 <HStepper_SetStepsDirection+0x65c>
					{
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_LOW);
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	63 e0       	ldi	r22, 0x03	; 3
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	64 e0       	ldi	r22, 0x04	; 4
    275c:	41 e0       	ldi	r20, 0x01	; 1
    275e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2762:	82 e0       	ldi	r24, 0x02	; 2
    2764:	65 e0       	ldi	r22, 0x05	; 5
    2766:	41 e0       	ldi	r20, 0x01	; 1
    2768:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	66 e0       	ldi	r22, 0x06	; 6
    2770:	41 e0       	ldi	r20, 0x01	; 1
    2772:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    2776:	fe 01       	movw	r30, r28
    2778:	e3 59       	subi	r30, 0x93	; 147
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a0 ee       	ldi	r26, 0xE0	; 224
    2782:	b0 e4       	ldi	r27, 0x40	; 64
    2784:	80 83       	st	Z, r24
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	a2 83       	std	Z+2, r26	; 0x02
    278a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278c:	8e 01       	movw	r16, r28
    278e:	07 59       	subi	r16, 0x97	; 151
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	fe 01       	movw	r30, r28
    2794:	e3 59       	subi	r30, 0x93	; 147
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	60 81       	ld	r22, Z
    279a:	71 81       	ldd	r23, Z+1	; 0x01
    279c:	82 81       	ldd	r24, Z+2	; 0x02
    279e:	93 81       	ldd	r25, Z+3	; 0x03
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a e7       	ldi	r20, 0x7A	; 122
    27a6:	55 e4       	ldi	r21, 0x45	; 69
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	f8 01       	movw	r30, r16
    27b2:	80 83       	st	Z, r24
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	a2 83       	std	Z+2, r26	; 0x02
    27b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ba:	fe 01       	movw	r30, r28
    27bc:	e7 59       	subi	r30, 0x97	; 151
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	60 81       	ld	r22, Z
    27c2:	71 81       	ldd	r23, Z+1	; 0x01
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e8       	ldi	r20, 0x80	; 128
    27ce:	5f e3       	ldi	r21, 0x3F	; 63
    27d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d4:	88 23       	and	r24, r24
    27d6:	44 f4       	brge	.+16     	; 0x27e8 <HStepper_SetStepsDirection+0x104>
		__ticks = 1;
    27d8:	fe 01       	movw	r30, r28
    27da:	e9 59       	subi	r30, 0x99	; 153
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	91 83       	std	Z+1, r25	; 0x01
    27e4:	80 83       	st	Z, r24
    27e6:	64 c0       	rjmp	.+200    	; 0x28b0 <HStepper_SetStepsDirection+0x1cc>
	else if (__tmp > 65535)
    27e8:	fe 01       	movw	r30, r28
    27ea:	e7 59       	subi	r30, 0x97	; 151
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	3f ef       	ldi	r19, 0xFF	; 255
    27fa:	4f e7       	ldi	r20, 0x7F	; 127
    27fc:	57 e4       	ldi	r21, 0x47	; 71
    27fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2802:	18 16       	cp	r1, r24
    2804:	0c f0       	brlt	.+2      	; 0x2808 <HStepper_SetStepsDirection+0x124>
    2806:	43 c0       	rjmp	.+134    	; 0x288e <HStepper_SetStepsDirection+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2808:	fe 01       	movw	r30, r28
    280a:	e3 59       	subi	r30, 0x93	; 147
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	60 81       	ld	r22, Z
    2810:	71 81       	ldd	r23, Z+1	; 0x01
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e2       	ldi	r20, 0x20	; 32
    281c:	51 e4       	ldi	r21, 0x41	; 65
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	8e 01       	movw	r16, r28
    2828:	09 59       	subi	r16, 0x99	; 153
    282a:	1f 4f       	sbci	r17, 0xFF	; 255
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	f8 01       	movw	r30, r16
    283a:	91 83       	std	Z+1, r25	; 0x01
    283c:	80 83       	st	Z, r24
    283e:	1f c0       	rjmp	.+62     	; 0x287e <HStepper_SetStepsDirection+0x19a>
    2840:	fe 01       	movw	r30, r28
    2842:	eb 59       	subi	r30, 0x9B	; 155
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 e9       	ldi	r24, 0x90	; 144
    2848:	91 e0       	ldi	r25, 0x01	; 1
    284a:	91 83       	std	Z+1, r25	; 0x01
    284c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    284e:	fe 01       	movw	r30, r28
    2850:	eb 59       	subi	r30, 0x9B	; 155
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 81       	ld	r24, Z
    2856:	91 81       	ldd	r25, Z+1	; 0x01
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <HStepper_SetStepsDirection+0x174>
    285c:	fe 01       	movw	r30, r28
    285e:	eb 59       	subi	r30, 0x9B	; 155
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2866:	de 01       	movw	r26, r28
    2868:	a9 59       	subi	r26, 0x99	; 153
    286a:	bf 4f       	sbci	r27, 0xFF	; 255
    286c:	fe 01       	movw	r30, r28
    286e:	e9 59       	subi	r30, 0x99	; 153
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	11 96       	adiw	r26, 0x01	; 1
    287a:	9c 93       	st	X, r25
    287c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287e:	fe 01       	movw	r30, r28
    2880:	e9 59       	subi	r30, 0x99	; 153
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	80 81       	ld	r24, Z
    2886:	91 81       	ldd	r25, Z+1	; 0x01
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	d1 f6       	brne	.-76     	; 0x2840 <HStepper_SetStepsDirection+0x15c>
    288c:	27 c0       	rjmp	.+78     	; 0x28dc <HStepper_SetStepsDirection+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288e:	8e 01       	movw	r16, r28
    2890:	09 59       	subi	r16, 0x99	; 153
    2892:	1f 4f       	sbci	r17, 0xFF	; 255
    2894:	fe 01       	movw	r30, r28
    2896:	e7 59       	subi	r30, 0x97	; 151
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	60 81       	ld	r22, Z
    289c:	71 81       	ldd	r23, Z+1	; 0x01
    289e:	82 81       	ldd	r24, Z+2	; 0x02
    28a0:	93 81       	ldd	r25, Z+3	; 0x03
    28a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	f8 01       	movw	r30, r16
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
    28b0:	de 01       	movw	r26, r28
    28b2:	ad 59       	subi	r26, 0x9D	; 157
    28b4:	bf 4f       	sbci	r27, 0xFF	; 255
    28b6:	fe 01       	movw	r30, r28
    28b8:	e9 59       	subi	r30, 0x99	; 153
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	8d 93       	st	X+, r24
    28c2:	9c 93       	st	X, r25
    28c4:	fe 01       	movw	r30, r28
    28c6:	ed 59       	subi	r30, 0x9D	; 157
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	80 81       	ld	r24, Z
    28cc:	91 81       	ldd	r25, Z+1	; 0x01
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <HStepper_SetStepsDirection+0x1ea>
    28d2:	fe 01       	movw	r30, r28
    28d4:	ed 59       	subi	r30, 0x9D	; 157
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	63 e0       	ldi	r22, 0x03	; 3
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_LOW);
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	64 e0       	ldi	r22, 0x04	; 4
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    28f0:	82 e0       	ldi	r24, 0x02	; 2
    28f2:	65 e0       	ldi	r22, 0x05	; 5
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    28fa:	82 e0       	ldi	r24, 0x02	; 2
    28fc:	66 e0       	ldi	r22, 0x06	; 6
    28fe:	41 e0       	ldi	r20, 0x01	; 1
    2900:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    2904:	fe 01       	movw	r30, r28
    2906:	e1 5a       	subi	r30, 0xA1	; 161
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 ee       	ldi	r26, 0xE0	; 224
    2910:	b0 e4       	ldi	r27, 0x40	; 64
    2912:	80 83       	st	Z, r24
    2914:	91 83       	std	Z+1, r25	; 0x01
    2916:	a2 83       	std	Z+2, r26	; 0x02
    2918:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291a:	8e 01       	movw	r16, r28
    291c:	05 5a       	subi	r16, 0xA5	; 165
    291e:	1f 4f       	sbci	r17, 0xFF	; 255
    2920:	fe 01       	movw	r30, r28
    2922:	e1 5a       	subi	r30, 0xA1	; 161
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	60 81       	ld	r22, Z
    2928:	71 81       	ldd	r23, Z+1	; 0x01
    292a:	82 81       	ldd	r24, Z+2	; 0x02
    292c:	93 81       	ldd	r25, Z+3	; 0x03
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	4a e7       	ldi	r20, 0x7A	; 122
    2934:	55 e4       	ldi	r21, 0x45	; 69
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	f8 01       	movw	r30, r16
    2940:	80 83       	st	Z, r24
    2942:	91 83       	std	Z+1, r25	; 0x01
    2944:	a2 83       	std	Z+2, r26	; 0x02
    2946:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2948:	fe 01       	movw	r30, r28
    294a:	e5 5a       	subi	r30, 0xA5	; 165
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	60 81       	ld	r22, Z
    2950:	71 81       	ldd	r23, Z+1	; 0x01
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	93 81       	ldd	r25, Z+3	; 0x03
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e8       	ldi	r20, 0x80	; 128
    295c:	5f e3       	ldi	r21, 0x3F	; 63
    295e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2962:	88 23       	and	r24, r24
    2964:	44 f4       	brge	.+16     	; 0x2976 <HStepper_SetStepsDirection+0x292>
		__ticks = 1;
    2966:	fe 01       	movw	r30, r28
    2968:	e7 5a       	subi	r30, 0xA7	; 167
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	91 83       	std	Z+1, r25	; 0x01
    2972:	80 83       	st	Z, r24
    2974:	64 c0       	rjmp	.+200    	; 0x2a3e <HStepper_SetStepsDirection+0x35a>
	else if (__tmp > 65535)
    2976:	fe 01       	movw	r30, r28
    2978:	e5 5a       	subi	r30, 0xA5	; 165
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	4f e7       	ldi	r20, 0x7F	; 127
    298a:	57 e4       	ldi	r21, 0x47	; 71
    298c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2990:	18 16       	cp	r1, r24
    2992:	0c f0       	brlt	.+2      	; 0x2996 <HStepper_SetStepsDirection+0x2b2>
    2994:	43 c0       	rjmp	.+134    	; 0x2a1c <HStepper_SetStepsDirection+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2996:	fe 01       	movw	r30, r28
    2998:	e1 5a       	subi	r30, 0xA1	; 161
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e2       	ldi	r20, 0x20	; 32
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	8e 01       	movw	r16, r28
    29b6:	07 5a       	subi	r16, 0xA7	; 167
    29b8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	f8 01       	movw	r30, r16
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
    29cc:	1f c0       	rjmp	.+62     	; 0x2a0c <HStepper_SetStepsDirection+0x328>
    29ce:	fe 01       	movw	r30, r28
    29d0:	e9 5a       	subi	r30, 0xA9	; 169
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 e9       	ldi	r24, 0x90	; 144
    29d6:	91 e0       	ldi	r25, 0x01	; 1
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
    29dc:	fe 01       	movw	r30, r28
    29de:	e9 5a       	subi	r30, 0xA9	; 169
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	80 81       	ld	r24, Z
    29e4:	91 81       	ldd	r25, Z+1	; 0x01
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <HStepper_SetStepsDirection+0x302>
    29ea:	fe 01       	movw	r30, r28
    29ec:	e9 5a       	subi	r30, 0xA9	; 169
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	de 01       	movw	r26, r28
    29f6:	a7 5a       	subi	r26, 0xA7	; 167
    29f8:	bf 4f       	sbci	r27, 0xFF	; 255
    29fa:	fe 01       	movw	r30, r28
    29fc:	e7 5a       	subi	r30, 0xA7	; 167
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 81       	ld	r24, Z
    2a02:	91 81       	ldd	r25, Z+1	; 0x01
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	11 96       	adiw	r26, 0x01	; 1
    2a08:	9c 93       	st	X, r25
    2a0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e7 5a       	subi	r30, 0xA7	; 167
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	91 81       	ldd	r25, Z+1	; 0x01
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	d1 f6       	brne	.-76     	; 0x29ce <HStepper_SetStepsDirection+0x2ea>
    2a1a:	27 c0       	rjmp	.+78     	; 0x2a6a <HStepper_SetStepsDirection+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1c:	8e 01       	movw	r16, r28
    2a1e:	07 5a       	subi	r16, 0xA7	; 167
    2a20:	1f 4f       	sbci	r17, 0xFF	; 255
    2a22:	fe 01       	movw	r30, r28
    2a24:	e5 5a       	subi	r30, 0xA5	; 165
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	60 81       	ld	r22, Z
    2a2a:	71 81       	ldd	r23, Z+1	; 0x01
    2a2c:	82 81       	ldd	r24, Z+2	; 0x02
    2a2e:	93 81       	ldd	r25, Z+3	; 0x03
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	f8 01       	movw	r30, r16
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	80 83       	st	Z, r24
    2a3e:	de 01       	movw	r26, r28
    2a40:	ab 5a       	subi	r26, 0xAB	; 171
    2a42:	bf 4f       	sbci	r27, 0xFF	; 255
    2a44:	fe 01       	movw	r30, r28
    2a46:	e7 5a       	subi	r30, 0xA7	; 167
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	91 81       	ldd	r25, Z+1	; 0x01
    2a4e:	8d 93       	st	X+, r24
    2a50:	9c 93       	st	X, r25
    2a52:	fe 01       	movw	r30, r28
    2a54:	eb 5a       	subi	r30, 0xAB	; 171
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <HStepper_SetStepsDirection+0x378>
    2a60:	fe 01       	movw	r30, r28
    2a62:	eb 5a       	subi	r30, 0xAB	; 171
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	63 e0       	ldi	r22, 0x03	; 3
    2a6e:	41 e0       	ldi	r20, 0x01	; 1
    2a70:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	64 e0       	ldi	r22, 0x04	; 4
    2a78:	41 e0       	ldi	r20, 0x01	; 1
    2a7a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_LOW);
    2a7e:	82 e0       	ldi	r24, 0x02	; 2
    2a80:	65 e0       	ldi	r22, 0x05	; 5
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2a88:	82 e0       	ldi	r24, 0x02	; 2
    2a8a:	66 e0       	ldi	r22, 0x06	; 6
    2a8c:	41 e0       	ldi	r20, 0x01	; 1
    2a8e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    2a92:	fe 01       	movw	r30, r28
    2a94:	ef 5a       	subi	r30, 0xAF	; 175
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	a0 ee       	ldi	r26, 0xE0	; 224
    2a9e:	b0 e4       	ldi	r27, 0x40	; 64
    2aa0:	80 83       	st	Z, r24
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	a2 83       	std	Z+2, r26	; 0x02
    2aa6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa8:	8e 01       	movw	r16, r28
    2aaa:	03 5b       	subi	r16, 0xB3	; 179
    2aac:	1f 4f       	sbci	r17, 0xFF	; 255
    2aae:	fe 01       	movw	r30, r28
    2ab0:	ef 5a       	subi	r30, 0xAF	; 175
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	60 81       	ld	r22, Z
    2ab6:	71 81       	ldd	r23, Z+1	; 0x01
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	93 81       	ldd	r25, Z+3	; 0x03
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	4a e7       	ldi	r20, 0x7A	; 122
    2ac2:	55 e4       	ldi	r21, 0x45	; 69
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	f8 01       	movw	r30, r16
    2ace:	80 83       	st	Z, r24
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	a2 83       	std	Z+2, r26	; 0x02
    2ad4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e3 5b       	subi	r30, 0xB3	; 179
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	60 81       	ld	r22, Z
    2ade:	71 81       	ldd	r23, Z+1	; 0x01
    2ae0:	82 81       	ldd	r24, Z+2	; 0x02
    2ae2:	93 81       	ldd	r25, Z+3	; 0x03
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e8       	ldi	r20, 0x80	; 128
    2aea:	5f e3       	ldi	r21, 0x3F	; 63
    2aec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af0:	88 23       	and	r24, r24
    2af2:	44 f4       	brge	.+16     	; 0x2b04 <HStepper_SetStepsDirection+0x420>
		__ticks = 1;
    2af4:	fe 01       	movw	r30, r28
    2af6:	e5 5b       	subi	r30, 0xB5	; 181
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	80 83       	st	Z, r24
    2b02:	64 c0       	rjmp	.+200    	; 0x2bcc <HStepper_SetStepsDirection+0x4e8>
	else if (__tmp > 65535)
    2b04:	fe 01       	movw	r30, r28
    2b06:	e3 5b       	subi	r30, 0xB3	; 179
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	60 81       	ld	r22, Z
    2b0c:	71 81       	ldd	r23, Z+1	; 0x01
    2b0e:	82 81       	ldd	r24, Z+2	; 0x02
    2b10:	93 81       	ldd	r25, Z+3	; 0x03
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	3f ef       	ldi	r19, 0xFF	; 255
    2b16:	4f e7       	ldi	r20, 0x7F	; 127
    2b18:	57 e4       	ldi	r21, 0x47	; 71
    2b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b1e:	18 16       	cp	r1, r24
    2b20:	0c f0       	brlt	.+2      	; 0x2b24 <HStepper_SetStepsDirection+0x440>
    2b22:	43 c0       	rjmp	.+134    	; 0x2baa <HStepper_SetStepsDirection+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b24:	fe 01       	movw	r30, r28
    2b26:	ef 5a       	subi	r30, 0xAF	; 175
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	60 81       	ld	r22, Z
    2b2c:	71 81       	ldd	r23, Z+1	; 0x01
    2b2e:	82 81       	ldd	r24, Z+2	; 0x02
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e2       	ldi	r20, 0x20	; 32
    2b38:	51 e4       	ldi	r21, 0x41	; 65
    2b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	8e 01       	movw	r16, r28
    2b44:	05 5b       	subi	r16, 0xB5	; 181
    2b46:	1f 4f       	sbci	r17, 0xFF	; 255
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	f8 01       	movw	r30, r16
    2b56:	91 83       	std	Z+1, r25	; 0x01
    2b58:	80 83       	st	Z, r24
    2b5a:	1f c0       	rjmp	.+62     	; 0x2b9a <HStepper_SetStepsDirection+0x4b6>
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e7 5b       	subi	r30, 0xB7	; 183
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 e9       	ldi	r24, 0x90	; 144
    2b64:	91 e0       	ldi	r25, 0x01	; 1
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	80 83       	st	Z, r24
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e7 5b       	subi	r30, 0xB7	; 183
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	91 81       	ldd	r25, Z+1	; 0x01
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <HStepper_SetStepsDirection+0x490>
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e7 5b       	subi	r30, 0xB7	; 183
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	91 83       	std	Z+1, r25	; 0x01
    2b80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b82:	de 01       	movw	r26, r28
    2b84:	a5 5b       	subi	r26, 0xB5	; 181
    2b86:	bf 4f       	sbci	r27, 0xFF	; 255
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e5 5b       	subi	r30, 0xB5	; 181
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	80 81       	ld	r24, Z
    2b90:	91 81       	ldd	r25, Z+1	; 0x01
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	11 96       	adiw	r26, 0x01	; 1
    2b96:	9c 93       	st	X, r25
    2b98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	e5 5b       	subi	r30, 0xB5	; 181
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	80 81       	ld	r24, Z
    2ba2:	91 81       	ldd	r25, Z+1	; 0x01
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	d1 f6       	brne	.-76     	; 0x2b5c <HStepper_SetStepsDirection+0x478>
    2ba8:	27 c0       	rjmp	.+78     	; 0x2bf8 <HStepper_SetStepsDirection+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2baa:	8e 01       	movw	r16, r28
    2bac:	05 5b       	subi	r16, 0xB5	; 181
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e3 5b       	subi	r30, 0xB3	; 179
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	60 81       	ld	r22, Z
    2bb8:	71 81       	ldd	r23, Z+1	; 0x01
    2bba:	82 81       	ldd	r24, Z+2	; 0x02
    2bbc:	93 81       	ldd	r25, Z+3	; 0x03
    2bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	f8 01       	movw	r30, r16
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	80 83       	st	Z, r24
    2bcc:	de 01       	movw	r26, r28
    2bce:	a9 5b       	subi	r26, 0xB9	; 185
    2bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e5 5b       	subi	r30, 0xB5	; 181
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	80 81       	ld	r24, Z
    2bda:	91 81       	ldd	r25, Z+1	; 0x01
    2bdc:	8d 93       	st	X+, r24
    2bde:	9c 93       	st	X, r25
    2be0:	fe 01       	movw	r30, r28
    2be2:	e9 5b       	subi	r30, 0xB9	; 185
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	80 81       	ld	r24, Z
    2be8:	91 81       	ldd	r25, Z+1	; 0x01
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <HStepper_SetStepsDirection+0x506>
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e9 5b       	subi	r30, 0xB9	; 185
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	91 83       	std	Z+1, r25	; 0x01
    2bf6:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2bf8:	82 e0       	ldi	r24, 0x02	; 2
    2bfa:	63 e0       	ldi	r22, 0x03	; 3
    2bfc:	41 e0       	ldi	r20, 0x01	; 1
    2bfe:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	64 e0       	ldi	r22, 0x04	; 4
    2c06:	41 e0       	ldi	r20, 0x01	; 1
    2c08:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2c0c:	82 e0       	ldi	r24, 0x02	; 2
    2c0e:	65 e0       	ldi	r22, 0x05	; 5
    2c10:	41 e0       	ldi	r20, 0x01	; 1
    2c12:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_LOW);
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	66 e0       	ldi	r22, 0x06	; 6
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    2c20:	fe 01       	movw	r30, r28
    2c22:	ed 5b       	subi	r30, 0xBD	; 189
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a0 ee       	ldi	r26, 0xE0	; 224
    2c2c:	b0 e4       	ldi	r27, 0x40	; 64
    2c2e:	80 83       	st	Z, r24
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	a2 83       	std	Z+2, r26	; 0x02
    2c34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c36:	8e 01       	movw	r16, r28
    2c38:	01 5c       	subi	r16, 0xC1	; 193
    2c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	ed 5b       	subi	r30, 0xBD	; 189
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	60 81       	ld	r22, Z
    2c44:	71 81       	ldd	r23, Z+1	; 0x01
    2c46:	82 81       	ldd	r24, Z+2	; 0x02
    2c48:	93 81       	ldd	r25, Z+3	; 0x03
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	4a e7       	ldi	r20, 0x7A	; 122
    2c50:	55 e4       	ldi	r21, 0x45	; 69
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	f8 01       	movw	r30, r16
    2c5c:	80 83       	st	Z, r24
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	a2 83       	std	Z+2, r26	; 0x02
    2c62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c64:	fe 01       	movw	r30, r28
    2c66:	ff 96       	adiw	r30, 0x3f	; 63
    2c68:	60 81       	ld	r22, Z
    2c6a:	71 81       	ldd	r23, Z+1	; 0x01
    2c6c:	82 81       	ldd	r24, Z+2	; 0x02
    2c6e:	93 81       	ldd	r25, Z+3	; 0x03
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e8       	ldi	r20, 0x80	; 128
    2c76:	5f e3       	ldi	r21, 0x3F	; 63
    2c78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c7c:	88 23       	and	r24, r24
    2c7e:	2c f4       	brge	.+10     	; 0x2c8a <HStepper_SetStepsDirection+0x5a6>
		__ticks = 1;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	9e af       	std	Y+62, r25	; 0x3e
    2c86:	8d af       	std	Y+61, r24	; 0x3d
    2c88:	46 c0       	rjmp	.+140    	; 0x2d16 <HStepper_SetStepsDirection+0x632>
	else if (__tmp > 65535)
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ff 96       	adiw	r30, 0x3f	; 63
    2c8e:	60 81       	ld	r22, Z
    2c90:	71 81       	ldd	r23, Z+1	; 0x01
    2c92:	82 81       	ldd	r24, Z+2	; 0x02
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	3f ef       	ldi	r19, 0xFF	; 255
    2c9a:	4f e7       	ldi	r20, 0x7F	; 127
    2c9c:	57 e4       	ldi	r21, 0x47	; 71
    2c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca2:	18 16       	cp	r1, r24
    2ca4:	64 f5       	brge	.+88     	; 0x2cfe <HStepper_SetStepsDirection+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	ed 5b       	subi	r30, 0xBD	; 189
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	51 e4       	ldi	r21, 0x41	; 65
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	9e af       	std	Y+62, r25	; 0x3e
    2cd2:	8d af       	std	Y+61, r24	; 0x3d
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <HStepper_SetStepsDirection+0x610>
    2cd6:	80 e9       	ldi	r24, 0x90	; 144
    2cd8:	91 e0       	ldi	r25, 0x01	; 1
    2cda:	9c af       	std	Y+60, r25	; 0x3c
    2cdc:	8b af       	std	Y+59, r24	; 0x3b
    2cde:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ce0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <HStepper_SetStepsDirection+0x5fe>
    2ce6:	9c af       	std	Y+60, r25	; 0x3c
    2ce8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cea:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cec:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	9e af       	std	Y+62, r25	; 0x3e
    2cf2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cf6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	69 f7       	brne	.-38     	; 0x2cd6 <HStepper_SetStepsDirection+0x5f2>
    2cfc:	16 c0       	rjmp	.+44     	; 0x2d2a <HStepper_SetStepsDirection+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfe:	fe 01       	movw	r30, r28
    2d00:	ff 96       	adiw	r30, 0x3f	; 63
    2d02:	60 81       	ld	r22, Z
    2d04:	71 81       	ldd	r23, Z+1	; 0x01
    2d06:	82 81       	ldd	r24, Z+2	; 0x02
    2d08:	93 81       	ldd	r25, Z+3	; 0x03
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	9e af       	std	Y+62, r25	; 0x3e
    2d14:	8d af       	std	Y+61, r24	; 0x3d
    2d16:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d18:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d1a:	9a af       	std	Y+58, r25	; 0x3a
    2d1c:	89 af       	std	Y+57, r24	; 0x39
    2d1e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d20:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <HStepper_SetStepsDirection+0x63e>
    2d26:	9a af       	std	Y+58, r25	; 0x3a
    2d28:	89 af       	std	Y+57, r24	; 0x39
{
	switch(copy_uint8Direction)
		{
	                         /*clock wise */
		     case CW:
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2d2a:	de 01       	movw	r26, r28
    2d2c:	ad 58       	subi	r26, 0x8D	; 141
    2d2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d30:	fe 01       	movw	r30, r28
    2d32:	ed 58       	subi	r30, 0x8D	; 141
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
    2d38:	91 81       	ldd	r25, Z+1	; 0x01
    2d3a:	01 96       	adiw	r24, 0x01	; 1
    2d3c:	8d 93       	st	X+, r24
    2d3e:	9c 93       	st	X, r25
    2d40:	fe 01       	movw	r30, r28
    2d42:	ed 58       	subi	r30, 0x8D	; 141
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	de 01       	movw	r26, r28
    2d48:	ab 58       	subi	r26, 0x8B	; 139
    2d4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4c:	20 81       	ld	r18, Z
    2d4e:	31 81       	ldd	r19, Z+1	; 0x01
    2d50:	8d 91       	ld	r24, X+
    2d52:	9c 91       	ld	r25, X
    2d54:	11 97       	sbiw	r26, 0x01	; 1
    2d56:	28 17       	cp	r18, r24
    2d58:	39 07       	cpc	r19, r25
    2d5a:	08 f4       	brcc	.+2      	; 0x2d5e <HStepper_SetStepsDirection+0x67a>
    2d5c:	f8 cc       	rjmp	.-1552   	; 0x274e <HStepper_SetStepsDirection+0x6a>
    2d5e:	38 c2       	rjmp	.+1136   	; 0x31d0 <HStepper_SetStepsDirection+0xaec>
					}
			break;

                                        /* counter clock wise*/
		case CCW :
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2d60:	fe 01       	movw	r30, r28
    2d62:	ef 58       	subi	r30, 0x8F	; 143
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	11 82       	std	Z+1, r1	; 0x01
    2d68:	10 82       	st	Z, r1
    2d6a:	23 c2       	rjmp	.+1094   	; 0x31b2 <HStepper_SetStepsDirection+0xace>
			{
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2d6c:	82 e0       	ldi	r24, 0x02	; 2
    2d6e:	63 e0       	ldi	r22, 0x03	; 3
    2d70:	41 e0       	ldi	r20, 0x01	; 1
    2d72:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	64 e0       	ldi	r22, 0x04	; 4
    2d7a:	41 e0       	ldi	r20, 0x01	; 1
    2d7c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2d80:	82 e0       	ldi	r24, 0x02	; 2
    2d82:	65 e0       	ldi	r22, 0x05	; 5
    2d84:	41 e0       	ldi	r20, 0x01	; 1
    2d86:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_LOW);
    2d8a:	82 e0       	ldi	r24, 0x02	; 2
    2d8c:	66 e0       	ldi	r22, 0x06	; 6
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	a0 ee       	ldi	r26, 0xE0	; 224
    2d9a:	b0 e4       	ldi	r27, 0x40	; 64
    2d9c:	8d ab       	std	Y+53, r24	; 0x35
    2d9e:	9e ab       	std	Y+54, r25	; 0x36
    2da0:	af ab       	std	Y+55, r26	; 0x37
    2da2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da4:	6d a9       	ldd	r22, Y+53	; 0x35
    2da6:	7e a9       	ldd	r23, Y+54	; 0x36
    2da8:	8f a9       	ldd	r24, Y+55	; 0x37
    2daa:	98 ad       	ldd	r25, Y+56	; 0x38
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	4a e7       	ldi	r20, 0x7A	; 122
    2db2:	55 e4       	ldi	r21, 0x45	; 69
    2db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	89 ab       	std	Y+49, r24	; 0x31
    2dbe:	9a ab       	std	Y+50, r25	; 0x32
    2dc0:	ab ab       	std	Y+51, r26	; 0x33
    2dc2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dc4:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc6:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc8:	8b a9       	ldd	r24, Y+51	; 0x33
    2dca:	9c a9       	ldd	r25, Y+52	; 0x34
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e8       	ldi	r20, 0x80	; 128
    2dd2:	5f e3       	ldi	r21, 0x3F	; 63
    2dd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd8:	88 23       	and	r24, r24
    2dda:	2c f4       	brge	.+10     	; 0x2de6 <HStepper_SetStepsDirection+0x702>
		__ticks = 1;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	98 ab       	std	Y+48, r25	; 0x30
    2de2:	8f a7       	std	Y+47, r24	; 0x2f
    2de4:	3f c0       	rjmp	.+126    	; 0x2e64 <HStepper_SetStepsDirection+0x780>
	else if (__tmp > 65535)
    2de6:	69 a9       	ldd	r22, Y+49	; 0x31
    2de8:	7a a9       	ldd	r23, Y+50	; 0x32
    2dea:	8b a9       	ldd	r24, Y+51	; 0x33
    2dec:	9c a9       	ldd	r25, Y+52	; 0x34
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	3f ef       	ldi	r19, 0xFF	; 255
    2df2:	4f e7       	ldi	r20, 0x7F	; 127
    2df4:	57 e4       	ldi	r21, 0x47	; 71
    2df6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dfa:	18 16       	cp	r1, r24
    2dfc:	4c f5       	brge	.+82     	; 0x2e50 <HStepper_SetStepsDirection+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfe:	6d a9       	ldd	r22, Y+53	; 0x35
    2e00:	7e a9       	ldd	r23, Y+54	; 0x36
    2e02:	8f a9       	ldd	r24, Y+55	; 0x37
    2e04:	98 ad       	ldd	r25, Y+56	; 0x38
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e2       	ldi	r20, 0x20	; 32
    2e0c:	51 e4       	ldi	r21, 0x41	; 65
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	bc 01       	movw	r22, r24
    2e18:	cd 01       	movw	r24, r26
    2e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	98 ab       	std	Y+48, r25	; 0x30
    2e24:	8f a7       	std	Y+47, r24	; 0x2f
    2e26:	0f c0       	rjmp	.+30     	; 0x2e46 <HStepper_SetStepsDirection+0x762>
    2e28:	80 e9       	ldi	r24, 0x90	; 144
    2e2a:	91 e0       	ldi	r25, 0x01	; 1
    2e2c:	9e a7       	std	Y+46, r25	; 0x2e
    2e2e:	8d a7       	std	Y+45, r24	; 0x2d
    2e30:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e32:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <HStepper_SetStepsDirection+0x750>
    2e38:	9e a7       	std	Y+46, r25	; 0x2e
    2e3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	98 ab       	std	Y+48, r25	; 0x30
    2e44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e48:	98 a9       	ldd	r25, Y+48	; 0x30
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	69 f7       	brne	.-38     	; 0x2e28 <HStepper_SetStepsDirection+0x744>
    2e4e:	14 c0       	rjmp	.+40     	; 0x2e78 <HStepper_SetStepsDirection+0x794>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e50:	69 a9       	ldd	r22, Y+49	; 0x31
    2e52:	7a a9       	ldd	r23, Y+50	; 0x32
    2e54:	8b a9       	ldd	r24, Y+51	; 0x33
    2e56:	9c a9       	ldd	r25, Y+52	; 0x34
    2e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	98 ab       	std	Y+48, r25	; 0x30
    2e62:	8f a7       	std	Y+47, r24	; 0x2f
    2e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e66:	98 a9       	ldd	r25, Y+48	; 0x30
    2e68:	9c a7       	std	Y+44, r25	; 0x2c
    2e6a:	8b a7       	std	Y+43, r24	; 0x2b
    2e6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <HStepper_SetStepsDirection+0x78c>
    2e74:	9c a7       	std	Y+44, r25	; 0x2c
    2e76:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(MAX_SPEED_DELAY);

				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2e78:	82 e0       	ldi	r24, 0x02	; 2
    2e7a:	63 e0       	ldi	r22, 0x03	; 3
    2e7c:	41 e0       	ldi	r20, 0x01	; 1
    2e7e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	64 e0       	ldi	r22, 0x04	; 4
    2e86:	41 e0       	ldi	r20, 0x01	; 1
    2e88:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_LOW);
    2e8c:	82 e0       	ldi	r24, 0x02	; 2
    2e8e:	65 e0       	ldi	r22, 0x05	; 5
    2e90:	40 e0       	ldi	r20, 0x00	; 0
    2e92:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2e96:	82 e0       	ldi	r24, 0x02	; 2
    2e98:	66 e0       	ldi	r22, 0x06	; 6
    2e9a:	41 e0       	ldi	r20, 0x01	; 1
    2e9c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	a0 ee       	ldi	r26, 0xE0	; 224
    2ea6:	b0 e4       	ldi	r27, 0x40	; 64
    2ea8:	8f a3       	std	Y+39, r24	; 0x27
    2eaa:	98 a7       	std	Y+40, r25	; 0x28
    2eac:	a9 a7       	std	Y+41, r26	; 0x29
    2eae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb0:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb2:	78 a5       	ldd	r23, Y+40	; 0x28
    2eb4:	89 a5       	ldd	r24, Y+41	; 0x29
    2eb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	4a e7       	ldi	r20, 0x7A	; 122
    2ebe:	55 e4       	ldi	r21, 0x45	; 69
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	8b a3       	std	Y+35, r24	; 0x23
    2eca:	9c a3       	std	Y+36, r25	; 0x24
    2ecc:	ad a3       	std	Y+37, r26	; 0x25
    2ece:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ed0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ed2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ed4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ed6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e8       	ldi	r20, 0x80	; 128
    2ede:	5f e3       	ldi	r21, 0x3F	; 63
    2ee0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ee4:	88 23       	and	r24, r24
    2ee6:	2c f4       	brge	.+10     	; 0x2ef2 <HStepper_SetStepsDirection+0x80e>
		__ticks = 1;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	9a a3       	std	Y+34, r25	; 0x22
    2eee:	89 a3       	std	Y+33, r24	; 0x21
    2ef0:	3f c0       	rjmp	.+126    	; 0x2f70 <HStepper_SetStepsDirection+0x88c>
	else if (__tmp > 65535)
    2ef2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ef6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ef8:	9e a1       	ldd	r25, Y+38	; 0x26
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	3f ef       	ldi	r19, 0xFF	; 255
    2efe:	4f e7       	ldi	r20, 0x7F	; 127
    2f00:	57 e4       	ldi	r21, 0x47	; 71
    2f02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f06:	18 16       	cp	r1, r24
    2f08:	4c f5       	brge	.+82     	; 0x2f5c <HStepper_SetStepsDirection+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f0a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f0c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f0e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f10:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e2       	ldi	r20, 0x20	; 32
    2f18:	51 e4       	ldi	r21, 0x41	; 65
    2f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	bc 01       	movw	r22, r24
    2f24:	cd 01       	movw	r24, r26
    2f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	9a a3       	std	Y+34, r25	; 0x22
    2f30:	89 a3       	std	Y+33, r24	; 0x21
    2f32:	0f c0       	rjmp	.+30     	; 0x2f52 <HStepper_SetStepsDirection+0x86e>
    2f34:	80 e9       	ldi	r24, 0x90	; 144
    2f36:	91 e0       	ldi	r25, 0x01	; 1
    2f38:	98 a3       	std	Y+32, r25	; 0x20
    2f3a:	8f 8f       	std	Y+31, r24	; 0x1f
    2f3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f3e:	98 a1       	ldd	r25, Y+32	; 0x20
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	f1 f7       	brne	.-4      	; 0x2f40 <HStepper_SetStepsDirection+0x85c>
    2f44:	98 a3       	std	Y+32, r25	; 0x20
    2f46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f48:	89 a1       	ldd	r24, Y+33	; 0x21
    2f4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	9a a3       	std	Y+34, r25	; 0x22
    2f50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f52:	89 a1       	ldd	r24, Y+33	; 0x21
    2f54:	9a a1       	ldd	r25, Y+34	; 0x22
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	69 f7       	brne	.-38     	; 0x2f34 <HStepper_SetStepsDirection+0x850>
    2f5a:	14 c0       	rjmp	.+40     	; 0x2f84 <HStepper_SetStepsDirection+0x8a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f60:	8d a1       	ldd	r24, Y+37	; 0x25
    2f62:	9e a1       	ldd	r25, Y+38	; 0x26
    2f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	9a a3       	std	Y+34, r25	; 0x22
    2f6e:	89 a3       	std	Y+33, r24	; 0x21
    2f70:	89 a1       	ldd	r24, Y+33	; 0x21
    2f72:	9a a1       	ldd	r25, Y+34	; 0x22
    2f74:	9e 8f       	std	Y+30, r25	; 0x1e
    2f76:	8d 8f       	std	Y+29, r24	; 0x1d
    2f78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <HStepper_SetStepsDirection+0x898>
    2f80:	9e 8f       	std	Y+30, r25	; 0x1e
    2f82:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(MAX_SPEED_DELAY);
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2f84:	82 e0       	ldi	r24, 0x02	; 2
    2f86:	63 e0       	ldi	r22, 0x03	; 3
    2f88:	41 e0       	ldi	r20, 0x01	; 1
    2f8a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_LOW);
    2f8e:	82 e0       	ldi	r24, 0x02	; 2
    2f90:	64 e0       	ldi	r22, 0x04	; 4
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2f98:	82 e0       	ldi	r24, 0x02	; 2
    2f9a:	65 e0       	ldi	r22, 0x05	; 5
    2f9c:	41 e0       	ldi	r20, 0x01	; 1
    2f9e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2fa2:	82 e0       	ldi	r24, 0x02	; 2
    2fa4:	66 e0       	ldi	r22, 0x06	; 6
    2fa6:	41 e0       	ldi	r20, 0x01	; 1
    2fa8:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	a0 ee       	ldi	r26, 0xE0	; 224
    2fb2:	b0 e4       	ldi	r27, 0x40	; 64
    2fb4:	89 8f       	std	Y+25, r24	; 0x19
    2fb6:	9a 8f       	std	Y+26, r25	; 0x1a
    2fb8:	ab 8f       	std	Y+27, r26	; 0x1b
    2fba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    2fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	4a e7       	ldi	r20, 0x7A	; 122
    2fca:	55 e4       	ldi	r21, 0x45	; 69
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	8d 8b       	std	Y+21, r24	; 0x15
    2fd6:	9e 8b       	std	Y+22, r25	; 0x16
    2fd8:	af 8b       	std	Y+23, r26	; 0x17
    2fda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2fde:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e8       	ldi	r20, 0x80	; 128
    2fea:	5f e3       	ldi	r21, 0x3F	; 63
    2fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff0:	88 23       	and	r24, r24
    2ff2:	2c f4       	brge	.+10     	; 0x2ffe <HStepper_SetStepsDirection+0x91a>
		__ticks = 1;
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	9c 8b       	std	Y+20, r25	; 0x14
    2ffa:	8b 8b       	std	Y+19, r24	; 0x13
    2ffc:	3f c0       	rjmp	.+126    	; 0x307c <HStepper_SetStepsDirection+0x998>
	else if (__tmp > 65535)
    2ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    3000:	7e 89       	ldd	r23, Y+22	; 0x16
    3002:	8f 89       	ldd	r24, Y+23	; 0x17
    3004:	98 8d       	ldd	r25, Y+24	; 0x18
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	3f ef       	ldi	r19, 0xFF	; 255
    300a:	4f e7       	ldi	r20, 0x7F	; 127
    300c:	57 e4       	ldi	r21, 0x47	; 71
    300e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3012:	18 16       	cp	r1, r24
    3014:	4c f5       	brge	.+82     	; 0x3068 <HStepper_SetStepsDirection+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3016:	69 8d       	ldd	r22, Y+25	; 0x19
    3018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    301a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    301c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e2       	ldi	r20, 0x20	; 32
    3024:	51 e4       	ldi	r21, 0x41	; 65
    3026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	bc 01       	movw	r22, r24
    3030:	cd 01       	movw	r24, r26
    3032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	9c 8b       	std	Y+20, r25	; 0x14
    303c:	8b 8b       	std	Y+19, r24	; 0x13
    303e:	0f c0       	rjmp	.+30     	; 0x305e <HStepper_SetStepsDirection+0x97a>
    3040:	80 e9       	ldi	r24, 0x90	; 144
    3042:	91 e0       	ldi	r25, 0x01	; 1
    3044:	9a 8b       	std	Y+18, r25	; 0x12
    3046:	89 8b       	std	Y+17, r24	; 0x11
    3048:	89 89       	ldd	r24, Y+17	; 0x11
    304a:	9a 89       	ldd	r25, Y+18	; 0x12
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <HStepper_SetStepsDirection+0x968>
    3050:	9a 8b       	std	Y+18, r25	; 0x12
    3052:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3054:	8b 89       	ldd	r24, Y+19	; 0x13
    3056:	9c 89       	ldd	r25, Y+20	; 0x14
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	9c 8b       	std	Y+20, r25	; 0x14
    305c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305e:	8b 89       	ldd	r24, Y+19	; 0x13
    3060:	9c 89       	ldd	r25, Y+20	; 0x14
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	69 f7       	brne	.-38     	; 0x3040 <HStepper_SetStepsDirection+0x95c>
    3066:	14 c0       	rjmp	.+40     	; 0x3090 <HStepper_SetStepsDirection+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3068:	6d 89       	ldd	r22, Y+21	; 0x15
    306a:	7e 89       	ldd	r23, Y+22	; 0x16
    306c:	8f 89       	ldd	r24, Y+23	; 0x17
    306e:	98 8d       	ldd	r25, Y+24	; 0x18
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	9c 8b       	std	Y+20, r25	; 0x14
    307a:	8b 8b       	std	Y+19, r24	; 0x13
    307c:	8b 89       	ldd	r24, Y+19	; 0x13
    307e:	9c 89       	ldd	r25, Y+20	; 0x14
    3080:	98 8b       	std	Y+16, r25	; 0x10
    3082:	8f 87       	std	Y+15, r24	; 0x0f
    3084:	8f 85       	ldd	r24, Y+15	; 0x0f
    3086:	98 89       	ldd	r25, Y+16	; 0x10
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <HStepper_SetStepsDirection+0x9a4>
    308c:	98 8b       	std	Y+16, r25	; 0x10
    308e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(MAX_SPEED_DELAY);

				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_LOW);
    3090:	82 e0       	ldi	r24, 0x02	; 2
    3092:	63 e0       	ldi	r22, 0x03	; 3
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    309a:	82 e0       	ldi	r24, 0x02	; 2
    309c:	64 e0       	ldi	r22, 0x04	; 4
    309e:	41 e0       	ldi	r20, 0x01	; 1
    30a0:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    30a4:	82 e0       	ldi	r24, 0x02	; 2
    30a6:	65 e0       	ldi	r22, 0x05	; 5
    30a8:	41 e0       	ldi	r20, 0x01	; 1
    30aa:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    30ae:	82 e0       	ldi	r24, 0x02	; 2
    30b0:	66 e0       	ldi	r22, 0x06	; 6
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	a0 ee       	ldi	r26, 0xE0	; 224
    30be:	b0 e4       	ldi	r27, 0x40	; 64
    30c0:	8b 87       	std	Y+11, r24	; 0x0b
    30c2:	9c 87       	std	Y+12, r25	; 0x0c
    30c4:	ad 87       	std	Y+13, r26	; 0x0d
    30c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    30cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	4a e7       	ldi	r20, 0x7A	; 122
    30d6:	55 e4       	ldi	r21, 0x45	; 69
    30d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	8f 83       	std	Y+7, r24	; 0x07
    30e2:	98 87       	std	Y+8, r25	; 0x08
    30e4:	a9 87       	std	Y+9, r26	; 0x09
    30e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30e8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ea:	78 85       	ldd	r23, Y+8	; 0x08
    30ec:	89 85       	ldd	r24, Y+9	; 0x09
    30ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	40 e8       	ldi	r20, 0x80	; 128
    30f6:	5f e3       	ldi	r21, 0x3F	; 63
    30f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30fc:	88 23       	and	r24, r24
    30fe:	2c f4       	brge	.+10     	; 0x310a <HStepper_SetStepsDirection+0xa26>
		__ticks = 1;
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
    3108:	3f c0       	rjmp	.+126    	; 0x3188 <HStepper_SetStepsDirection+0xaa4>
	else if (__tmp > 65535)
    310a:	6f 81       	ldd	r22, Y+7	; 0x07
    310c:	78 85       	ldd	r23, Y+8	; 0x08
    310e:	89 85       	ldd	r24, Y+9	; 0x09
    3110:	9a 85       	ldd	r25, Y+10	; 0x0a
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	3f ef       	ldi	r19, 0xFF	; 255
    3116:	4f e7       	ldi	r20, 0x7F	; 127
    3118:	57 e4       	ldi	r21, 0x47	; 71
    311a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    311e:	18 16       	cp	r1, r24
    3120:	4c f5       	brge	.+82     	; 0x3174 <HStepper_SetStepsDirection+0xa90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3122:	6b 85       	ldd	r22, Y+11	; 0x0b
    3124:	7c 85       	ldd	r23, Y+12	; 0x0c
    3126:	8d 85       	ldd	r24, Y+13	; 0x0d
    3128:	9e 85       	ldd	r25, Y+14	; 0x0e
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e2       	ldi	r20, 0x20	; 32
    3130:	51 e4       	ldi	r21, 0x41	; 65
    3132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	bc 01       	movw	r22, r24
    313c:	cd 01       	movw	r24, r26
    313e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	9e 83       	std	Y+6, r25	; 0x06
    3148:	8d 83       	std	Y+5, r24	; 0x05
    314a:	0f c0       	rjmp	.+30     	; 0x316a <HStepper_SetStepsDirection+0xa86>
    314c:	80 e9       	ldi	r24, 0x90	; 144
    314e:	91 e0       	ldi	r25, 0x01	; 1
    3150:	9c 83       	std	Y+4, r25	; 0x04
    3152:	8b 83       	std	Y+3, r24	; 0x03
    3154:	8b 81       	ldd	r24, Y+3	; 0x03
    3156:	9c 81       	ldd	r25, Y+4	; 0x04
    3158:	01 97       	sbiw	r24, 0x01	; 1
    315a:	f1 f7       	brne	.-4      	; 0x3158 <HStepper_SetStepsDirection+0xa74>
    315c:	9c 83       	std	Y+4, r25	; 0x04
    315e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3160:	8d 81       	ldd	r24, Y+5	; 0x05
    3162:	9e 81       	ldd	r25, Y+6	; 0x06
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	9e 83       	std	Y+6, r25	; 0x06
    3168:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	00 97       	sbiw	r24, 0x00	; 0
    3170:	69 f7       	brne	.-38     	; 0x314c <HStepper_SetStepsDirection+0xa68>
    3172:	14 c0       	rjmp	.+40     	; 0x319c <HStepper_SetStepsDirection+0xab8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3174:	6f 81       	ldd	r22, Y+7	; 0x07
    3176:	78 85       	ldd	r23, Y+8	; 0x08
    3178:	89 85       	ldd	r24, Y+9	; 0x09
    317a:	9a 85       	ldd	r25, Y+10	; 0x0a
    317c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	9e 83       	std	Y+6, r25	; 0x06
    3186:	8d 83       	std	Y+5, r24	; 0x05
    3188:	8d 81       	ldd	r24, Y+5	; 0x05
    318a:	9e 81       	ldd	r25, Y+6	; 0x06
    318c:	9a 83       	std	Y+2, r25	; 0x02
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	9a 81       	ldd	r25, Y+2	; 0x02
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	f1 f7       	brne	.-4      	; 0x3194 <HStepper_SetStepsDirection+0xab0>
    3198:	9a 83       	std	Y+2, r25	; 0x02
    319a:	89 83       	std	Y+1, r24	; 0x01
					}
			break;

                                        /* counter clock wise*/
		case CCW :
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    319c:	de 01       	movw	r26, r28
    319e:	af 58       	subi	r26, 0x8F	; 143
    31a0:	bf 4f       	sbci	r27, 0xFF	; 255
    31a2:	fe 01       	movw	r30, r28
    31a4:	ef 58       	subi	r30, 0x8F	; 143
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	80 81       	ld	r24, Z
    31aa:	91 81       	ldd	r25, Z+1	; 0x01
    31ac:	01 96       	adiw	r24, 0x01	; 1
    31ae:	8d 93       	st	X+, r24
    31b0:	9c 93       	st	X, r25
    31b2:	fe 01       	movw	r30, r28
    31b4:	ef 58       	subi	r30, 0x8F	; 143
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	de 01       	movw	r26, r28
    31ba:	ab 58       	subi	r26, 0x8B	; 139
    31bc:	bf 4f       	sbci	r27, 0xFF	; 255
    31be:	20 81       	ld	r18, Z
    31c0:	31 81       	ldd	r19, Z+1	; 0x01
    31c2:	8d 91       	ld	r24, X+
    31c4:	9c 91       	ld	r25, X
    31c6:	11 97       	sbiw	r26, 0x01	; 1
    31c8:	28 17       	cp	r18, r24
    31ca:	39 07       	cpc	r19, r25
    31cc:	08 f4       	brcc	.+2      	; 0x31d0 <HStepper_SetStepsDirection+0xaec>
    31ce:	ce cd       	rjmp	.-1124   	; 0x2d6c <HStepper_SetStepsDirection+0x688>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
				_delay_ms(MAX_SPEED_DELAY);
				}
			break;
		}
}
    31d0:	c7 58       	subi	r28, 0x87	; 135
    31d2:	df 4f       	sbci	r29, 0xFF	; 255
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	08 95       	ret

000031e8 <HLED_Errorstate_Led_Init>:


/*******led initialize       ***********/

ErrorState HLED_Errorstate_Led_Init( LED_T* copy_LED_object)
{
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <HLED_Errorstate_Led_Init+0x6>
    31ee:	0f 92       	push	r0
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	9b 83       	std	Y+3, r25	; 0x03
    31f6:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	89 83       	std	Y+1, r24	; 0x01
	Loc_ErrorState_Error_state = MDIO_Errorstate_SetPinDirection(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_OUTPUT);
    31fc:	ea 81       	ldd	r30, Y+2	; 0x02
    31fe:	fb 81       	ldd	r31, Y+3	; 0x03
    3200:	80 81       	ld	r24, Z
    3202:	ea 81       	ldd	r30, Y+2	; 0x02
    3204:	fb 81       	ldd	r31, Y+3	; 0x03
    3206:	91 81       	ldd	r25, Z+1	; 0x01
    3208:	69 2f       	mov	r22, r25
    320a:	41 e0       	ldi	r20, 0x01	; 1
    320c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
    3210:	89 83       	std	Y+1, r24	; 0x01
		return Loc_ErrorState_Error_state;
    3212:	89 81       	ldd	r24, Y+1	; 0x01
}
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	cf 91       	pop	r28
    321c:	df 91       	pop	r29
    321e:	08 95       	ret

00003220 <HLED_Errorstate_Led_On>:

/********* led on              ***********/
ErrorState HLED_Errorstate_Led_On(LED_T* copy_LED_object)
{
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	00 d0       	rcall	.+0      	; 0x3226 <HLED_Errorstate_Led_On+0x6>
    3226:	0f 92       	push	r0
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	9b 83       	std	Y+3, r25	; 0x03
    322e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	89 83       	std	Y+1, r24	; 0x01

	if(copy_LED_object->LedActiveState==ACTIVE_HIGH)
    3234:	ea 81       	ldd	r30, Y+2	; 0x02
    3236:	fb 81       	ldd	r31, Y+3	; 0x03
    3238:	82 81       	ldd	r24, Z+2	; 0x02
    323a:	81 30       	cpi	r24, 0x01	; 1
    323c:	59 f4       	brne	.+22     	; 0x3254 <HLED_Errorstate_Led_On+0x34>
	{
		MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    323e:	ea 81       	ldd	r30, Y+2	; 0x02
    3240:	fb 81       	ldd	r31, Y+3	; 0x03
    3242:	80 81       	ld	r24, Z
    3244:	ea 81       	ldd	r30, Y+2	; 0x02
    3246:	fb 81       	ldd	r31, Y+3	; 0x03
    3248:	91 81       	ldd	r25, Z+1	; 0x01
    324a:	69 2f       	mov	r22, r25
    324c:	41 e0       	ldi	r20, 0x01	; 1
    324e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    3252:	11 c0       	rjmp	.+34     	; 0x3276 <HLED_Errorstate_Led_On+0x56>
	}
	else if(copy_LED_object->LedActiveState==ACTIVE_LOW)
    3254:	ea 81       	ldd	r30, Y+2	; 0x02
    3256:	fb 81       	ldd	r31, Y+3	; 0x03
    3258:	82 81       	ldd	r24, Z+2	; 0x02
    325a:	88 23       	and	r24, r24
    325c:	59 f4       	brne	.+22     	; 0x3274 <HLED_Errorstate_Led_On+0x54>
	{
		MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    325e:	ea 81       	ldd	r30, Y+2	; 0x02
    3260:	fb 81       	ldd	r31, Y+3	; 0x03
    3262:	80 81       	ld	r24, Z
    3264:	ea 81       	ldd	r30, Y+2	; 0x02
    3266:	fb 81       	ldd	r31, Y+3	; 0x03
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	69 2f       	mov	r22, r25
    326c:	40 e0       	ldi	r20, 0x00	; 0
    326e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    3272:	01 c0       	rjmp	.+2      	; 0x3276 <HLED_Errorstate_Led_On+0x56>
	}
	else
	{
		Loc_ErrorState_Error_state=NOK;
    3274:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_ErrorState_Error_state;
    3276:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3278:	0f 90       	pop	r0
    327a:	0f 90       	pop	r0
    327c:	0f 90       	pop	r0
    327e:	cf 91       	pop	r28
    3280:	df 91       	pop	r29
    3282:	08 95       	ret

00003284 <HLED_Errorstate_Led_Off>:

/***                        leed off                  ****/
	ErrorState HLED_Errorstate_Led_Off(LED_T* copy_LED_object)
	{
    3284:	df 93       	push	r29
    3286:	cf 93       	push	r28
    3288:	00 d0       	rcall	.+0      	; 0x328a <HLED_Errorstate_Led_Off+0x6>
    328a:	0f 92       	push	r0
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
    3290:	9b 83       	std	Y+3, r25	; 0x03
    3292:	8a 83       	std	Y+2, r24	; 0x02
		ErrorState Loc_ErrorState_Error_state=OK;
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	89 83       	std	Y+1, r24	; 0x01

		if(copy_LED_object->LedActiveState==ACTIVE_HIGH)
    3298:	ea 81       	ldd	r30, Y+2	; 0x02
    329a:	fb 81       	ldd	r31, Y+3	; 0x03
    329c:	82 81       	ldd	r24, Z+2	; 0x02
    329e:	81 30       	cpi	r24, 0x01	; 1
    32a0:	59 f4       	brne	.+22     	; 0x32b8 <HLED_Errorstate_Led_Off+0x34>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    32a2:	ea 81       	ldd	r30, Y+2	; 0x02
    32a4:	fb 81       	ldd	r31, Y+3	; 0x03
    32a6:	80 81       	ld	r24, Z
    32a8:	ea 81       	ldd	r30, Y+2	; 0x02
    32aa:	fb 81       	ldd	r31, Y+3	; 0x03
    32ac:	91 81       	ldd	r25, Z+1	; 0x01
    32ae:	69 2f       	mov	r22, r25
    32b0:	40 e0       	ldi	r20, 0x00	; 0
    32b2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    32b6:	11 c0       	rjmp	.+34     	; 0x32da <HLED_Errorstate_Led_Off+0x56>
		}
		else if(copy_LED_object->LedActiveState==ACTIVE_LOW)
    32b8:	ea 81       	ldd	r30, Y+2	; 0x02
    32ba:	fb 81       	ldd	r31, Y+3	; 0x03
    32bc:	82 81       	ldd	r24, Z+2	; 0x02
    32be:	88 23       	and	r24, r24
    32c0:	59 f4       	brne	.+22     	; 0x32d8 <HLED_Errorstate_Led_Off+0x54>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    32c2:	ea 81       	ldd	r30, Y+2	; 0x02
    32c4:	fb 81       	ldd	r31, Y+3	; 0x03
    32c6:	80 81       	ld	r24, Z
    32c8:	ea 81       	ldd	r30, Y+2	; 0x02
    32ca:	fb 81       	ldd	r31, Y+3	; 0x03
    32cc:	91 81       	ldd	r25, Z+1	; 0x01
    32ce:	69 2f       	mov	r22, r25
    32d0:	41 e0       	ldi	r20, 0x01	; 1
    32d2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    32d6:	01 c0       	rjmp	.+2      	; 0x32da <HLED_Errorstate_Led_Off+0x56>
		}
		else
		{
			Loc_ErrorState_Error_state=NOK;
    32d8:	19 82       	std	Y+1, r1	; 0x01
		}

		return Loc_ErrorState_Error_state;
    32da:	89 81       	ldd	r24, Y+1	; 0x01
		}
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	cf 91       	pop	r28
    32e4:	df 91       	pop	r29
    32e6:	08 95       	ret

000032e8 <HLED_Errorstate_Led_Toggle>:

	ErrorState HLED_Errorstate_Led_Toggle(LED_T* copy_LED_object)
	{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	00 d0       	rcall	.+0      	; 0x32ee <HLED_Errorstate_Led_Toggle+0x6>
    32ee:	0f 92       	push	r0
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	9b 83       	std	Y+3, r25	; 0x03
    32f6:	8a 83       	std	Y+2, r24	; 0x02
		static uint8 flag=0; // imp
		ErrorState Loc_ErrorState_Error_state=OK;
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	89 83       	std	Y+1, r24	; 0x01
		if(flag==0)
    32fc:	80 91 8a 00 	lds	r24, 0x008A
    3300:	88 23       	and	r24, r24
    3302:	71 f4       	brne	.+28     	; 0x3320 <HLED_Errorstate_Led_Toggle+0x38>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    3304:	ea 81       	ldd	r30, Y+2	; 0x02
    3306:	fb 81       	ldd	r31, Y+3	; 0x03
    3308:	80 81       	ld	r24, Z
    330a:	ea 81       	ldd	r30, Y+2	; 0x02
    330c:	fb 81       	ldd	r31, Y+3	; 0x03
    330e:	91 81       	ldd	r25, Z+1	; 0x01
    3310:	69 2f       	mov	r22, r25
    3312:	41 e0       	ldi	r20, 0x01	; 1
    3314:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
			flag=1;
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	80 93 8a 00 	sts	0x008A, r24
    331e:	10 c0       	rjmp	.+32     	; 0x3340 <HLED_Errorstate_Led_Toggle+0x58>
		}
		else if(flag==1)
    3320:	80 91 8a 00 	lds	r24, 0x008A
    3324:	81 30       	cpi	r24, 0x01	; 1
    3326:	61 f4       	brne	.+24     	; 0x3340 <HLED_Errorstate_Led_Toggle+0x58>
		{

			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    3328:	ea 81       	ldd	r30, Y+2	; 0x02
    332a:	fb 81       	ldd	r31, Y+3	; 0x03
    332c:	80 81       	ld	r24, Z
    332e:	ea 81       	ldd	r30, Y+2	; 0x02
    3330:	fb 81       	ldd	r31, Y+3	; 0x03
    3332:	91 81       	ldd	r25, Z+1	; 0x01
    3334:	69 2f       	mov	r22, r25
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
			flag=0;
    333c:	10 92 8a 00 	sts	0x008A, r1
		}
		else
		{
			/*do nothing*/
		}
		return Loc_ErrorState_Error_state;
    3340:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	cf 91       	pop	r28
    334a:	df 91       	pop	r29
    334c:	08 95       	ret

0000334e <HKPD_VidInit>:
				'D'
		}
};
/* keypad init */
void HKPD_VidInit(void)
{
    334e:	df 93       	push	r29
    3350:	cf 93       	push	r28
    3352:	cd b7       	in	r28, 0x3d	; 61
    3354:	de b7       	in	r29, 0x3e	; 62
	/*Set Row PINS AS AN inPUT*/
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN0,PIN_INPUT);
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	40 e0       	ldi	r20, 0x00	; 0
    335c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN1,PIN_INPUT);
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	61 e0       	ldi	r22, 0x01	; 1
    3364:	40 e0       	ldi	r20, 0x00	; 0
    3366:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN2,PIN_INPUT);
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	62 e0       	ldi	r22, 0x02	; 2
    336e:	40 e0       	ldi	r20, 0x00	; 0
    3370:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN3,PIN_INPUT);
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	63 e0       	ldi	r22, 0x03	; 3
    3378:	40 e0       	ldi	r20, 0x00	; 0
    337a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>

	/*Active internal  PULL UP RESISTOR for Row PINS*/
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN0,PIN_HIGH);
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	41 e0       	ldi	r20, 0x01	; 1
    3384:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN1,PIN_HIGH);
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	61 e0       	ldi	r22, 0x01	; 1
    338c:	41 e0       	ldi	r20, 0x01	; 1
    338e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN2,PIN_HIGH);
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	62 e0       	ldi	r22, 0x02	; 2
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN3,PIN_HIGH);
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	63 e0       	ldi	r22, 0x03	; 3
    33a0:	41 e0       	ldi	r20, 0x01	; 1
    33a2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>

	/*Set COLOUM PINS AS AN OUTPUTS*/
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN0,PIN_OUTPUT);
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	64 e0       	ldi	r22, 0x04	; 4
    33aa:	41 e0       	ldi	r20, 0x01	; 1
    33ac:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN1,PIN_OUTPUT);
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	65 e0       	ldi	r22, 0x05	; 5
    33b4:	41 e0       	ldi	r20, 0x01	; 1
    33b6:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN2,PIN_OUTPUT);
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	66 e0       	ldi	r22, 0x06	; 6
    33be:	41 e0       	ldi	r20, 0x01	; 1
    33c0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN3,PIN_OUTPUT);
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	67 e0       	ldi	r22, 0x07	; 7
    33c8:	41 e0       	ldi	r20, 0x01	; 1
    33ca:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>

	/* Set COLOUM PINS initial value --> one*/
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN0,PIN_HIGH);
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	64 e0       	ldi	r22, 0x04	; 4
    33d2:	41 e0       	ldi	r20, 0x01	; 1
    33d4:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN1,PIN_HIGH);
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	65 e0       	ldi	r22, 0x05	; 5
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN2,PIN_HIGH);
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	66 e0       	ldi	r22, 0x06	; 6
    33e6:	41 e0       	ldi	r20, 0x01	; 1
    33e8:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN3,PIN_HIGH);
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	67 e0       	ldi	r22, 0x07	; 7
    33f0:	41 e0       	ldi	r20, 0x01	; 1
    33f2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
}
    33f6:	cf 91       	pop	r28
    33f8:	df 91       	pop	r29
    33fa:	08 95       	ret

000033fc <HKPD_uint8GetPressed>:

  /* keypad pressed */

uint8 HKPD_uint8GetPressed(void)
{
    33fc:	df 93       	push	r29
    33fe:	cf 93       	push	r28
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62
    3404:	62 97       	sbiw	r28, 0x12	; 18
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
	uint8 Loc_uint8ColCount=0;
    3410:	19 8a       	std	Y+17, r1	; 0x11
	uint8 Loc_uint8RowCount=0;
    3412:	18 8a       	std	Y+16, r1	; 0x10
	uint8 Loc_uint8KeyState;
	uint8 Loc_uint8KeyValue=HKPD_NOTPRESSED;
    3414:	8f ef       	ldi	r24, 0xFF	; 255
    3416:	8f 87       	std	Y+15, r24	; 0x0f

	for(Loc_uint8ColCount=HKPD_COLINIT ; Loc_uint8ColCount<HKPD_COLEND; Loc_uint8ColCount++)
    3418:	84 e0       	ldi	r24, 0x04	; 4
    341a:	89 8b       	std	Y+17, r24	; 0x11
    341c:	b4 c0       	rjmp	.+360    	; 0x3586 <HKPD_uint8GetPressed+0x18a>
	{
		/*Select COLOUM*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_LOW);
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	69 89       	ldd	r22, Y+17	; 0x11
    3422:	40 e0       	ldi	r20, 0x00	; 0
    3424:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>

		/*select row*/

		for(Loc_uint8RowCount=HKPD_ROWINIT;Loc_uint8RowCount<HKPD_ROWEND;Loc_uint8RowCount++)
    3428:	18 8a       	std	Y+16, r1	; 0x10
    342a:	a1 c0       	rjmp	.+322    	; 0x356e <HKPD_uint8GetPressed+0x172>
		{
			MDIO_Errorstate_GetPinValue(HKPD_ROWPORT,Loc_uint8RowCount,&Loc_uint8KeyState);
    342c:	9e 01       	movw	r18, r28
    342e:	2e 5e       	subi	r18, 0xEE	; 238
    3430:	3f 4f       	sbci	r19, 0xFF	; 255
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	68 89       	ldd	r22, Y+16	; 0x10
    3436:	a9 01       	movw	r20, r18
    3438:	0e 94 b7 10 	call	0x216e	; 0x216e <MDIO_Errorstate_GetPinValue>

			if(Loc_uint8KeyState==0)
    343c:	8a 89       	ldd	r24, Y+18	; 0x12
    343e:	88 23       	and	r24, r24
    3440:	a9 f4       	brne	.+42     	; 0x346c <HKPD_uint8GetPressed+0x70>
			{
				Loc_uint8KeyValue=KPD_uint8Values[Loc_uint8ColCount-HKPD_COLINIT][Loc_uint8RowCount-HKPD_ROWINIT];
    3442:	89 89       	ldd	r24, Y+17	; 0x11
    3444:	88 2f       	mov	r24, r24
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	ac 01       	movw	r20, r24
    344a:	44 50       	subi	r20, 0x04	; 4
    344c:	50 40       	sbci	r21, 0x00	; 0
    344e:	88 89       	ldd	r24, Y+16	; 0x10
    3450:	28 2f       	mov	r18, r24
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	ca 01       	movw	r24, r20
    3456:	88 0f       	add	r24, r24
    3458:	99 1f       	adc	r25, r25
    345a:	88 0f       	add	r24, r24
    345c:	99 1f       	adc	r25, r25
    345e:	82 0f       	add	r24, r18
    3460:	93 1f       	adc	r25, r19
    3462:	fc 01       	movw	r30, r24
    3464:	ea 58       	subi	r30, 0x8A	; 138
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	80 81       	ld	r24, Z
    346a:	8f 87       	std	Y+15, r24	; 0x0f
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	a0 ea       	ldi	r26, 0xA0	; 160
    3472:	b1 e4       	ldi	r27, 0x41	; 65
    3474:	8b 87       	std	Y+11, r24	; 0x0b
    3476:	9c 87       	std	Y+12, r25	; 0x0c
    3478:	ad 87       	std	Y+13, r26	; 0x0d
    347a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347c:	6b 85       	ldd	r22, Y+11	; 0x0b
    347e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3480:	8d 85       	ldd	r24, Y+13	; 0x0d
    3482:	9e 85       	ldd	r25, Y+14	; 0x0e
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	4a e7       	ldi	r20, 0x7A	; 122
    348a:	55 e4       	ldi	r21, 0x45	; 69
    348c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	8f 83       	std	Y+7, r24	; 0x07
    3496:	98 87       	std	Y+8, r25	; 0x08
    3498:	a9 87       	std	Y+9, r26	; 0x09
    349a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    349c:	6f 81       	ldd	r22, Y+7	; 0x07
    349e:	78 85       	ldd	r23, Y+8	; 0x08
    34a0:	89 85       	ldd	r24, Y+9	; 0x09
    34a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e8       	ldi	r20, 0x80	; 128
    34aa:	5f e3       	ldi	r21, 0x3F	; 63
    34ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34b0:	88 23       	and	r24, r24
    34b2:	2c f4       	brge	.+10     	; 0x34be <HKPD_uint8GetPressed+0xc2>
		__ticks = 1;
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	9e 83       	std	Y+6, r25	; 0x06
    34ba:	8d 83       	std	Y+5, r24	; 0x05
    34bc:	3f c0       	rjmp	.+126    	; 0x353c <HKPD_uint8GetPressed+0x140>
	else if (__tmp > 65535)
    34be:	6f 81       	ldd	r22, Y+7	; 0x07
    34c0:	78 85       	ldd	r23, Y+8	; 0x08
    34c2:	89 85       	ldd	r24, Y+9	; 0x09
    34c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	3f ef       	ldi	r19, 0xFF	; 255
    34ca:	4f e7       	ldi	r20, 0x7F	; 127
    34cc:	57 e4       	ldi	r21, 0x47	; 71
    34ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34d2:	18 16       	cp	r1, r24
    34d4:	4c f5       	brge	.+82     	; 0x3528 <HKPD_uint8GetPressed+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34da:	8d 85       	ldd	r24, Y+13	; 0x0d
    34dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e2       	ldi	r20, 0x20	; 32
    34e4:	51 e4       	ldi	r21, 0x41	; 65
    34e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	bc 01       	movw	r22, r24
    34f0:	cd 01       	movw	r24, r26
    34f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    34fe:	0f c0       	rjmp	.+30     	; 0x351e <HKPD_uint8GetPressed+0x122>
    3500:	80 e9       	ldi	r24, 0x90	; 144
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	9c 83       	std	Y+4, r25	; 0x04
    3506:	8b 83       	std	Y+3, r24	; 0x03
    3508:	8b 81       	ldd	r24, Y+3	; 0x03
    350a:	9c 81       	ldd	r25, Y+4	; 0x04
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <HKPD_uint8GetPressed+0x110>
    3510:	9c 83       	std	Y+4, r25	; 0x04
    3512:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3514:	8d 81       	ldd	r24, Y+5	; 0x05
    3516:	9e 81       	ldd	r25, Y+6	; 0x06
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	9e 83       	std	Y+6, r25	; 0x06
    351c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351e:	8d 81       	ldd	r24, Y+5	; 0x05
    3520:	9e 81       	ldd	r25, Y+6	; 0x06
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	69 f7       	brne	.-38     	; 0x3500 <HKPD_uint8GetPressed+0x104>
    3526:	1d c0       	rjmp	.+58     	; 0x3562 <HKPD_uint8GetPressed+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3528:	6f 81       	ldd	r22, Y+7	; 0x07
    352a:	78 85       	ldd	r23, Y+8	; 0x08
    352c:	89 85       	ldd	r24, Y+9	; 0x09
    352e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	8d 83       	std	Y+5, r24	; 0x05
    353c:	8d 81       	ldd	r24, Y+5	; 0x05
    353e:	9e 81       	ldd	r25, Y+6	; 0x06
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	9a 81       	ldd	r25, Y+2	; 0x02
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <HKPD_uint8GetPressed+0x14c>
    354c:	9a 83       	std	Y+2, r25	; 0x02
    354e:	89 83       	std	Y+1, r24	; 0x01
    3550:	08 c0       	rjmp	.+16     	; 0x3562 <HKPD_uint8GetPressed+0x166>
			_delay_ms(20);

			/*to do one press*/
			while(Loc_uint8KeyState==0)
			{
				MDIO_Errorstate_GetPinValue(HKPD_ROWPORT,Loc_uint8RowCount,&Loc_uint8KeyState);
    3552:	9e 01       	movw	r18, r28
    3554:	2e 5e       	subi	r18, 0xEE	; 238
    3556:	3f 4f       	sbci	r19, 0xFF	; 255
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	68 89       	ldd	r22, Y+16	; 0x10
    355c:	a9 01       	movw	r20, r18
    355e:	0e 94 b7 10 	call	0x216e	; 0x216e <MDIO_Errorstate_GetPinValue>

			/* DE_POuncing*/
			_delay_ms(20);

			/*to do one press*/
			while(Loc_uint8KeyState==0)
    3562:	8a 89       	ldd	r24, Y+18	; 0x12
    3564:	88 23       	and	r24, r24
    3566:	a9 f3       	breq	.-22     	; 0x3552 <HKPD_uint8GetPressed+0x156>

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_LOW);

		/*select row*/

		for(Loc_uint8RowCount=HKPD_ROWINIT;Loc_uint8RowCount<HKPD_ROWEND;Loc_uint8RowCount++)
    3568:	88 89       	ldd	r24, Y+16	; 0x10
    356a:	8f 5f       	subi	r24, 0xFF	; 255
    356c:	88 8b       	std	Y+16, r24	; 0x10
    356e:	88 89       	ldd	r24, Y+16	; 0x10
    3570:	84 30       	cpi	r24, 0x04	; 4
    3572:	08 f4       	brcc	.+2      	; 0x3576 <HKPD_uint8GetPressed+0x17a>
    3574:	5b cf       	rjmp	.-330    	; 0x342c <HKPD_uint8GetPressed+0x30>
			}
		}

		/*DE_Activate for coloum*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_HIGH);
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	69 89       	ldd	r22, Y+17	; 0x11
    357a:	41 e0       	ldi	r20, 0x01	; 1
    357c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	uint8 Loc_uint8ColCount=0;
	uint8 Loc_uint8RowCount=0;
	uint8 Loc_uint8KeyState;
	uint8 Loc_uint8KeyValue=HKPD_NOTPRESSED;

	for(Loc_uint8ColCount=HKPD_COLINIT ; Loc_uint8ColCount<HKPD_COLEND; Loc_uint8ColCount++)
    3580:	89 89       	ldd	r24, Y+17	; 0x11
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	89 8b       	std	Y+17, r24	; 0x11
    3586:	89 89       	ldd	r24, Y+17	; 0x11
    3588:	88 30       	cpi	r24, 0x08	; 8
    358a:	08 f4       	brcc	.+2      	; 0x358e <HKPD_uint8GetPressed+0x192>
    358c:	48 cf       	rjmp	.-368    	; 0x341e <HKPD_uint8GetPressed+0x22>

		/*DE_Activate for coloum*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_HIGH);
	}
	return Loc_uint8KeyValue;
    358e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3590:	62 96       	adiw	r28, 0x12	; 18
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	f8 94       	cli
    3596:	de bf       	out	0x3e, r29	; 62
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	cd bf       	out	0x3d, r28	; 61
    359c:	cf 91       	pop	r28
    359e:	df 91       	pop	r29
    35a0:	08 95       	ret

000035a2 <HEEPROM_VidSendDataByte>:
#include<util/delay.h>

#include "HEEPROM_Private.h"

void HEEPROM_VidSendDataByte(uint8 copy_uint8PageNumber,uint8 copy_uint8LocationAddress, uint8 copy_uint8Data)
{
    35a2:	df 93       	push	r29
    35a4:	cf 93       	push	r28
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	62 97       	sbiw	r28, 0x12	; 18
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	f8 94       	cli
    35b0:	de bf       	out	0x3e, r29	; 62
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	cd bf       	out	0x3d, r28	; 61
    35b6:	88 8b       	std	Y+16, r24	; 0x10
    35b8:	69 8b       	std	Y+17, r22	; 0x11
    35ba:	4a 8b       	std	Y+18, r20	; 0x12
	/*Handle EEPROM Address*/
	uint8 Loc_uint8SlaveAddress;
	Loc_uint8SlaveAddress=EEPROM_FIXEDADDRESS|(copy_uint8PageNumber);
    35bc:	88 89       	ldd	r24, Y+16	; 0x10
    35be:	80 65       	ori	r24, 0x50	; 80
    35c0:	8f 87       	std	Y+15, r24	; 0x0f
	/*send Start Condition*/
	MTWI_SendSatrtCondition();
    35c2:	0e 94 51 07 	call	0xea2	; 0xea2 <MTWI_SendSatrtCondition>
	/*Send SlA(EEPROM Add +Page number) with write*/
	MTWI_SendSalveAddressWithWrite(Loc_uint8SlaveAddress);
    35c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35c8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <MTWI_SendSalveAddressWithWrite>
	/*Send Location Addressed*/
	MTWI_MasterWriteDataByte(copy_uint8LocationAddress);
    35cc:	89 89       	ldd	r24, Y+17	; 0x11
    35ce:	0e 94 15 08 	call	0x102a	; 0x102a <MTWI_MasterWriteDataByte>
	/*Send Data*/
	MTWI_MasterWriteDataByte(copy_uint8Data);
    35d2:	8a 89       	ldd	r24, Y+18	; 0x12
    35d4:	0e 94 15 08 	call	0x102a	; 0x102a <MTWI_MasterWriteDataByte>
	/*Stop Condition*/
	MTWI_SendStopCondtion();
    35d8:	0e 94 6d 08 	call	0x10da	; 0x10da <MTWI_SendStopCondtion>
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	a0 e2       	ldi	r26, 0x20	; 32
    35e2:	b1 e4       	ldi	r27, 0x41	; 65
    35e4:	8b 87       	std	Y+11, r24	; 0x0b
    35e6:	9c 87       	std	Y+12, r25	; 0x0c
    35e8:	ad 87       	std	Y+13, r26	; 0x0d
    35ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	4a e7       	ldi	r20, 0x7A	; 122
    35fa:	55 e4       	ldi	r21, 0x45	; 69
    35fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	8f 83       	std	Y+7, r24	; 0x07
    3606:	98 87       	std	Y+8, r25	; 0x08
    3608:	a9 87       	std	Y+9, r26	; 0x09
    360a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    360c:	6f 81       	ldd	r22, Y+7	; 0x07
    360e:	78 85       	ldd	r23, Y+8	; 0x08
    3610:	89 85       	ldd	r24, Y+9	; 0x09
    3612:	9a 85       	ldd	r25, Y+10	; 0x0a
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e8       	ldi	r20, 0x80	; 128
    361a:	5f e3       	ldi	r21, 0x3F	; 63
    361c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3620:	88 23       	and	r24, r24
    3622:	2c f4       	brge	.+10     	; 0x362e <HEEPROM_VidSendDataByte+0x8c>
		__ticks = 1;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	9e 83       	std	Y+6, r25	; 0x06
    362a:	8d 83       	std	Y+5, r24	; 0x05
    362c:	3f c0       	rjmp	.+126    	; 0x36ac <HEEPROM_VidSendDataByte+0x10a>
	else if (__tmp > 65535)
    362e:	6f 81       	ldd	r22, Y+7	; 0x07
    3630:	78 85       	ldd	r23, Y+8	; 0x08
    3632:	89 85       	ldd	r24, Y+9	; 0x09
    3634:	9a 85       	ldd	r25, Y+10	; 0x0a
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	3f ef       	ldi	r19, 0xFF	; 255
    363a:	4f e7       	ldi	r20, 0x7F	; 127
    363c:	57 e4       	ldi	r21, 0x47	; 71
    363e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3642:	18 16       	cp	r1, r24
    3644:	4c f5       	brge	.+82     	; 0x3698 <HEEPROM_VidSendDataByte+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3646:	6b 85       	ldd	r22, Y+11	; 0x0b
    3648:	7c 85       	ldd	r23, Y+12	; 0x0c
    364a:	8d 85       	ldd	r24, Y+13	; 0x0d
    364c:	9e 85       	ldd	r25, Y+14	; 0x0e
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e2       	ldi	r20, 0x20	; 32
    3654:	51 e4       	ldi	r21, 0x41	; 65
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	bc 01       	movw	r22, r24
    3660:	cd 01       	movw	r24, r26
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	9e 83       	std	Y+6, r25	; 0x06
    366c:	8d 83       	std	Y+5, r24	; 0x05
    366e:	0f c0       	rjmp	.+30     	; 0x368e <HEEPROM_VidSendDataByte+0xec>
    3670:	80 e9       	ldi	r24, 0x90	; 144
    3672:	91 e0       	ldi	r25, 0x01	; 1
    3674:	9c 83       	std	Y+4, r25	; 0x04
    3676:	8b 83       	std	Y+3, r24	; 0x03
    3678:	8b 81       	ldd	r24, Y+3	; 0x03
    367a:	9c 81       	ldd	r25, Y+4	; 0x04
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	f1 f7       	brne	.-4      	; 0x367c <HEEPROM_VidSendDataByte+0xda>
    3680:	9c 83       	std	Y+4, r25	; 0x04
    3682:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3684:	8d 81       	ldd	r24, Y+5	; 0x05
    3686:	9e 81       	ldd	r25, Y+6	; 0x06
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	9e 83       	std	Y+6, r25	; 0x06
    368c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368e:	8d 81       	ldd	r24, Y+5	; 0x05
    3690:	9e 81       	ldd	r25, Y+6	; 0x06
    3692:	00 97       	sbiw	r24, 0x00	; 0
    3694:	69 f7       	brne	.-38     	; 0x3670 <HEEPROM_VidSendDataByte+0xce>
    3696:	14 c0       	rjmp	.+40     	; 0x36c0 <HEEPROM_VidSendDataByte+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3698:	6f 81       	ldd	r22, Y+7	; 0x07
    369a:	78 85       	ldd	r23, Y+8	; 0x08
    369c:	89 85       	ldd	r24, Y+9	; 0x09
    369e:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	9e 83       	std	Y+6, r25	; 0x06
    36aa:	8d 83       	std	Y+5, r24	; 0x05
    36ac:	8d 81       	ldd	r24, Y+5	; 0x05
    36ae:	9e 81       	ldd	r25, Y+6	; 0x06
    36b0:	9a 83       	std	Y+2, r25	; 0x02
    36b2:	89 83       	std	Y+1, r24	; 0x01
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	9a 81       	ldd	r25, Y+2	; 0x02
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <HEEPROM_VidSendDataByte+0x116>
    36bc:	9a 83       	std	Y+2, r25	; 0x02
    36be:	89 83       	std	Y+1, r24	; 0x01
	/*Data Sheet*/
	_delay_ms(10);
}
    36c0:	62 96       	adiw	r28, 0x12	; 18
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	cf 91       	pop	r28
    36ce:	df 91       	pop	r29
    36d0:	08 95       	ret

000036d2 <HEEPROM_VidReadDataByte>:

uint8 HEEPROM_VidReadDataByte(uint8 copy_uint8PageNumber,uint8 copy_uint8LocationAddress)
{
    36d2:	df 93       	push	r29
    36d4:	cf 93       	push	r28
    36d6:	00 d0       	rcall	.+0      	; 0x36d8 <HEEPROM_VidReadDataByte+0x6>
    36d8:	00 d0       	rcall	.+0      	; 0x36da <HEEPROM_VidReadDataByte+0x8>
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
    36de:	8b 83       	std	Y+3, r24	; 0x03
    36e0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Loc_uint8Data;
	/*Handle EEPROM Address*/
	uint8 Loc_uint8SlaveAddress;
	Loc_uint8SlaveAddress=EEPROM_FIXEDADDRESS|(copy_uint8PageNumber);
    36e2:	8b 81       	ldd	r24, Y+3	; 0x03
    36e4:	80 65       	ori	r24, 0x50	; 80
    36e6:	89 83       	std	Y+1, r24	; 0x01
	/*send Start Condition*/
	MTWI_SendSatrtCondition();
    36e8:	0e 94 51 07 	call	0xea2	; 0xea2 <MTWI_SendSatrtCondition>
	/*Send SlA(EEPROM Add +Page number) with write*/
	MTWI_SendSalveAddressWithWrite(Loc_uint8SlaveAddress);
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	0e 94 a5 07 	call	0xf4a	; 0xf4a <MTWI_SendSalveAddressWithWrite>
	/*Send Location Address*/
	MTWI_MasterWriteDataByte(copy_uint8LocationAddress);
    36f2:	8c 81       	ldd	r24, Y+4	; 0x04
    36f4:	0e 94 15 08 	call	0x102a	; 0x102a <MTWI_MasterWriteDataByte>
	/*Send Repeated Start*/
	MTWI_SendSatrtRepeatedCondition();
    36f8:	0e 94 7b 07 	call	0xef6	; 0xef6 <MTWI_SendSatrtRepeatedCondition>
	/*Send SlA(EEPROM Add +Page number) with write*/
	MTWI_SendSalveAddressWithRead(Loc_uint8SlaveAddress);
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	0e 94 dd 07 	call	0xfba	; 0xfba <MTWI_SendSalveAddressWithRead>
	/*Read Data*/
	MTWI_MasterReadDataByte(&Loc_uint8Data);
    3702:	ce 01       	movw	r24, r28
    3704:	02 96       	adiw	r24, 0x02	; 2
    3706:	0e 94 3e 08 	call	0x107c	; 0x107c <MTWI_MasterReadDataByte>
	/*Stop Condition*/
	MTWI_SendStopCondtion();
    370a:	0e 94 6d 08 	call	0x10da	; 0x10da <MTWI_SendStopCondtion>
	return Loc_uint8Data;
    370e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <HAL_VidHCLCD_4BitModeWriteCommand>:
#include"HCLCD_Config.h"
#define F_CPU   16000000UL
#include"util/delay.h"

void HAL_VidHCLCD_4BitModeWriteCommand(uint8 Copy_uint8Command)
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	2f 97       	sbiw	r28, 0x0f	; 15
    3728:	0f b6       	in	r0, 0x3f	; 63
    372a:	f8 94       	cli
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	0f be       	out	0x3f, r0	; 63
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	8f 87       	std	Y+15, r24	; 0x0f
	/*Select Command Register-->LOW*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_LOW);
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	61 e0       	ldi	r22, 0x01	; 1
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	62 e0       	ldi	r22, 0x02	; 2
    3742:	40 e0       	ldi	r20, 0x00	; 0
    3744:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	/*Send Command*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,Copy_uint8Command);
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	6f 85       	ldd	r22, Y+15	; 0x0f
    374c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	63 e0       	ldi	r22, 0x03	; 3
    3754:	41 e0       	ldi	r20, 0x01	; 1
    3756:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	a0 e0       	ldi	r26, 0x00	; 0
    3760:	b0 e4       	ldi	r27, 0x40	; 64
    3762:	8b 87       	std	Y+11, r24	; 0x0b
    3764:	9c 87       	std	Y+12, r25	; 0x0c
    3766:	ad 87       	std	Y+13, r26	; 0x0d
    3768:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    376a:	6b 85       	ldd	r22, Y+11	; 0x0b
    376c:	7c 85       	ldd	r23, Y+12	; 0x0c
    376e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3770:	9e 85       	ldd	r25, Y+14	; 0x0e
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	4a e7       	ldi	r20, 0x7A	; 122
    3778:	55 e4       	ldi	r21, 0x45	; 69
    377a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	8f 83       	std	Y+7, r24	; 0x07
    3784:	98 87       	std	Y+8, r25	; 0x08
    3786:	a9 87       	std	Y+9, r26	; 0x09
    3788:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    378a:	6f 81       	ldd	r22, Y+7	; 0x07
    378c:	78 85       	ldd	r23, Y+8	; 0x08
    378e:	89 85       	ldd	r24, Y+9	; 0x09
    3790:	9a 85       	ldd	r25, Y+10	; 0x0a
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e8       	ldi	r20, 0x80	; 128
    3798:	5f e3       	ldi	r21, 0x3F	; 63
    379a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    379e:	88 23       	and	r24, r24
    37a0:	2c f4       	brge	.+10     	; 0x37ac <HAL_VidHCLCD_4BitModeWriteCommand+0x8e>
		__ticks = 1;
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	9e 83       	std	Y+6, r25	; 0x06
    37a8:	8d 83       	std	Y+5, r24	; 0x05
    37aa:	3f c0       	rjmp	.+126    	; 0x382a <HAL_VidHCLCD_4BitModeWriteCommand+0x10c>
	else if (__tmp > 65535)
    37ac:	6f 81       	ldd	r22, Y+7	; 0x07
    37ae:	78 85       	ldd	r23, Y+8	; 0x08
    37b0:	89 85       	ldd	r24, Y+9	; 0x09
    37b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	3f ef       	ldi	r19, 0xFF	; 255
    37b8:	4f e7       	ldi	r20, 0x7F	; 127
    37ba:	57 e4       	ldi	r21, 0x47	; 71
    37bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37c0:	18 16       	cp	r1, r24
    37c2:	4c f5       	brge	.+82     	; 0x3816 <HAL_VidHCLCD_4BitModeWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e2       	ldi	r20, 0x20	; 32
    37d2:	51 e4       	ldi	r21, 0x41	; 65
    37d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	bc 01       	movw	r22, r24
    37de:	cd 01       	movw	r24, r26
    37e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9e 83       	std	Y+6, r25	; 0x06
    37ea:	8d 83       	std	Y+5, r24	; 0x05
    37ec:	0f c0       	rjmp	.+30     	; 0x380c <HAL_VidHCLCD_4BitModeWriteCommand+0xee>
    37ee:	80 e9       	ldi	r24, 0x90	; 144
    37f0:	91 e0       	ldi	r25, 0x01	; 1
    37f2:	9c 83       	std	Y+4, r25	; 0x04
    37f4:	8b 83       	std	Y+3, r24	; 0x03
    37f6:	8b 81       	ldd	r24, Y+3	; 0x03
    37f8:	9c 81       	ldd	r25, Y+4	; 0x04
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <HAL_VidHCLCD_4BitModeWriteCommand+0xdc>
    37fe:	9c 83       	std	Y+4, r25	; 0x04
    3800:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3802:	8d 81       	ldd	r24, Y+5	; 0x05
    3804:	9e 81       	ldd	r25, Y+6	; 0x06
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	9e 83       	std	Y+6, r25	; 0x06
    380a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380c:	8d 81       	ldd	r24, Y+5	; 0x05
    380e:	9e 81       	ldd	r25, Y+6	; 0x06
    3810:	00 97       	sbiw	r24, 0x00	; 0
    3812:	69 f7       	brne	.-38     	; 0x37ee <HAL_VidHCLCD_4BitModeWriteCommand+0xd0>
    3814:	14 c0       	rjmp	.+40     	; 0x383e <HAL_VidHCLCD_4BitModeWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3816:	6f 81       	ldd	r22, Y+7	; 0x07
    3818:	78 85       	ldd	r23, Y+8	; 0x08
    381a:	89 85       	ldd	r24, Y+9	; 0x09
    381c:	9a 85       	ldd	r25, Y+10	; 0x0a
    381e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	9e 83       	std	Y+6, r25	; 0x06
    3828:	8d 83       	std	Y+5, r24	; 0x05
    382a:	8d 81       	ldd	r24, Y+5	; 0x05
    382c:	9e 81       	ldd	r25, Y+6	; 0x06
    382e:	9a 83       	std	Y+2, r25	; 0x02
    3830:	89 83       	std	Y+1, r24	; 0x01
    3832:	89 81       	ldd	r24, Y+1	; 0x01
    3834:	9a 81       	ldd	r25, Y+2	; 0x02
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	f1 f7       	brne	.-4      	; 0x3836 <HAL_VidHCLCD_4BitModeWriteCommand+0x118>
    383a:	9a 83       	std	Y+2, r25	; 0x02
    383c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	63 e0       	ldi	r22, 0x03	; 3
    3842:	40 e0       	ldi	r20, 0x00	; 0
    3844:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
}
    3848:	2f 96       	adiw	r28, 0x0f	; 15
    384a:	0f b6       	in	r0, 0x3f	; 63
    384c:	f8 94       	cli
    384e:	de bf       	out	0x3e, r29	; 62
    3850:	0f be       	out	0x3f, r0	; 63
    3852:	cd bf       	out	0x3d, r28	; 61
    3854:	cf 91       	pop	r28
    3856:	df 91       	pop	r29
    3858:	08 95       	ret

0000385a <HAL_VidHCLCD_4BitModeWriteChar>:
void HAL_VidHCLCD_4BitModeWriteChar(uint8 Copy_uint8Char)
{
    385a:	df 93       	push	r29
    385c:	cf 93       	push	r28
    385e:	cd b7       	in	r28, 0x3d	; 61
    3860:	de b7       	in	r29, 0x3e	; 62
    3862:	6d 97       	sbiw	r28, 0x1d	; 29
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data Register-->HIGH*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_HIGH);
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	61 e0       	ldi	r22, 0x01	; 1
    3874:	41 e0       	ldi	r20, 0x01	; 1
    3876:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	62 e0       	ldi	r22, 0x02	; 2
    387e:	40 e0       	ldi	r20, 0x00	; 0
    3880:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	/*Send 4 Most Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char&0xF0));
    3884:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3886:	98 2f       	mov	r25, r24
    3888:	90 7f       	andi	r25, 0xF0	; 240
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	69 2f       	mov	r22, r25
    388e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	63 e0       	ldi	r22, 0x03	; 3
    3896:	41 e0       	ldi	r20, 0x01	; 1
    3898:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	a0 e0       	ldi	r26, 0x00	; 0
    38a2:	b0 e4       	ldi	r27, 0x40	; 64
    38a4:	89 8f       	std	Y+25, r24	; 0x19
    38a6:	9a 8f       	std	Y+26, r25	; 0x1a
    38a8:	ab 8f       	std	Y+27, r26	; 0x1b
    38aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ac:	69 8d       	ldd	r22, Y+25	; 0x19
    38ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	4a e7       	ldi	r20, 0x7A	; 122
    38ba:	55 e4       	ldi	r21, 0x45	; 69
    38bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	8d 8b       	std	Y+21, r24	; 0x15
    38c6:	9e 8b       	std	Y+22, r25	; 0x16
    38c8:	af 8b       	std	Y+23, r26	; 0x17
    38ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38cc:	6d 89       	ldd	r22, Y+21	; 0x15
    38ce:	7e 89       	ldd	r23, Y+22	; 0x16
    38d0:	8f 89       	ldd	r24, Y+23	; 0x17
    38d2:	98 8d       	ldd	r25, Y+24	; 0x18
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	40 e8       	ldi	r20, 0x80	; 128
    38da:	5f e3       	ldi	r21, 0x3F	; 63
    38dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38e0:	88 23       	and	r24, r24
    38e2:	2c f4       	brge	.+10     	; 0x38ee <HAL_VidHCLCD_4BitModeWriteChar+0x94>
		__ticks = 1;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	9c 8b       	std	Y+20, r25	; 0x14
    38ea:	8b 8b       	std	Y+19, r24	; 0x13
    38ec:	3f c0       	rjmp	.+126    	; 0x396c <HAL_VidHCLCD_4BitModeWriteChar+0x112>
	else if (__tmp > 65535)
    38ee:	6d 89       	ldd	r22, Y+21	; 0x15
    38f0:	7e 89       	ldd	r23, Y+22	; 0x16
    38f2:	8f 89       	ldd	r24, Y+23	; 0x17
    38f4:	98 8d       	ldd	r25, Y+24	; 0x18
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	3f ef       	ldi	r19, 0xFF	; 255
    38fa:	4f e7       	ldi	r20, 0x7F	; 127
    38fc:	57 e4       	ldi	r21, 0x47	; 71
    38fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3902:	18 16       	cp	r1, r24
    3904:	4c f5       	brge	.+82     	; 0x3958 <HAL_VidHCLCD_4BitModeWriteChar+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3906:	69 8d       	ldd	r22, Y+25	; 0x19
    3908:	7a 8d       	ldd	r23, Y+26	; 0x1a
    390a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    390c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e2       	ldi	r20, 0x20	; 32
    3914:	51 e4       	ldi	r21, 0x41	; 65
    3916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	9c 8b       	std	Y+20, r25	; 0x14
    392c:	8b 8b       	std	Y+19, r24	; 0x13
    392e:	0f c0       	rjmp	.+30     	; 0x394e <HAL_VidHCLCD_4BitModeWriteChar+0xf4>
    3930:	80 e9       	ldi	r24, 0x90	; 144
    3932:	91 e0       	ldi	r25, 0x01	; 1
    3934:	9a 8b       	std	Y+18, r25	; 0x12
    3936:	89 8b       	std	Y+17, r24	; 0x11
    3938:	89 89       	ldd	r24, Y+17	; 0x11
    393a:	9a 89       	ldd	r25, Y+18	; 0x12
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <HAL_VidHCLCD_4BitModeWriteChar+0xe2>
    3940:	9a 8b       	std	Y+18, r25	; 0x12
    3942:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3944:	8b 89       	ldd	r24, Y+19	; 0x13
    3946:	9c 89       	ldd	r25, Y+20	; 0x14
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	9c 8b       	std	Y+20, r25	; 0x14
    394c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394e:	8b 89       	ldd	r24, Y+19	; 0x13
    3950:	9c 89       	ldd	r25, Y+20	; 0x14
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	69 f7       	brne	.-38     	; 0x3930 <HAL_VidHCLCD_4BitModeWriteChar+0xd6>
    3956:	14 c0       	rjmp	.+40     	; 0x3980 <HAL_VidHCLCD_4BitModeWriteChar+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3958:	6d 89       	ldd	r22, Y+21	; 0x15
    395a:	7e 89       	ldd	r23, Y+22	; 0x16
    395c:	8f 89       	ldd	r24, Y+23	; 0x17
    395e:	98 8d       	ldd	r25, Y+24	; 0x18
    3960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	9c 8b       	std	Y+20, r25	; 0x14
    396a:	8b 8b       	std	Y+19, r24	; 0x13
    396c:	8b 89       	ldd	r24, Y+19	; 0x13
    396e:	9c 89       	ldd	r25, Y+20	; 0x14
    3970:	98 8b       	std	Y+16, r25	; 0x10
    3972:	8f 87       	std	Y+15, r24	; 0x0f
    3974:	8f 85       	ldd	r24, Y+15	; 0x0f
    3976:	98 89       	ldd	r25, Y+16	; 0x10
    3978:	01 97       	sbiw	r24, 0x01	; 1
    397a:	f1 f7       	brne	.-4      	; 0x3978 <HAL_VidHCLCD_4BitModeWriteChar+0x11e>
    397c:	98 8b       	std	Y+16, r25	; 0x10
    397e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	63 e0       	ldi	r22, 0x03	; 3
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
	/*Send 4 Least Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char<<4));
    398a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    398c:	98 2f       	mov	r25, r24
    398e:	92 95       	swap	r25
    3990:	90 7f       	andi	r25, 0xF0	; 240
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	69 2f       	mov	r22, r25
    3996:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	63 e0       	ldi	r22, 0x03	; 3
    399e:	41 e0       	ldi	r20, 0x01	; 1
    39a0:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	a0 e0       	ldi	r26, 0x00	; 0
    39aa:	b0 e4       	ldi	r27, 0x40	; 64
    39ac:	8b 87       	std	Y+11, r24	; 0x0b
    39ae:	9c 87       	std	Y+12, r25	; 0x0c
    39b0:	ad 87       	std	Y+13, r26	; 0x0d
    39b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	4a e7       	ldi	r20, 0x7A	; 122
    39c2:	55 e4       	ldi	r21, 0x45	; 69
    39c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	8f 83       	std	Y+7, r24	; 0x07
    39ce:	98 87       	std	Y+8, r25	; 0x08
    39d0:	a9 87       	std	Y+9, r26	; 0x09
    39d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39d4:	6f 81       	ldd	r22, Y+7	; 0x07
    39d6:	78 85       	ldd	r23, Y+8	; 0x08
    39d8:	89 85       	ldd	r24, Y+9	; 0x09
    39da:	9a 85       	ldd	r25, Y+10	; 0x0a
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	40 e8       	ldi	r20, 0x80	; 128
    39e2:	5f e3       	ldi	r21, 0x3F	; 63
    39e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39e8:	88 23       	and	r24, r24
    39ea:	2c f4       	brge	.+10     	; 0x39f6 <HAL_VidHCLCD_4BitModeWriteChar+0x19c>
		__ticks = 1;
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	9e 83       	std	Y+6, r25	; 0x06
    39f2:	8d 83       	std	Y+5, r24	; 0x05
    39f4:	3f c0       	rjmp	.+126    	; 0x3a74 <HAL_VidHCLCD_4BitModeWriteChar+0x21a>
	else if (__tmp > 65535)
    39f6:	6f 81       	ldd	r22, Y+7	; 0x07
    39f8:	78 85       	ldd	r23, Y+8	; 0x08
    39fa:	89 85       	ldd	r24, Y+9	; 0x09
    39fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	3f ef       	ldi	r19, 0xFF	; 255
    3a02:	4f e7       	ldi	r20, 0x7F	; 127
    3a04:	57 e4       	ldi	r21, 0x47	; 71
    3a06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a0a:	18 16       	cp	r1, r24
    3a0c:	4c f5       	brge	.+82     	; 0x3a60 <HAL_VidHCLCD_4BitModeWriteChar+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a10:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	40 e2       	ldi	r20, 0x20	; 32
    3a1c:	51 e4       	ldi	r21, 0x41	; 65
    3a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a22:	dc 01       	movw	r26, r24
    3a24:	cb 01       	movw	r24, r22
    3a26:	bc 01       	movw	r22, r24
    3a28:	cd 01       	movw	r24, r26
    3a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	9e 83       	std	Y+6, r25	; 0x06
    3a34:	8d 83       	std	Y+5, r24	; 0x05
    3a36:	0f c0       	rjmp	.+30     	; 0x3a56 <HAL_VidHCLCD_4BitModeWriteChar+0x1fc>
    3a38:	80 e9       	ldi	r24, 0x90	; 144
    3a3a:	91 e0       	ldi	r25, 0x01	; 1
    3a3c:	9c 83       	std	Y+4, r25	; 0x04
    3a3e:	8b 83       	std	Y+3, r24	; 0x03
    3a40:	8b 81       	ldd	r24, Y+3	; 0x03
    3a42:	9c 81       	ldd	r25, Y+4	; 0x04
    3a44:	01 97       	sbiw	r24, 0x01	; 1
    3a46:	f1 f7       	brne	.-4      	; 0x3a44 <HAL_VidHCLCD_4BitModeWriteChar+0x1ea>
    3a48:	9c 83       	std	Y+4, r25	; 0x04
    3a4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a50:	01 97       	sbiw	r24, 0x01	; 1
    3a52:	9e 83       	std	Y+6, r25	; 0x06
    3a54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a56:	8d 81       	ldd	r24, Y+5	; 0x05
    3a58:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5a:	00 97       	sbiw	r24, 0x00	; 0
    3a5c:	69 f7       	brne	.-38     	; 0x3a38 <HAL_VidHCLCD_4BitModeWriteChar+0x1de>
    3a5e:	14 c0       	rjmp	.+40     	; 0x3a88 <HAL_VidHCLCD_4BitModeWriteChar+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a60:	6f 81       	ldd	r22, Y+7	; 0x07
    3a62:	78 85       	ldd	r23, Y+8	; 0x08
    3a64:	89 85       	ldd	r24, Y+9	; 0x09
    3a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	9e 83       	std	Y+6, r25	; 0x06
    3a72:	8d 83       	std	Y+5, r24	; 0x05
    3a74:	8d 81       	ldd	r24, Y+5	; 0x05
    3a76:	9e 81       	ldd	r25, Y+6	; 0x06
    3a78:	9a 83       	std	Y+2, r25	; 0x02
    3a7a:	89 83       	std	Y+1, r24	; 0x01
    3a7c:	89 81       	ldd	r24, Y+1	; 0x01
    3a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a80:	01 97       	sbiw	r24, 0x01	; 1
    3a82:	f1 f7       	brne	.-4      	; 0x3a80 <HAL_VidHCLCD_4BitModeWriteChar+0x226>
    3a84:	9a 83       	std	Y+2, r25	; 0x02
    3a86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	63 e0       	ldi	r22, 0x03	; 3
    3a8c:	40 e0       	ldi	r20, 0x00	; 0
    3a8e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <MDIO_Errorstate_SetPinValue>
}
    3a92:	6d 96       	adiw	r28, 0x1d	; 29
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	f8 94       	cli
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	0f be       	out	0x3f, r0	; 63
    3a9c:	cd bf       	out	0x3d, r28	; 61
    3a9e:	cf 91       	pop	r28
    3aa0:	df 91       	pop	r29
    3aa2:	08 95       	ret

00003aa4 <HAL_VidHCLCD_4BitModeInit>:
void HAL_VidHCLCD_4BitModeInit(void)
{
    3aa4:	df 93       	push	r29
    3aa6:	cf 93       	push	r28
    3aa8:	cd b7       	in	r28, 0x3d	; 61
    3aaa:	de b7       	in	r29, 0x3e	; 62
    3aac:	e8 97       	sbiw	r28, 0x38	; 56
    3aae:	0f b6       	in	r0, 0x3f	; 63
    3ab0:	f8 94       	cli
    3ab2:	de bf       	out	0x3e, r29	; 62
    3ab4:	0f be       	out	0x3f, r0	; 63
    3ab6:	cd bf       	out	0x3d, r28	; 61
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	a0 ef       	ldi	r26, 0xF0	; 240
    3abe:	b1 e4       	ldi	r27, 0x41	; 65
    3ac0:	8d ab       	std	Y+53, r24	; 0x35
    3ac2:	9e ab       	std	Y+54, r25	; 0x36
    3ac4:	af ab       	std	Y+55, r26	; 0x37
    3ac6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac8:	6d a9       	ldd	r22, Y+53	; 0x35
    3aca:	7e a9       	ldd	r23, Y+54	; 0x36
    3acc:	8f a9       	ldd	r24, Y+55	; 0x37
    3ace:	98 ad       	ldd	r25, Y+56	; 0x38
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	4a e7       	ldi	r20, 0x7A	; 122
    3ad6:	55 e4       	ldi	r21, 0x45	; 69
    3ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	89 ab       	std	Y+49, r24	; 0x31
    3ae2:	9a ab       	std	Y+50, r25	; 0x32
    3ae4:	ab ab       	std	Y+51, r26	; 0x33
    3ae6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ae8:	69 a9       	ldd	r22, Y+49	; 0x31
    3aea:	7a a9       	ldd	r23, Y+50	; 0x32
    3aec:	8b a9       	ldd	r24, Y+51	; 0x33
    3aee:	9c a9       	ldd	r25, Y+52	; 0x34
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e8       	ldi	r20, 0x80	; 128
    3af6:	5f e3       	ldi	r21, 0x3F	; 63
    3af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3afc:	88 23       	and	r24, r24
    3afe:	2c f4       	brge	.+10     	; 0x3b0a <HAL_VidHCLCD_4BitModeInit+0x66>
		__ticks = 1;
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	98 ab       	std	Y+48, r25	; 0x30
    3b06:	8f a7       	std	Y+47, r24	; 0x2f
    3b08:	3f c0       	rjmp	.+126    	; 0x3b88 <HAL_VidHCLCD_4BitModeInit+0xe4>
	else if (__tmp > 65535)
    3b0a:	69 a9       	ldd	r22, Y+49	; 0x31
    3b0c:	7a a9       	ldd	r23, Y+50	; 0x32
    3b0e:	8b a9       	ldd	r24, Y+51	; 0x33
    3b10:	9c a9       	ldd	r25, Y+52	; 0x34
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	3f ef       	ldi	r19, 0xFF	; 255
    3b16:	4f e7       	ldi	r20, 0x7F	; 127
    3b18:	57 e4       	ldi	r21, 0x47	; 71
    3b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b1e:	18 16       	cp	r1, r24
    3b20:	4c f5       	brge	.+82     	; 0x3b74 <HAL_VidHCLCD_4BitModeInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b22:	6d a9       	ldd	r22, Y+53	; 0x35
    3b24:	7e a9       	ldd	r23, Y+54	; 0x36
    3b26:	8f a9       	ldd	r24, Y+55	; 0x37
    3b28:	98 ad       	ldd	r25, Y+56	; 0x38
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	40 e2       	ldi	r20, 0x20	; 32
    3b30:	51 e4       	ldi	r21, 0x41	; 65
    3b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	bc 01       	movw	r22, r24
    3b3c:	cd 01       	movw	r24, r26
    3b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b42:	dc 01       	movw	r26, r24
    3b44:	cb 01       	movw	r24, r22
    3b46:	98 ab       	std	Y+48, r25	; 0x30
    3b48:	8f a7       	std	Y+47, r24	; 0x2f
    3b4a:	0f c0       	rjmp	.+30     	; 0x3b6a <HAL_VidHCLCD_4BitModeInit+0xc6>
    3b4c:	80 e9       	ldi	r24, 0x90	; 144
    3b4e:	91 e0       	ldi	r25, 0x01	; 1
    3b50:	9e a7       	std	Y+46, r25	; 0x2e
    3b52:	8d a7       	std	Y+45, r24	; 0x2d
    3b54:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b56:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b58:	01 97       	sbiw	r24, 0x01	; 1
    3b5a:	f1 f7       	brne	.-4      	; 0x3b58 <HAL_VidHCLCD_4BitModeInit+0xb4>
    3b5c:	9e a7       	std	Y+46, r25	; 0x2e
    3b5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b60:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b62:	98 a9       	ldd	r25, Y+48	; 0x30
    3b64:	01 97       	sbiw	r24, 0x01	; 1
    3b66:	98 ab       	std	Y+48, r25	; 0x30
    3b68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b6c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b6e:	00 97       	sbiw	r24, 0x00	; 0
    3b70:	69 f7       	brne	.-38     	; 0x3b4c <HAL_VidHCLCD_4BitModeInit+0xa8>
    3b72:	14 c0       	rjmp	.+40     	; 0x3b9c <HAL_VidHCLCD_4BitModeInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b74:	69 a9       	ldd	r22, Y+49	; 0x31
    3b76:	7a a9       	ldd	r23, Y+50	; 0x32
    3b78:	8b a9       	ldd	r24, Y+51	; 0x33
    3b7a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	98 ab       	std	Y+48, r25	; 0x30
    3b86:	8f a7       	std	Y+47, r24	; 0x2f
    3b88:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b8a:	98 a9       	ldd	r25, Y+48	; 0x30
    3b8c:	9c a7       	std	Y+44, r25	; 0x2c
    3b8e:	8b a7       	std	Y+43, r24	; 0x2b
    3b90:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b92:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b94:	01 97       	sbiw	r24, 0x01	; 1
    3b96:	f1 f7       	brne	.-4      	; 0x3b94 <HAL_VidHCLCD_4BitModeInit+0xf0>
    3b98:	9c a7       	std	Y+44, r25	; 0x2c
    3b9a:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait 30ms*/
	_delay_ms(30);
	/*send Function set command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    3b9c:	80 e2       	ldi	r24, 0x20	; 32
    3b9e:	0e 94 8f 1b 	call	0x371e	; 0x371e <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    3ba2:	80 e2       	ldi	r24, 0x20	; 32
    3ba4:	0e 94 8f 1b 	call	0x371e	; 0x371e <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET<<4));
    3ba8:	80 e8       	ldi	r24, 0x80	; 128
    3baa:	0e 94 8f 1b 	call	0x371e	; 0x371e <HAL_VidHCLCD_4BitModeWriteCommand>
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	a0 e8       	ldi	r26, 0x80	; 128
    3bb4:	bf e3       	ldi	r27, 0x3F	; 63
    3bb6:	8f a3       	std	Y+39, r24	; 0x27
    3bb8:	98 a7       	std	Y+40, r25	; 0x28
    3bba:	a9 a7       	std	Y+41, r26	; 0x29
    3bbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bbe:	6f a1       	ldd	r22, Y+39	; 0x27
    3bc0:	78 a5       	ldd	r23, Y+40	; 0x28
    3bc2:	89 a5       	ldd	r24, Y+41	; 0x29
    3bc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	4a e7       	ldi	r20, 0x7A	; 122
    3bcc:	55 e4       	ldi	r21, 0x45	; 69
    3bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	8b a3       	std	Y+35, r24	; 0x23
    3bd8:	9c a3       	std	Y+36, r25	; 0x24
    3bda:	ad a3       	std	Y+37, r26	; 0x25
    3bdc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3bde:	6b a1       	ldd	r22, Y+35	; 0x23
    3be0:	7c a1       	ldd	r23, Y+36	; 0x24
    3be2:	8d a1       	ldd	r24, Y+37	; 0x25
    3be4:	9e a1       	ldd	r25, Y+38	; 0x26
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	40 e8       	ldi	r20, 0x80	; 128
    3bec:	5f e3       	ldi	r21, 0x3F	; 63
    3bee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf2:	88 23       	and	r24, r24
    3bf4:	2c f4       	brge	.+10     	; 0x3c00 <HAL_VidHCLCD_4BitModeInit+0x15c>
		__ticks = 1;
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	9a a3       	std	Y+34, r25	; 0x22
    3bfc:	89 a3       	std	Y+33, r24	; 0x21
    3bfe:	3f c0       	rjmp	.+126    	; 0x3c7e <HAL_VidHCLCD_4BitModeInit+0x1da>
	else if (__tmp > 65535)
    3c00:	6b a1       	ldd	r22, Y+35	; 0x23
    3c02:	7c a1       	ldd	r23, Y+36	; 0x24
    3c04:	8d a1       	ldd	r24, Y+37	; 0x25
    3c06:	9e a1       	ldd	r25, Y+38	; 0x26
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	3f ef       	ldi	r19, 0xFF	; 255
    3c0c:	4f e7       	ldi	r20, 0x7F	; 127
    3c0e:	57 e4       	ldi	r21, 0x47	; 71
    3c10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c14:	18 16       	cp	r1, r24
    3c16:	4c f5       	brge	.+82     	; 0x3c6a <HAL_VidHCLCD_4BitModeInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c18:	6f a1       	ldd	r22, Y+39	; 0x27
    3c1a:	78 a5       	ldd	r23, Y+40	; 0x28
    3c1c:	89 a5       	ldd	r24, Y+41	; 0x29
    3c1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	40 e2       	ldi	r20, 0x20	; 32
    3c26:	51 e4       	ldi	r21, 0x41	; 65
    3c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	bc 01       	movw	r22, r24
    3c32:	cd 01       	movw	r24, r26
    3c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	9a a3       	std	Y+34, r25	; 0x22
    3c3e:	89 a3       	std	Y+33, r24	; 0x21
    3c40:	0f c0       	rjmp	.+30     	; 0x3c60 <HAL_VidHCLCD_4BitModeInit+0x1bc>
    3c42:	80 e9       	ldi	r24, 0x90	; 144
    3c44:	91 e0       	ldi	r25, 0x01	; 1
    3c46:	98 a3       	std	Y+32, r25	; 0x20
    3c48:	8f 8f       	std	Y+31, r24	; 0x1f
    3c4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c4c:	98 a1       	ldd	r25, Y+32	; 0x20
    3c4e:	01 97       	sbiw	r24, 0x01	; 1
    3c50:	f1 f7       	brne	.-4      	; 0x3c4e <HAL_VidHCLCD_4BitModeInit+0x1aa>
    3c52:	98 a3       	std	Y+32, r25	; 0x20
    3c54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c56:	89 a1       	ldd	r24, Y+33	; 0x21
    3c58:	9a a1       	ldd	r25, Y+34	; 0x22
    3c5a:	01 97       	sbiw	r24, 0x01	; 1
    3c5c:	9a a3       	std	Y+34, r25	; 0x22
    3c5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c60:	89 a1       	ldd	r24, Y+33	; 0x21
    3c62:	9a a1       	ldd	r25, Y+34	; 0x22
    3c64:	00 97       	sbiw	r24, 0x00	; 0
    3c66:	69 f7       	brne	.-38     	; 0x3c42 <HAL_VidHCLCD_4BitModeInit+0x19e>
    3c68:	14 c0       	rjmp	.+40     	; 0x3c92 <HAL_VidHCLCD_4BitModeInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c6a:	6b a1       	ldd	r22, Y+35	; 0x23
    3c6c:	7c a1       	ldd	r23, Y+36	; 0x24
    3c6e:	8d a1       	ldd	r24, Y+37	; 0x25
    3c70:	9e a1       	ldd	r25, Y+38	; 0x26
    3c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	9a a3       	std	Y+34, r25	; 0x22
    3c7c:	89 a3       	std	Y+33, r24	; 0x21
    3c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    3c80:	9a a1       	ldd	r25, Y+34	; 0x22
    3c82:	9e 8f       	std	Y+30, r25	; 0x1e
    3c84:	8d 8f       	std	Y+29, r24	; 0x1d
    3c86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c8a:	01 97       	sbiw	r24, 0x01	; 1
    3c8c:	f1 f7       	brne	.-4      	; 0x3c8a <HAL_VidHCLCD_4BitModeInit+0x1e6>
    3c8e:	9e 8f       	std	Y+30, r25	; 0x1e
    3c90:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Send Display on off command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF&0xF0));
    3c92:	80 e0       	ldi	r24, 0x00	; 0
    3c94:	0e 94 8f 1b 	call	0x371e	; 0x371e <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF<<4));
    3c98:	80 ef       	ldi	r24, 0xF0	; 240
    3c9a:	0e 94 8f 1b 	call	0x371e	; 0x371e <HAL_VidHCLCD_4BitModeWriteCommand>
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	a0 e8       	ldi	r26, 0x80	; 128
    3ca4:	bf e3       	ldi	r27, 0x3F	; 63
    3ca6:	89 8f       	std	Y+25, r24	; 0x19
    3ca8:	9a 8f       	std	Y+26, r25	; 0x1a
    3caa:	ab 8f       	std	Y+27, r26	; 0x1b
    3cac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cae:	69 8d       	ldd	r22, Y+25	; 0x19
    3cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	4a e7       	ldi	r20, 0x7A	; 122
    3cbc:	55 e4       	ldi	r21, 0x45	; 69
    3cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	8d 8b       	std	Y+21, r24	; 0x15
    3cc8:	9e 8b       	std	Y+22, r25	; 0x16
    3cca:	af 8b       	std	Y+23, r26	; 0x17
    3ccc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cce:	6d 89       	ldd	r22, Y+21	; 0x15
    3cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    3cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    3cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	40 e8       	ldi	r20, 0x80	; 128
    3cdc:	5f e3       	ldi	r21, 0x3F	; 63
    3cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ce2:	88 23       	and	r24, r24
    3ce4:	2c f4       	brge	.+10     	; 0x3cf0 <HAL_VidHCLCD_4BitModeInit+0x24c>
		__ticks = 1;
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	9c 8b       	std	Y+20, r25	; 0x14
    3cec:	8b 8b       	std	Y+19, r24	; 0x13
    3cee:	3f c0       	rjmp	.+126    	; 0x3d6e <HAL_VidHCLCD_4BitModeInit+0x2ca>
	else if (__tmp > 65535)
    3cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    3cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    3cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    3cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	3f ef       	ldi	r19, 0xFF	; 255
    3cfc:	4f e7       	ldi	r20, 0x7F	; 127
    3cfe:	57 e4       	ldi	r21, 0x47	; 71
    3d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d04:	18 16       	cp	r1, r24
    3d06:	4c f5       	brge	.+82     	; 0x3d5a <HAL_VidHCLCD_4BitModeInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d08:	69 8d       	ldd	r22, Y+25	; 0x19
    3d0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	40 e2       	ldi	r20, 0x20	; 32
    3d16:	51 e4       	ldi	r21, 0x41	; 65
    3d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	bc 01       	movw	r22, r24
    3d22:	cd 01       	movw	r24, r26
    3d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	9c 8b       	std	Y+20, r25	; 0x14
    3d2e:	8b 8b       	std	Y+19, r24	; 0x13
    3d30:	0f c0       	rjmp	.+30     	; 0x3d50 <HAL_VidHCLCD_4BitModeInit+0x2ac>
    3d32:	80 e9       	ldi	r24, 0x90	; 144
    3d34:	91 e0       	ldi	r25, 0x01	; 1
    3d36:	9a 8b       	std	Y+18, r25	; 0x12
    3d38:	89 8b       	std	Y+17, r24	; 0x11
    3d3a:	89 89       	ldd	r24, Y+17	; 0x11
    3d3c:	9a 89       	ldd	r25, Y+18	; 0x12
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	f1 f7       	brne	.-4      	; 0x3d3e <HAL_VidHCLCD_4BitModeInit+0x29a>
    3d42:	9a 8b       	std	Y+18, r25	; 0x12
    3d44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d46:	8b 89       	ldd	r24, Y+19	; 0x13
    3d48:	9c 89       	ldd	r25, Y+20	; 0x14
    3d4a:	01 97       	sbiw	r24, 0x01	; 1
    3d4c:	9c 8b       	std	Y+20, r25	; 0x14
    3d4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d50:	8b 89       	ldd	r24, Y+19	; 0x13
    3d52:	9c 89       	ldd	r25, Y+20	; 0x14
    3d54:	00 97       	sbiw	r24, 0x00	; 0
    3d56:	69 f7       	brne	.-38     	; 0x3d32 <HAL_VidHCLCD_4BitModeInit+0x28e>
    3d58:	14 c0       	rjmp	.+40     	; 0x3d82 <HAL_VidHCLCD_4BitModeInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d5a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d5c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d60:	98 8d       	ldd	r25, Y+24	; 0x18
    3d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	9c 8b       	std	Y+20, r25	; 0x14
    3d6c:	8b 8b       	std	Y+19, r24	; 0x13
    3d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d70:	9c 89       	ldd	r25, Y+20	; 0x14
    3d72:	98 8b       	std	Y+16, r25	; 0x10
    3d74:	8f 87       	std	Y+15, r24	; 0x0f
    3d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d78:	98 89       	ldd	r25, Y+16	; 0x10
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	f1 f7       	brne	.-4      	; 0x3d7a <HAL_VidHCLCD_4BitModeInit+0x2d6>
    3d7e:	98 8b       	std	Y+16, r25	; 0x10
    3d80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR&0xF0));
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	0e 94 8f 1b 	call	0x371e	; 0x371e <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR<<4));
    3d88:	80 e1       	ldi	r24, 0x10	; 16
    3d8a:	0e 94 8f 1b 	call	0x371e	; 0x371e <HAL_VidHCLCD_4BitModeWriteCommand>
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	a0 e0       	ldi	r26, 0x00	; 0
    3d94:	b0 e4       	ldi	r27, 0x40	; 64
    3d96:	8b 87       	std	Y+11, r24	; 0x0b
    3d98:	9c 87       	std	Y+12, r25	; 0x0c
    3d9a:	ad 87       	std	Y+13, r26	; 0x0d
    3d9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	4a e7       	ldi	r20, 0x7A	; 122
    3dac:	55 e4       	ldi	r21, 0x45	; 69
    3dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	8f 83       	std	Y+7, r24	; 0x07
    3db8:	98 87       	std	Y+8, r25	; 0x08
    3dba:	a9 87       	std	Y+9, r26	; 0x09
    3dbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc0:	78 85       	ldd	r23, Y+8	; 0x08
    3dc2:	89 85       	ldd	r24, Y+9	; 0x09
    3dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	40 e8       	ldi	r20, 0x80	; 128
    3dcc:	5f e3       	ldi	r21, 0x3F	; 63
    3dce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dd2:	88 23       	and	r24, r24
    3dd4:	2c f4       	brge	.+10     	; 0x3de0 <HAL_VidHCLCD_4BitModeInit+0x33c>
		__ticks = 1;
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	9e 83       	std	Y+6, r25	; 0x06
    3ddc:	8d 83       	std	Y+5, r24	; 0x05
    3dde:	3f c0       	rjmp	.+126    	; 0x3e5e <HAL_VidHCLCD_4BitModeInit+0x3ba>
	else if (__tmp > 65535)
    3de0:	6f 81       	ldd	r22, Y+7	; 0x07
    3de2:	78 85       	ldd	r23, Y+8	; 0x08
    3de4:	89 85       	ldd	r24, Y+9	; 0x09
    3de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	3f ef       	ldi	r19, 0xFF	; 255
    3dec:	4f e7       	ldi	r20, 0x7F	; 127
    3dee:	57 e4       	ldi	r21, 0x47	; 71
    3df0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3df4:	18 16       	cp	r1, r24
    3df6:	4c f5       	brge	.+82     	; 0x3e4a <HAL_VidHCLCD_4BitModeInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	40 e2       	ldi	r20, 0x20	; 32
    3e06:	51 e4       	ldi	r21, 0x41	; 65
    3e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	bc 01       	movw	r22, r24
    3e12:	cd 01       	movw	r24, r26
    3e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	9e 83       	std	Y+6, r25	; 0x06
    3e1e:	8d 83       	std	Y+5, r24	; 0x05
    3e20:	0f c0       	rjmp	.+30     	; 0x3e40 <HAL_VidHCLCD_4BitModeInit+0x39c>
    3e22:	80 e9       	ldi	r24, 0x90	; 144
    3e24:	91 e0       	ldi	r25, 0x01	; 1
    3e26:	9c 83       	std	Y+4, r25	; 0x04
    3e28:	8b 83       	std	Y+3, r24	; 0x03
    3e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	f1 f7       	brne	.-4      	; 0x3e2e <HAL_VidHCLCD_4BitModeInit+0x38a>
    3e32:	9c 83       	std	Y+4, r25	; 0x04
    3e34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e36:	8d 81       	ldd	r24, Y+5	; 0x05
    3e38:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3a:	01 97       	sbiw	r24, 0x01	; 1
    3e3c:	9e 83       	std	Y+6, r25	; 0x06
    3e3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e40:	8d 81       	ldd	r24, Y+5	; 0x05
    3e42:	9e 81       	ldd	r25, Y+6	; 0x06
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	69 f7       	brne	.-38     	; 0x3e22 <HAL_VidHCLCD_4BitModeInit+0x37e>
    3e48:	14 c0       	rjmp	.+40     	; 0x3e72 <HAL_VidHCLCD_4BitModeInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e4c:	78 85       	ldd	r23, Y+8	; 0x08
    3e4e:	89 85       	ldd	r24, Y+9	; 0x09
    3e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	9e 83       	std	Y+6, r25	; 0x06
    3e5c:	8d 83       	std	Y+5, r24	; 0x05
    3e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e60:	9e 81       	ldd	r25, Y+6	; 0x06
    3e62:	9a 83       	std	Y+2, r25	; 0x02
    3e64:	89 83       	std	Y+1, r24	; 0x01
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
    3e68:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <HAL_VidHCLCD_4BitModeInit+0x3c6>
    3e6e:	9a 83       	std	Y+2, r25	; 0x02
    3e70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE&0xF0));
    3e72:	80 e0       	ldi	r24, 0x00	; 0
    3e74:	0e 94 8f 1b 	call	0x371e	; 0x371e <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE<<4));
    3e78:	80 e6       	ldi	r24, 0x60	; 96
    3e7a:	0e 94 8f 1b 	call	0x371e	; 0x371e <HAL_VidHCLCD_4BitModeWriteCommand>
}
    3e7e:	e8 96       	adiw	r28, 0x38	; 56
    3e80:	0f b6       	in	r0, 0x3f	; 63
    3e82:	f8 94       	cli
    3e84:	de bf       	out	0x3e, r29	; 62
    3e86:	0f be       	out	0x3f, r0	; 63
    3e88:	cd bf       	out	0x3d, r28	; 61
    3e8a:	cf 91       	pop	r28
    3e8c:	df 91       	pop	r29
    3e8e:	08 95       	ret

00003e90 <HAL_VidHCLCD_4BitModeSendCommand>:
void HAL_VidHCLCD_4BitModeSendCommand(uint8 Copy_uint8Command)
{
    3e90:	df 93       	push	r29
    3e92:	cf 93       	push	r28
    3e94:	0f 92       	push	r0
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    3e9a:	89 83       	std	Y+1, r24	; 0x01
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command&0xF0));
    3e9c:	89 81       	ldd	r24, Y+1	; 0x01
    3e9e:	80 7f       	andi	r24, 0xF0	; 240
    3ea0:	0e 94 8f 1b 	call	0x371e	; 0x371e <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command<<4));
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	82 95       	swap	r24
    3ea8:	80 7f       	andi	r24, 0xF0	; 240
    3eaa:	0e 94 8f 1b 	call	0x371e	; 0x371e <HAL_VidHCLCD_4BitModeWriteCommand>
}
    3eae:	0f 90       	pop	r0
    3eb0:	cf 91       	pop	r28
    3eb2:	df 91       	pop	r29
    3eb4:	08 95       	ret

00003eb6 <HAL_VidHCLCD_4BitModeWriteString>:
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
    3eb6:	df 93       	push	r29
    3eb8:	cf 93       	push	r28
    3eba:	00 d0       	rcall	.+0      	; 0x3ebc <HAL_VidHCLCD_4BitModeWriteString+0x6>
    3ebc:	0f 92       	push	r0
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
    3ec2:	9b 83       	std	Y+3, r25	; 0x03
    3ec4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Loc_uint8Count=0;
    3ec6:	19 82       	std	Y+1, r1	; 0x01
    3ec8:	0e c0       	rjmp	.+28     	; 0x3ee6 <HAL_VidHCLCD_4BitModeWriteString+0x30>
	while(Copy_uint8String[Loc_uint8Count]!='\0')
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
    3eca:	89 81       	ldd	r24, Y+1	; 0x01
    3ecc:	28 2f       	mov	r18, r24
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed4:	fc 01       	movw	r30, r24
    3ed6:	e2 0f       	add	r30, r18
    3ed8:	f3 1f       	adc	r31, r19
    3eda:	80 81       	ld	r24, Z
    3edc:	0e 94 2d 1c 	call	0x385a	; 0x385a <HAL_VidHCLCD_4BitModeWriteChar>
		Loc_uint8Count++;
    3ee0:	89 81       	ldd	r24, Y+1	; 0x01
    3ee2:	8f 5f       	subi	r24, 0xFF	; 255
    3ee4:	89 83       	std	Y+1, r24	; 0x01
}
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
	uint8 Loc_uint8Count=0;
	while(Copy_uint8String[Loc_uint8Count]!='\0')
    3ee6:	89 81       	ldd	r24, Y+1	; 0x01
    3ee8:	28 2f       	mov	r18, r24
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	8a 81       	ldd	r24, Y+2	; 0x02
    3eee:	9b 81       	ldd	r25, Y+3	; 0x03
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	e2 0f       	add	r30, r18
    3ef4:	f3 1f       	adc	r31, r19
    3ef6:	80 81       	ld	r24, Z
    3ef8:	88 23       	and	r24, r24
    3efa:	39 f7       	brne	.-50     	; 0x3eca <HAL_VidHCLCD_4BitModeWriteString+0x14>
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
		Loc_uint8Count++;
	}
}
    3efc:	0f 90       	pop	r0
    3efe:	0f 90       	pop	r0
    3f00:	0f 90       	pop	r0
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	08 95       	ret

00003f08 <HAL_VidHCLCD_4BitModeWriteNumber>:
/*1234*/
void HAL_VidHCLCD_4BitModeWriteNumber(uint32 Copy_uint32Number)
{
    3f08:	0f 93       	push	r16
    3f0a:	1f 93       	push	r17
    3f0c:	df 93       	push	r29
    3f0e:	cf 93       	push	r28
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	65 97       	sbiw	r28, 0x15	; 21
    3f16:	0f b6       	in	r0, 0x3f	; 63
    3f18:	f8 94       	cli
    3f1a:	de bf       	out	0x3e, r29	; 62
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	cd bf       	out	0x3d, r28	; 61
    3f20:	6a 8b       	std	Y+18, r22	; 0x12
    3f22:	7b 8b       	std	Y+19, r23	; 0x13
    3f24:	8c 8b       	std	Y+20, r24	; 0x14
    3f26:	9d 8b       	std	Y+21, r25	; 0x15
	uint8 Loc_uint8Digits[16];
	sint8 Loc_sint8Count=0;
    3f28:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint32Number==0)
    3f2a:	8a 89       	ldd	r24, Y+18	; 0x12
    3f2c:	9b 89       	ldd	r25, Y+19	; 0x13
    3f2e:	ac 89       	ldd	r26, Y+20	; 0x14
    3f30:	bd 89       	ldd	r27, Y+21	; 0x15
    3f32:	00 97       	sbiw	r24, 0x00	; 0
    3f34:	a1 05       	cpc	r26, r1
    3f36:	b1 05       	cpc	r27, r1
    3f38:	99 f5       	brne	.+102    	; 0x3fa0 <HAL_VidHCLCD_4BitModeWriteNumber+0x98>
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
    3f3a:	80 e3       	ldi	r24, 0x30	; 48
    3f3c:	0e 94 2d 1c 	call	0x385a	; 0x385a <HAL_VidHCLCD_4BitModeWriteChar>
    3f40:	4f c0       	rjmp	.+158    	; 0x3fe0 <HAL_VidHCLCD_4BitModeWriteNumber+0xd8>
	}
	else
	{
		while(Copy_uint32Number!=0)
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
    3f42:	89 81       	ldd	r24, Y+1	; 0x01
    3f44:	08 2f       	mov	r16, r24
    3f46:	11 27       	eor	r17, r17
    3f48:	07 fd       	sbrc	r16, 7
    3f4a:	10 95       	com	r17
    3f4c:	8a 89       	ldd	r24, Y+18	; 0x12
    3f4e:	9b 89       	ldd	r25, Y+19	; 0x13
    3f50:	ac 89       	ldd	r26, Y+20	; 0x14
    3f52:	bd 89       	ldd	r27, Y+21	; 0x15
    3f54:	2a e0       	ldi	r18, 0x0A	; 10
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	40 e0       	ldi	r20, 0x00	; 0
    3f5a:	50 e0       	ldi	r21, 0x00	; 0
    3f5c:	bc 01       	movw	r22, r24
    3f5e:	cd 01       	movw	r24, r26
    3f60:	0e 94 42 21 	call	0x4284	; 0x4284 <__udivmodsi4>
    3f64:	dc 01       	movw	r26, r24
    3f66:	cb 01       	movw	r24, r22
    3f68:	28 2f       	mov	r18, r24
    3f6a:	ce 01       	movw	r24, r28
    3f6c:	02 96       	adiw	r24, 0x02	; 2
    3f6e:	fc 01       	movw	r30, r24
    3f70:	e0 0f       	add	r30, r16
    3f72:	f1 1f       	adc	r31, r17
    3f74:	20 83       	st	Z, r18
			Copy_uint32Number/=10;
    3f76:	8a 89       	ldd	r24, Y+18	; 0x12
    3f78:	9b 89       	ldd	r25, Y+19	; 0x13
    3f7a:	ac 89       	ldd	r26, Y+20	; 0x14
    3f7c:	bd 89       	ldd	r27, Y+21	; 0x15
    3f7e:	2a e0       	ldi	r18, 0x0A	; 10
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e0       	ldi	r20, 0x00	; 0
    3f84:	50 e0       	ldi	r21, 0x00	; 0
    3f86:	bc 01       	movw	r22, r24
    3f88:	cd 01       	movw	r24, r26
    3f8a:	0e 94 42 21 	call	0x4284	; 0x4284 <__udivmodsi4>
    3f8e:	da 01       	movw	r26, r20
    3f90:	c9 01       	movw	r24, r18
    3f92:	8a 8b       	std	Y+18, r24	; 0x12
    3f94:	9b 8b       	std	Y+19, r25	; 0x13
    3f96:	ac 8b       	std	Y+20, r26	; 0x14
    3f98:	bd 8b       	std	Y+21, r27	; 0x15
			Loc_sint8Count++;
    3f9a:	89 81       	ldd	r24, Y+1	; 0x01
    3f9c:	8f 5f       	subi	r24, 0xFF	; 255
    3f9e:	89 83       	std	Y+1, r24	; 0x01
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
	}
	else
	{
		while(Copy_uint32Number!=0)
    3fa0:	8a 89       	ldd	r24, Y+18	; 0x12
    3fa2:	9b 89       	ldd	r25, Y+19	; 0x13
    3fa4:	ac 89       	ldd	r26, Y+20	; 0x14
    3fa6:	bd 89       	ldd	r27, Y+21	; 0x15
    3fa8:	00 97       	sbiw	r24, 0x00	; 0
    3faa:	a1 05       	cpc	r26, r1
    3fac:	b1 05       	cpc	r27, r1
    3fae:	49 f6       	brne	.-110    	; 0x3f42 <HAL_VidHCLCD_4BitModeWriteNumber+0x3a>
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
    3fb0:	89 81       	ldd	r24, Y+1	; 0x01
    3fb2:	81 50       	subi	r24, 0x01	; 1
    3fb4:	89 83       	std	Y+1, r24	; 0x01
    3fb6:	11 c0       	rjmp	.+34     	; 0x3fda <HAL_VidHCLCD_4BitModeWriteNumber+0xd2>
		while(Loc_sint8Count>=0)
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
    3fb8:	89 81       	ldd	r24, Y+1	; 0x01
    3fba:	28 2f       	mov	r18, r24
    3fbc:	33 27       	eor	r19, r19
    3fbe:	27 fd       	sbrc	r18, 7
    3fc0:	30 95       	com	r19
    3fc2:	ce 01       	movw	r24, r28
    3fc4:	02 96       	adiw	r24, 0x02	; 2
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	e2 0f       	add	r30, r18
    3fca:	f3 1f       	adc	r31, r19
    3fcc:	80 81       	ld	r24, Z
    3fce:	80 5d       	subi	r24, 0xD0	; 208
    3fd0:	0e 94 2d 1c 	call	0x385a	; 0x385a <HAL_VidHCLCD_4BitModeWriteChar>
			Loc_sint8Count--;
    3fd4:	89 81       	ldd	r24, Y+1	; 0x01
    3fd6:	81 50       	subi	r24, 0x01	; 1
    3fd8:	89 83       	std	Y+1, r24	; 0x01
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
		while(Loc_sint8Count>=0)
    3fda:	89 81       	ldd	r24, Y+1	; 0x01
    3fdc:	88 23       	and	r24, r24
    3fde:	64 f7       	brge	.-40     	; 0x3fb8 <HAL_VidHCLCD_4BitModeWriteNumber+0xb0>
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
			Loc_sint8Count--;
		}
	}
}
    3fe0:	65 96       	adiw	r28, 0x15	; 21
    3fe2:	0f b6       	in	r0, 0x3f	; 63
    3fe4:	f8 94       	cli
    3fe6:	de bf       	out	0x3e, r29	; 62
    3fe8:	0f be       	out	0x3f, r0	; 63
    3fea:	cd bf       	out	0x3d, r28	; 61
    3fec:	cf 91       	pop	r28
    3fee:	df 91       	pop	r29
    3ff0:	1f 91       	pop	r17
    3ff2:	0f 91       	pop	r16
    3ff4:	08 95       	ret

00003ff6 <HAL_VidHCLCD_4BitModeSetPosition>:
void HAL_VidHCLCD_4BitModeSetPosition(uint8 Copy_uint8LineNum,uint8 Copy_uint8Position)
{
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	00 d0       	rcall	.+0      	; 0x3ffc <HAL_VidHCLCD_4BitModeSetPosition+0x6>
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
    4000:	89 83       	std	Y+1, r24	; 0x01
    4002:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_uint8LineNum==1)
    4004:	89 81       	ldd	r24, Y+1	; 0x01
    4006:	81 30       	cpi	r24, 0x01	; 1
    4008:	29 f4       	brne	.+10     	; 0x4014 <HAL_VidHCLCD_4BitModeSetPosition+0x1e>
	{
		HAL_VidHCLCD_4BitModeSendCommand(128+Copy_uint8Position);
    400a:	8a 81       	ldd	r24, Y+2	; 0x02
    400c:	80 58       	subi	r24, 0x80	; 128
    400e:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <HAL_VidHCLCD_4BitModeSendCommand>
    4012:	07 c0       	rjmp	.+14     	; 0x4022 <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	}
	else if(Copy_uint8LineNum==2)
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	82 30       	cpi	r24, 0x02	; 2
    4018:	21 f4       	brne	.+8      	; 0x4022 <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	{
		HAL_VidHCLCD_4BitModeSendCommand(192+Copy_uint8Position);
    401a:	8a 81       	ldd	r24, Y+2	; 0x02
    401c:	80 54       	subi	r24, 0x40	; 64
    401e:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <HAL_VidHCLCD_4BitModeSendCommand>
	}
	else
	{
		/*Do Nothing*/
	}
}
    4022:	0f 90       	pop	r0
    4024:	0f 90       	pop	r0
    4026:	cf 91       	pop	r28
    4028:	df 91       	pop	r29
    402a:	08 95       	ret

0000402c <HBUTTON_Errorstate_Button_Init>:
#include"../../LIB/LBIT_MATH.h"
#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HBUTTON_Interface.h"

ErrorState  HBUTTON_Errorstate_Button_Init(Button_t* copy_Button_object)
{
    402c:	df 93       	push	r29
    402e:	cf 93       	push	r28
    4030:	00 d0       	rcall	.+0      	; 0x4032 <HBUTTON_Errorstate_Button_Init+0x6>
    4032:	0f 92       	push	r0
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
    4038:	9b 83       	std	Y+3, r25	; 0x03
    403a:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	89 83       	std	Y+1, r24	; 0x01
		Loc_ErrorState_Error_state = MDIO_Errorstate_SetPinDirection(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,PIN_INPUT);
    4040:	ea 81       	ldd	r30, Y+2	; 0x02
    4042:	fb 81       	ldd	r31, Y+3	; 0x03
    4044:	80 81       	ld	r24, Z
    4046:	ea 81       	ldd	r30, Y+2	; 0x02
    4048:	fb 81       	ldd	r31, Y+3	; 0x03
    404a:	91 81       	ldd	r25, Z+1	; 0x01
    404c:	69 2f       	mov	r22, r25
    404e:	40 e0       	ldi	r20, 0x00	; 0
    4050:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
    4054:	89 83       	std	Y+1, r24	; 0x01
			return Loc_ErrorState_Error_state;
    4056:	89 81       	ldd	r24, Y+1	; 0x01
}
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
    405c:	0f 90       	pop	r0
    405e:	cf 91       	pop	r28
    4060:	df 91       	pop	r29
    4062:	08 95       	ret

00004064 <HBUTTON_Errorstate_Button_Pressed>:
ErrorState  HBUTTON_Errorstate_Button_Pressed(Button_t* copy_Button_object)
{
    4064:	df 93       	push	r29
    4066:	cf 93       	push	r28
    4068:	00 d0       	rcall	.+0      	; 0x406a <HBUTTON_Errorstate_Button_Pressed+0x6>
    406a:	00 d0       	rcall	.+0      	; 0x406c <HBUTTON_Errorstate_Button_Pressed+0x8>
    406c:	cd b7       	in	r28, 0x3d	; 61
    406e:	de b7       	in	r29, 0x3e	; 62
    4070:	9c 83       	std	Y+4, r25	; 0x04
    4072:	8b 83       	std	Y+3, r24	; 0x03

	uint8 Loc_Button_State;
	ErrorState Loc_ErrorState_Error_state=OK;
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	89 83       	std	Y+1, r24	; 0x01
	if((copy_Button_object->ButtonActiveState)==PULL_DOWN)/*check 3la button activate state*/
    4078:	eb 81       	ldd	r30, Y+3	; 0x03
    407a:	fc 81       	ldd	r31, Y+4	; 0x04
    407c:	82 81       	ldd	r24, Z+2	; 0x02
    407e:	88 23       	and	r24, r24
    4080:	c1 f4       	brne	.+48     	; 0x40b2 <HBUTTON_Errorstate_Button_Pressed+0x4e>
	{
		/*pull down */
		MDIO_Errorstate_SetPinDirection(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,PIN_INPUT);
    4082:	eb 81       	ldd	r30, Y+3	; 0x03
    4084:	fc 81       	ldd	r31, Y+4	; 0x04
    4086:	80 81       	ld	r24, Z
    4088:	eb 81       	ldd	r30, Y+3	; 0x03
    408a:	fc 81       	ldd	r31, Y+4	; 0x04
    408c:	91 81       	ldd	r25, Z+1	; 0x01
    408e:	69 2f       	mov	r22, r25
    4090:	40 e0       	ldi	r20, 0x00	; 0
    4092:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
		MDIO_Errorstate_GetPinValue(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,&Loc_Button_State);
    4096:	eb 81       	ldd	r30, Y+3	; 0x03
    4098:	fc 81       	ldd	r31, Y+4	; 0x04
    409a:	80 81       	ld	r24, Z
    409c:	eb 81       	ldd	r30, Y+3	; 0x03
    409e:	fc 81       	ldd	r31, Y+4	; 0x04
    40a0:	91 81       	ldd	r25, Z+1	; 0x01
    40a2:	9e 01       	movw	r18, r28
    40a4:	2e 5f       	subi	r18, 0xFE	; 254
    40a6:	3f 4f       	sbci	r19, 0xFF	; 255
    40a8:	69 2f       	mov	r22, r25
    40aa:	a9 01       	movw	r20, r18
    40ac:	0e 94 b7 10 	call	0x216e	; 0x216e <MDIO_Errorstate_GetPinValue>
    40b0:	1e c0       	rjmp	.+60     	; 0x40ee <HBUTTON_Errorstate_Button_Pressed+0x8a>
	}
	else if((copy_Button_object->ButtonActiveState)==PULL_UP)
    40b2:	eb 81       	ldd	r30, Y+3	; 0x03
    40b4:	fc 81       	ldd	r31, Y+4	; 0x04
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	81 30       	cpi	r24, 0x01	; 1
    40ba:	c1 f4       	brne	.+48     	; 0x40ec <HBUTTON_Errorstate_Button_Pressed+0x88>
	{
		MDIO_Errorstate_SetPinDirection(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,PIN_INPUT);
    40bc:	eb 81       	ldd	r30, Y+3	; 0x03
    40be:	fc 81       	ldd	r31, Y+4	; 0x04
    40c0:	80 81       	ld	r24, Z
    40c2:	eb 81       	ldd	r30, Y+3	; 0x03
    40c4:	fc 81       	ldd	r31, Y+4	; 0x04
    40c6:	91 81       	ldd	r25, Z+1	; 0x01
    40c8:	69 2f       	mov	r22, r25
    40ca:	40 e0       	ldi	r20, 0x00	; 0
    40cc:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
		/*internal pull up activate*/
		MDIO_Errorstate_GetPinValue(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,&Loc_Button_State);
    40d0:	eb 81       	ldd	r30, Y+3	; 0x03
    40d2:	fc 81       	ldd	r31, Y+4	; 0x04
    40d4:	80 81       	ld	r24, Z
    40d6:	eb 81       	ldd	r30, Y+3	; 0x03
    40d8:	fc 81       	ldd	r31, Y+4	; 0x04
    40da:	91 81       	ldd	r25, Z+1	; 0x01
    40dc:	9e 01       	movw	r18, r28
    40de:	2e 5f       	subi	r18, 0xFE	; 254
    40e0:	3f 4f       	sbci	r19, 0xFF	; 255
    40e2:	69 2f       	mov	r22, r25
    40e4:	a9 01       	movw	r20, r18
    40e6:	0e 94 b7 10 	call	0x216e	; 0x216e <MDIO_Errorstate_GetPinValue>
    40ea:	01 c0       	rjmp	.+2      	; 0x40ee <HBUTTON_Errorstate_Button_Pressed+0x8a>
	}
	else
	{
		Loc_ErrorState_Error_state=NOK;
    40ec:	19 82       	std	Y+1, r1	; 0x01
	}

return Loc_ErrorState_Error_state;
    40ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    40f0:	0f 90       	pop	r0
    40f2:	0f 90       	pop	r0
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	cf 91       	pop	r28
    40fa:	df 91       	pop	r29
    40fc:	08 95       	ret

000040fe <main>:
#define F_CPU 16000000UL
#include<util/delay.h>

LED_T led1={MDIO_PORTC,PIN7,ACTIVE_HIGH};
int main(void)
{
    40fe:	df 93       	push	r29
    4100:	cf 93       	push	r28
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	2f 97       	sbiw	r28, 0x0f	; 15
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
	/*LCD PIN initialize*/
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN4,PIN_OUTPUT);
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	64 e0       	ldi	r22, 0x04	; 4
    4116:	41 e0       	ldi	r20, 0x01	; 1
    4118:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN5,PIN_OUTPUT);
    411c:	80 e0       	ldi	r24, 0x00	; 0
    411e:	65 e0       	ldi	r22, 0x05	; 5
    4120:	41 e0       	ldi	r20, 0x01	; 1
    4122:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN6,PIN_OUTPUT);
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	66 e0       	ldi	r22, 0x06	; 6
    412a:	41 e0       	ldi	r20, 0x01	; 1
    412c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN7,PIN_OUTPUT);
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	67 e0       	ldi	r22, 0x07	; 7
    4134:	41 e0       	ldi	r20, 0x01	; 1
    4136:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RS_PIN,PIN_OUTPUT);
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	61 e0       	ldi	r22, 0x01	; 1
    413e:	41 e0       	ldi	r20, 0x01	; 1
    4140:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RW_PIN,PIN_OUTPUT);
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	62 e0       	ldi	r22, 0x02	; 2
    4148:	41 e0       	ldi	r20, 0x01	; 1
    414a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,E_PIN,PIN_OUTPUT);
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	63 e0       	ldi	r22, 0x03	; 3
    4152:	41 e0       	ldi	r20, 0x01	; 1
    4154:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <MDIO_Errorstate_SetPinDirection>
	/*LCD initialize*/
	HAL_VidHCLCD_4BitModeInit();
    4158:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <HAL_VidHCLCD_4BitModeInit>
	HAL_VidHCLCD_4BitModeWriteString((uint8*)"welcomeEEPROM");
    415c:	80 e6       	ldi	r24, 0x60	; 96
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <HAL_VidHCLCD_4BitModeWriteString>
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	aa e7       	ldi	r26, 0x7A	; 122
    416a:	b4 e4       	ldi	r27, 0x44	; 68
    416c:	8b 87       	std	Y+11, r24	; 0x0b
    416e:	9c 87       	std	Y+12, r25	; 0x0c
    4170:	ad 87       	std	Y+13, r26	; 0x0d
    4172:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4174:	6b 85       	ldd	r22, Y+11	; 0x0b
    4176:	7c 85       	ldd	r23, Y+12	; 0x0c
    4178:	8d 85       	ldd	r24, Y+13	; 0x0d
    417a:	9e 85       	ldd	r25, Y+14	; 0x0e
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	4a e7       	ldi	r20, 0x7A	; 122
    4182:	55 e4       	ldi	r21, 0x45	; 69
    4184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	8f 83       	std	Y+7, r24	; 0x07
    418e:	98 87       	std	Y+8, r25	; 0x08
    4190:	a9 87       	std	Y+9, r26	; 0x09
    4192:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4194:	6f 81       	ldd	r22, Y+7	; 0x07
    4196:	78 85       	ldd	r23, Y+8	; 0x08
    4198:	89 85       	ldd	r24, Y+9	; 0x09
    419a:	9a 85       	ldd	r25, Y+10	; 0x0a
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	40 e8       	ldi	r20, 0x80	; 128
    41a2:	5f e3       	ldi	r21, 0x3F	; 63
    41a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41a8:	88 23       	and	r24, r24
    41aa:	2c f4       	brge	.+10     	; 0x41b6 <main+0xb8>
		__ticks = 1;
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	9e 83       	std	Y+6, r25	; 0x06
    41b2:	8d 83       	std	Y+5, r24	; 0x05
    41b4:	3f c0       	rjmp	.+126    	; 0x4234 <main+0x136>
	else if (__tmp > 65535)
    41b6:	6f 81       	ldd	r22, Y+7	; 0x07
    41b8:	78 85       	ldd	r23, Y+8	; 0x08
    41ba:	89 85       	ldd	r24, Y+9	; 0x09
    41bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    41be:	20 e0       	ldi	r18, 0x00	; 0
    41c0:	3f ef       	ldi	r19, 0xFF	; 255
    41c2:	4f e7       	ldi	r20, 0x7F	; 127
    41c4:	57 e4       	ldi	r21, 0x47	; 71
    41c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41ca:	18 16       	cp	r1, r24
    41cc:	4c f5       	brge	.+82     	; 0x4220 <main+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    41d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	40 e2       	ldi	r20, 0x20	; 32
    41dc:	51 e4       	ldi	r21, 0x41	; 65
    41de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	bc 01       	movw	r22, r24
    41e8:	cd 01       	movw	r24, r26
    41ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	9e 83       	std	Y+6, r25	; 0x06
    41f4:	8d 83       	std	Y+5, r24	; 0x05
    41f6:	0f c0       	rjmp	.+30     	; 0x4216 <main+0x118>
    41f8:	80 e9       	ldi	r24, 0x90	; 144
    41fa:	91 e0       	ldi	r25, 0x01	; 1
    41fc:	9c 83       	std	Y+4, r25	; 0x04
    41fe:	8b 83       	std	Y+3, r24	; 0x03
    4200:	8b 81       	ldd	r24, Y+3	; 0x03
    4202:	9c 81       	ldd	r25, Y+4	; 0x04
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	f1 f7       	brne	.-4      	; 0x4204 <main+0x106>
    4208:	9c 83       	std	Y+4, r25	; 0x04
    420a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    420c:	8d 81       	ldd	r24, Y+5	; 0x05
    420e:	9e 81       	ldd	r25, Y+6	; 0x06
    4210:	01 97       	sbiw	r24, 0x01	; 1
    4212:	9e 83       	std	Y+6, r25	; 0x06
    4214:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4216:	8d 81       	ldd	r24, Y+5	; 0x05
    4218:	9e 81       	ldd	r25, Y+6	; 0x06
    421a:	00 97       	sbiw	r24, 0x00	; 0
    421c:	69 f7       	brne	.-38     	; 0x41f8 <main+0xfa>
    421e:	14 c0       	rjmp	.+40     	; 0x4248 <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4220:	6f 81       	ldd	r22, Y+7	; 0x07
    4222:	78 85       	ldd	r23, Y+8	; 0x08
    4224:	89 85       	ldd	r24, Y+9	; 0x09
    4226:	9a 85       	ldd	r25, Y+10	; 0x0a
    4228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	9e 83       	std	Y+6, r25	; 0x06
    4232:	8d 83       	std	Y+5, r24	; 0x05
    4234:	8d 81       	ldd	r24, Y+5	; 0x05
    4236:	9e 81       	ldd	r25, Y+6	; 0x06
    4238:	9a 83       	std	Y+2, r25	; 0x02
    423a:	89 83       	std	Y+1, r24	; 0x01
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	9a 81       	ldd	r25, Y+2	; 0x02
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	f1 f7       	brne	.-4      	; 0x4240 <main+0x142>
    4244:	9a 83       	std	Y+2, r25	; 0x02
    4246:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	uint8 Loc_uint8data;
//	uint8 Loc_uint8data1;
	HLED_Errorstate_Led_Init(&led1);
    4248:	86 e8       	ldi	r24, 0x86	; 134
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <HLED_Errorstate_Led_Init>
	MTWI_VidInitMaster(0);
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	0e 94 ff 06 	call	0xdfe	; 0xdfe <MTWI_VidInitMaster>
	HEEPROM_VidSendDataByte(0,0,100);
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	60 e0       	ldi	r22, 0x00	; 0
    425a:	44 e6       	ldi	r20, 0x64	; 100
    425c:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <HEEPROM_VidSendDataByte>
	Loc_uint8data=HEEPROM_VidReadDataByte(0,0);
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	60 e0       	ldi	r22, 0x00	; 0
    4264:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <HEEPROM_VidReadDataByte>
    4268:	8f 87       	std	Y+15, r24	; 0x0f
	//HEEPROM_VidSendDataByte(1,1,100);
	//Loc_uint8data1=HEEPROM_VidReadDataByte(1,1);
	while(1)
	{
		if(Loc_uint8data==10)
    426a:	8f 85       	ldd	r24, Y+15	; 0x0f
    426c:	8a 30       	cpi	r24, 0x0A	; 10
    426e:	e9 f3       	breq	.-6      	; 0x426a <main+0x16c>
			{

			}
			else
			{
				HLED_Errorstate_Led_On(&led1);
    4270:	86 e8       	ldi	r24, 0x86	; 134
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	0e 94 10 19 	call	0x3220	; 0x3220 <HLED_Errorstate_Led_On>
				HAL_VidHCLCD_4BitModeWriteString(Loc_uint8data);
    4278:	8f 85       	ldd	r24, Y+15	; 0x0f
    427a:	88 2f       	mov	r24, r24
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <HAL_VidHCLCD_4BitModeWriteString>
    4282:	f3 cf       	rjmp	.-26     	; 0x426a <main+0x16c>

00004284 <__udivmodsi4>:
    4284:	a1 e2       	ldi	r26, 0x21	; 33
    4286:	1a 2e       	mov	r1, r26
    4288:	aa 1b       	sub	r26, r26
    428a:	bb 1b       	sub	r27, r27
    428c:	fd 01       	movw	r30, r26
    428e:	0d c0       	rjmp	.+26     	; 0x42aa <__udivmodsi4_ep>

00004290 <__udivmodsi4_loop>:
    4290:	aa 1f       	adc	r26, r26
    4292:	bb 1f       	adc	r27, r27
    4294:	ee 1f       	adc	r30, r30
    4296:	ff 1f       	adc	r31, r31
    4298:	a2 17       	cp	r26, r18
    429a:	b3 07       	cpc	r27, r19
    429c:	e4 07       	cpc	r30, r20
    429e:	f5 07       	cpc	r31, r21
    42a0:	20 f0       	brcs	.+8      	; 0x42aa <__udivmodsi4_ep>
    42a2:	a2 1b       	sub	r26, r18
    42a4:	b3 0b       	sbc	r27, r19
    42a6:	e4 0b       	sbc	r30, r20
    42a8:	f5 0b       	sbc	r31, r21

000042aa <__udivmodsi4_ep>:
    42aa:	66 1f       	adc	r22, r22
    42ac:	77 1f       	adc	r23, r23
    42ae:	88 1f       	adc	r24, r24
    42b0:	99 1f       	adc	r25, r25
    42b2:	1a 94       	dec	r1
    42b4:	69 f7       	brne	.-38     	; 0x4290 <__udivmodsi4_loop>
    42b6:	60 95       	com	r22
    42b8:	70 95       	com	r23
    42ba:	80 95       	com	r24
    42bc:	90 95       	com	r25
    42be:	9b 01       	movw	r18, r22
    42c0:	ac 01       	movw	r20, r24
    42c2:	bd 01       	movw	r22, r26
    42c4:	cf 01       	movw	r24, r30
    42c6:	08 95       	ret

000042c8 <__prologue_saves__>:
    42c8:	2f 92       	push	r2
    42ca:	3f 92       	push	r3
    42cc:	4f 92       	push	r4
    42ce:	5f 92       	push	r5
    42d0:	6f 92       	push	r6
    42d2:	7f 92       	push	r7
    42d4:	8f 92       	push	r8
    42d6:	9f 92       	push	r9
    42d8:	af 92       	push	r10
    42da:	bf 92       	push	r11
    42dc:	cf 92       	push	r12
    42de:	df 92       	push	r13
    42e0:	ef 92       	push	r14
    42e2:	ff 92       	push	r15
    42e4:	0f 93       	push	r16
    42e6:	1f 93       	push	r17
    42e8:	cf 93       	push	r28
    42ea:	df 93       	push	r29
    42ec:	cd b7       	in	r28, 0x3d	; 61
    42ee:	de b7       	in	r29, 0x3e	; 62
    42f0:	ca 1b       	sub	r28, r26
    42f2:	db 0b       	sbc	r29, r27
    42f4:	0f b6       	in	r0, 0x3f	; 63
    42f6:	f8 94       	cli
    42f8:	de bf       	out	0x3e, r29	; 62
    42fa:	0f be       	out	0x3f, r0	; 63
    42fc:	cd bf       	out	0x3d, r28	; 61
    42fe:	09 94       	ijmp

00004300 <__epilogue_restores__>:
    4300:	2a 88       	ldd	r2, Y+18	; 0x12
    4302:	39 88       	ldd	r3, Y+17	; 0x11
    4304:	48 88       	ldd	r4, Y+16	; 0x10
    4306:	5f 84       	ldd	r5, Y+15	; 0x0f
    4308:	6e 84       	ldd	r6, Y+14	; 0x0e
    430a:	7d 84       	ldd	r7, Y+13	; 0x0d
    430c:	8c 84       	ldd	r8, Y+12	; 0x0c
    430e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4310:	aa 84       	ldd	r10, Y+10	; 0x0a
    4312:	b9 84       	ldd	r11, Y+9	; 0x09
    4314:	c8 84       	ldd	r12, Y+8	; 0x08
    4316:	df 80       	ldd	r13, Y+7	; 0x07
    4318:	ee 80       	ldd	r14, Y+6	; 0x06
    431a:	fd 80       	ldd	r15, Y+5	; 0x05
    431c:	0c 81       	ldd	r16, Y+4	; 0x04
    431e:	1b 81       	ldd	r17, Y+3	; 0x03
    4320:	aa 81       	ldd	r26, Y+2	; 0x02
    4322:	b9 81       	ldd	r27, Y+1	; 0x01
    4324:	ce 0f       	add	r28, r30
    4326:	d1 1d       	adc	r29, r1
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
    4332:	ed 01       	movw	r28, r26
    4334:	08 95       	ret

00004336 <_exit>:
    4336:	f8 94       	cli

00004338 <__stop_program>:
    4338:	ff cf       	rjmp	.-2      	; 0x4338 <__stop_program>
