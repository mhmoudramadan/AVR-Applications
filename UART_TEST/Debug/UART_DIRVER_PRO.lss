
UART_DIRVER_PRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00003cd8  00003d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800082  00800082  00003d8e  2**0
                  ALLOC
  3 .stab         000047d0  00000000  00000000  00003d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e61  00000000  00000000  00008560  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a3c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a501  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a671  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c2ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000df54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e341  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_1>
       8:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__vector_2>
       c:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__vector_3>
      10:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__vector_4>
      14:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_5>
      18:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_6>
      1c:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_7>
      20:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_8>
      24:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_9>
      28:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_10>
      2c:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__vector_13>
      38:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__vector_14>
      3c:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_15>
      40:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 56 1d 	call	0x3aac	; 0x3aac <main>
      8a:	0c 94 6a 1e 	jmp	0x3cd4	; 0x3cd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 1e 	jmp	0x3c9e	; 0x3c9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 1e 	jmp	0x3c9e	; 0x3c9e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_VidInit>:
#include"MUART_Private.h"
#include"MUART_Config.h"

void (*CALLBACK) (void);
 void MUART_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	 uint8 Loc_uint8TempRegister=0;
     b50:	19 82       	std	Y+1, r1	; 0x01
	 SET_BIT(Loc_uint8TempRegister,7);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	89 83       	std	Y+1, r24	; 0x01
	   /*Mode UART Select */
#if UART_SELECTMODE == UART_ASYNCHRONOUS
	 CLR_BIT(Loc_uint8TempRegister,6);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	8f 7b       	andi	r24, 0xBF	; 191
     b5c:	89 83       	std	Y+1, r24	; 0x01
#error"UART Mode Select Option Is Not Valid.."
#endif

	 /*UART Parity Mode Option CHECK*/
#if UART_PARITYCHECK_MODE   == PARTIYCHECK_DISABLED
	 CLR_BIT(Loc_uint8TempRegister,4);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	8f 7e       	andi	r24, 0xEF	; 239
     b62:	89 83       	std	Y+1, r24	; 0x01
	 CLR_BIT(Loc_uint8TempRegister,4);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	8f 7e       	andi	r24, 0xEF	; 239
     b68:	89 83       	std	Y+1, r24	; 0x01
#error"PARTIY Check Option Is Not Valid.."
#endif

	 /*STOP Bit Option*/
#if UART_STOPBIT == ONE_BIT
	 CLR_BIT(Loc_uint8TempRegister,3);
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	87 7f       	andi	r24, 0xF7	; 247
     b6e:	89 83       	std	Y+1, r24	; 0x01
#elif UART_NUMBEROFDATA_BIT==CHAR_7Bit
	 CLR_BIT(Loc_uint8TempRegister,1);
	 SET_BIT(Loc_uint8TempRegister,2);
	 CLR_BIT(UCSRB,2);
#elif UART_NUMBEROFDATA_BIT==CHAR_8Bit
	 SET_BIT(Loc_uint8TempRegister,1);
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	82 60       	ori	r24, 0x02	; 2
     b74:	89 83       	std	Y+1, r24	; 0x01
	 SET_BIT(Loc_uint8TempRegister,2);
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	84 60       	ori	r24, 0x04	; 4
     b7a:	89 83       	std	Y+1, r24	; 0x01
	 CLR_BIT(UCSRB,2);
     b7c:	aa e2       	ldi	r26, 0x2A	; 42
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	ea e2       	ldi	r30, 0x2A	; 42
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	8b 7f       	andi	r24, 0xFB	; 251
     b88:	8c 93       	st	X, r24
	 SET_BIT(Loc_uint8TempRegister,2);
	 SET_BIT(UCSRB,2);
#else
	 #error"Data Bit Option Is Not Valid.."
#endif
	 UCSRC=Loc_uint8TempRegister;
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	80 83       	st	Z, r24
	 /*Set BaudRate -->9600*/
	 UBRRL=UART_BAUDRATE;
     b92:	e9 e2       	ldi	r30, 0x29	; 41
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	87 e6       	ldi	r24, 0x67	; 103
     b98:	80 83       	st	Z, r24
	          /*Enable Receiver*/
	 SET_BIT(UCSRB,4);
     b9a:	aa e2       	ldi	r26, 0x2A	; 42
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ea e2       	ldi	r30, 0x2A	; 42
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 61       	ori	r24, 0x10	; 16
     ba6:	8c 93       	st	X, r24
	          /*Enable transmit*/
	 SET_BIT(UCSRB,3);
     ba8:	aa e2       	ldi	r26, 0x2A	; 42
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ea e2       	ldi	r30, 0x2A	; 42
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	88 60       	ori	r24, 0x08	; 8
     bb4:	8c 93       	st	X, r24
	          /*Enable Transmit TX Interrupt*/
	 SET_BIT(UCSRB,6);
     bb6:	aa e2       	ldi	r26, 0x2A	; 42
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	ea e2       	ldi	r30, 0x2A	; 42
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	80 64       	ori	r24, 0x40	; 64
     bc2:	8c 93       	st	X, r24
	          /*Enable Receiver RX Interrupt*/
	 SET_BIT(UCSRB,7);
     bc4:	aa e2       	ldi	r26, 0x2A	; 42
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	ea e2       	ldi	r30, 0x2A	; 42
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	80 68       	ori	r24, 0x80	; 128
     bd0:	8c 93       	st	X, r24
	          /*Data Register Interrupt Enable*/
	 SET_BIT(UCSRB,5);
     bd2:	aa e2       	ldi	r26, 0x2A	; 42
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ea e2       	ldi	r30, 0x2A	; 42
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 62       	ori	r24, 0x20	; 32
     bde:	8c 93       	st	X, r24

 }
     be0:	0f 90       	pop	r0
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	08 95       	ret

00000be8 <MUART_VidSendChar>:
 void MUART_VidSendChar(uint8 copy_uint8Char)
 {
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	0f 92       	push	r0
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	89 83       	std	Y+1, r24	; 0x01
	 while(GET_BIT(UCSRA,5==0));
     bf4:	eb e2       	ldi	r30, 0x2B	; 43
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	82 95       	swap	r24
     bfc:	86 95       	lsr	r24
     bfe:	87 70       	andi	r24, 0x07	; 7
     c00:	88 23       	and	r24, r24
     c02:	c1 f3       	breq	.-16     	; 0xbf4 <MUART_VidSendChar+0xc>
	 UDR=copy_uint8Char;
     c04:	ec e2       	ldi	r30, 0x2C	; 44
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	80 83       	st	Z, r24
 }
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <MUART_vidSendString>:
 void MUART_vidSendString(uint8 *copy_uint8String)
 {
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	00 d0       	rcall	.+0      	; 0xc1a <MUART_vidSendString+0x6>
     c1a:	0f 92       	push	r0
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	9b 83       	std	Y+3, r25	; 0x03
     c22:	8a 83       	std	Y+2, r24	; 0x02
	 uint8 Loc_uint8count=0;
     c24:	19 82       	std	Y+1, r1	; 0x01
     c26:	0e c0       	rjmp	.+28     	; 0xc44 <MUART_vidSendString+0x30>
	 while(copy_uint8String[Loc_uint8count]!='\0')
	 {
		MUART_VidSendChar(copy_uint8String[Loc_uint8count]);
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	9b 81       	ldd	r25, Y+3	; 0x03
     c32:	fc 01       	movw	r30, r24
     c34:	e2 0f       	add	r30, r18
     c36:	f3 1f       	adc	r31, r19
     c38:	80 81       	ld	r24, Z
     c3a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <MUART_VidSendChar>
		Loc_uint8count++;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	89 83       	std	Y+1, r24	; 0x01
	 UDR=copy_uint8Char;
 }
 void MUART_vidSendString(uint8 *copy_uint8String)
 {
	 uint8 Loc_uint8count=0;
	 while(copy_uint8String[Loc_uint8count]!='\0')
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	9b 81       	ldd	r25, Y+3	; 0x03
     c4e:	fc 01       	movw	r30, r24
     c50:	e2 0f       	add	r30, r18
     c52:	f3 1f       	adc	r31, r19
     c54:	80 81       	ld	r24, Z
     c56:	88 23       	and	r24, r24
     c58:	39 f7       	brne	.-50     	; 0xc28 <MUART_vidSendString+0x14>
	 {
		MUART_VidSendChar(copy_uint8String[Loc_uint8count]);
		Loc_uint8count++;
	 }
 }
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <MUART_uint8ReciverChar>:
 uint8 MUART_uint8ReciverChar(void)
 {
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
	 while(GET_BIT(UCSRA,7)==0);
     c6e:	eb e2       	ldi	r30, 0x2B	; 43
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	88 23       	and	r24, r24
     c76:	dc f7       	brge	.-10     	; 0xc6e <MUART_uint8ReciverChar+0x8>
	 return UDR;
     c78:	ec e2       	ldi	r30, 0x2C	; 44
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
 }
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <MUART_VidSetTXCallBack>:
 void MUART_VidSetTXCallBack(void(*PtrToFun)(void))
 {
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	00 d0       	rcall	.+0      	; 0xc8a <MUART_VidSetTXCallBack+0x6>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	90 93 84 00 	sts	0x0084, r25
     c9a:	80 93 83 00 	sts	0x0083, r24
 }
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <MUART_VidSetRXCallBack>:
 void MUART_VidSetRXCallBack(void(*PtrToFun)(void))
 {
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	00 d0       	rcall	.+0      	; 0xcae <MUART_VidSetRXCallBack+0x6>
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	90 93 84 00 	sts	0x0084, r25
     cbe:	80 93 83 00 	sts	0x0083, r24
 }
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <MUART_VidUSART_REG_SetCallBack>:
 void MUART_VidUSART_REG_SetCallBack(void(*PtrToFun)(void))
 {
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <MUART_VidUSART_REG_SetCallBack+0x6>
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	90 93 84 00 	sts	0x0084, r25
     ce2:	80 93 83 00 	sts	0x0083, r24
 }
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <__vector_15>:
  /*TX*/

 void __vector_15(void)   __attribute__((signal));
 void __vector_15(void)
 {
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2f 93       	push	r18
     cfc:	3f 93       	push	r19
     cfe:	4f 93       	push	r20
     d00:	5f 93       	push	r21
     d02:	6f 93       	push	r22
     d04:	7f 93       	push	r23
     d06:	8f 93       	push	r24
     d08:	9f 93       	push	r25
     d0a:	af 93       	push	r26
     d0c:	bf 93       	push	r27
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     d1a:	e0 91 83 00 	lds	r30, 0x0083
     d1e:	f0 91 84 00 	lds	r31, 0x0084
     d22:	09 95       	icall
 }
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	ff 91       	pop	r31
     d2a:	ef 91       	pop	r30
     d2c:	bf 91       	pop	r27
     d2e:	af 91       	pop	r26
     d30:	9f 91       	pop	r25
     d32:	8f 91       	pop	r24
     d34:	7f 91       	pop	r23
     d36:	6f 91       	pop	r22
     d38:	5f 91       	pop	r21
     d3a:	4f 91       	pop	r20
     d3c:	3f 91       	pop	r19
     d3e:	2f 91       	pop	r18
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	0f 90       	pop	r0
     d46:	1f 90       	pop	r1
     d48:	18 95       	reti

00000d4a <__vector_13>:
 /*RX*/
 void __vector_13(void)   __attribute__((signal));
 void __vector_13(void)
 {
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	2f 93       	push	r18
     d56:	3f 93       	push	r19
     d58:	4f 93       	push	r20
     d5a:	5f 93       	push	r21
     d5c:	6f 93       	push	r22
     d5e:	7f 93       	push	r23
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	af 93       	push	r26
     d66:	bf 93       	push	r27
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     d74:	e0 91 83 00 	lds	r30, 0x0083
     d78:	f0 91 84 00 	lds	r31, 0x0084
     d7c:	09 95       	icall
 }
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	7f 91       	pop	r23
     d90:	6f 91       	pop	r22
     d92:	5f 91       	pop	r21
     d94:	4f 91       	pop	r20
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	0f 90       	pop	r0
     da0:	1f 90       	pop	r1
     da2:	18 95       	reti

00000da4 <__vector_14>:
 /*UART DATA Register Empty*/
 void __vector_14(void)   __attribute__((signal));
 void __vector_14(void)
 {
     da4:	1f 92       	push	r1
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	0f 92       	push	r0
     dac:	11 24       	eor	r1, r1
     dae:	2f 93       	push	r18
     db0:	3f 93       	push	r19
     db2:	4f 93       	push	r20
     db4:	5f 93       	push	r21
     db6:	6f 93       	push	r22
     db8:	7f 93       	push	r23
     dba:	8f 93       	push	r24
     dbc:	9f 93       	push	r25
     dbe:	af 93       	push	r26
     dc0:	bf 93       	push	r27
     dc2:	ef 93       	push	r30
     dc4:	ff 93       	push	r31
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     dce:	e0 91 83 00 	lds	r30, 0x0083
     dd2:	f0 91 84 00 	lds	r31, 0x0084
     dd6:	09 95       	icall
 }
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	4f 91       	pop	r20
     df0:	3f 91       	pop	r19
     df2:	2f 91       	pop	r18
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <MTIMER2_VidInit>:
#include"MTIMER2_Config.h"


void (*MTIMER2_CALLBACK)(void);
void MTIMER2_VidInit(void)
{
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,6);
	/*OverFlow Interrupt Enable */
	SET_BIT(TIMSK,6);

#elif TIMER2SETMODE == TIMER2_FASTPWMMODE
	SET_BIT(TCCR2,6);
     e06:	a5 e4       	ldi	r26, 0x45	; 69
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e5 e4       	ldi	r30, 0x45	; 69
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 64       	ori	r24, 0x40	; 64
     e12:	8c 93       	st	X, r24
	SET_BIT(TCCR2,3);
     e14:	a5 e4       	ldi	r26, 0x45	; 69
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e5 e4       	ldi	r30, 0x45	; 69
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 60       	ori	r24, 0x08	; 8
     e20:	8c 93       	st	X, r24
  #if TIMER2_PWMMODE_OC2PINMODE==TIMER2_PWMMODE_NON_INVERTING
	CLR_BIT(TCCR2,4);
     e22:	a5 e4       	ldi	r26, 0x45	; 69
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e5 e4       	ldi	r30, 0x45	; 69
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8f 7e       	andi	r24, 0xEF	; 239
     e2e:	8c 93       	st	X, r24
	SET_BIT(TCCR2,5);
     e30:	a5 e4       	ldi	r26, 0x45	; 69
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e5 e4       	ldi	r30, 0x45	; 69
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 62       	ori	r24, 0x20	; 32
     e3c:	8c 93       	st	X, r24
#else
	#error"Timer2 Mode Options Is Not Valid.."
#endif

	              /*SET PRESCALER*/
	TCCR2&=0xF8;
     e3e:	a5 e4       	ldi	r26, 0x45	; 69
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e4       	ldi	r30, 0x45	; 69
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 7f       	andi	r24, 0xF8	; 248
     e4a:	8c 93       	st	X, r24
	TCCR2|=MTIMER2_SET_PRESCALER;
     e4c:	a5 e4       	ldi	r26, 0x45	; 69
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e5 e4       	ldi	r30, 0x45	; 69
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	85 60       	ori	r24, 0x05	; 5
     e58:	8c 93       	st	X, r24
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <MTIMER2_VidSetPreLoad>:
void MTIMER2_VidSetPreLoad(uint8 copy_uint8PreLoadValue)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	0f 92       	push	r0
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=copy_uint8PreLoadValue;
     e6c:	e4 e4       	ldi	r30, 0x44	; 68
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	80 83       	st	Z, r24
}
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <MTIMER2_VidSetCTCRegister>:
void MTIMER2_VidSetCTCRegister(uint8 copy_uint8CTCRegisteValue)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	0f 92       	push	r0
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	89 83       	std	Y+1, r24	; 0x01
	OCR2=copy_uint8CTCRegisteValue;
     e88:	e3 e4       	ldi	r30, 0x43	; 67
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 83       	st	Z, r24
}
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <MTIMER2_VidTIMER2_OVERFLOW_SetCallBack>:
void MTIMER2_VidTIMER2_OVERFLOW_SetCallBack(void (*PtrToFun)(void))
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <MTIMER2_VidTIMER2_OVERFLOW_SetCallBack+0x6>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
	MTIMER2_CALLBACK=PtrToFun;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	90 93 86 00 	sts	0x0086, r25
     eae:	80 93 85 00 	sts	0x0085, r24
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <MTIMER2_VidTIMER2_CTC_SetCallBack>:
void MTIMER2_VidTIMER2_CTC_SetCallBack(void (*PtrToFun)(void))
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <MTIMER2_VidTIMER2_CTC_SetCallBack+0x6>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
	MTIMER2_CALLBACK=PtrToFun;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	90 93 86 00 	sts	0x0086, r25
     ed2:	80 93 85 00 	sts	0x0085, r24
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <__vector_4>:
           /*CTC*/
void __vector_4(void)   __attribute__((signal));
void __vector_4(void)
{
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	MTIMER2_CALLBACK();
     f0a:	e0 91 85 00 	lds	r30, 0x0085
     f0e:	f0 91 86 00 	lds	r31, 0x0086
     f12:	09 95       	icall
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	7f 91       	pop	r23
     f26:	6f 91       	pop	r22
     f28:	5f 91       	pop	r21
     f2a:	4f 91       	pop	r20
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <__vector_5>:
         /*overflow */
void __vector_5(void)   __attribute__((signal));
void __vector_5(void)
{
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	MTIMER2_CALLBACK();
     f64:	e0 91 85 00 	lds	r30, 0x0085
     f68:	f0 91 86 00 	lds	r31, 0x0086
     f6c:	09 95       	icall
}
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	ff 91       	pop	r31
     f74:	ef 91       	pop	r30
     f76:	bf 91       	pop	r27
     f78:	af 91       	pop	r26
     f7a:	9f 91       	pop	r25
     f7c:	8f 91       	pop	r24
     f7e:	7f 91       	pop	r23
     f80:	6f 91       	pop	r22
     f82:	5f 91       	pop	r21
     f84:	4f 91       	pop	r20
     f86:	3f 91       	pop	r19
     f88:	2f 91       	pop	r18
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0
     f90:	1f 90       	pop	r1
     f92:	18 95       	reti

00000f94 <MTIMER1_VidInit>:


void (*MTIMER1_CALLBACK)(void);

void MTIMER1_VidInit(void)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
	/*Compare Match Enable Interrupt*/
	SET_BIT(TIMSK,4);
	SET_BIT(TIMSK,3);

#elif TIMER1SETMODE == TIMER1_NORMALMODE
	CLR_BIT(TCCR1A,0);
     f9c:	af e4       	ldi	r26, 0x4F	; 79
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ef e4       	ldi	r30, 0x4F	; 79
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8e 7f       	andi	r24, 0xFE	; 254
     fa8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
     faa:	af e4       	ldi	r26, 0x4F	; 79
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ef e4       	ldi	r30, 0x4F	; 79
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
     fb8:	ae e4       	ldi	r26, 0x4E	; 78
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ee e4       	ldi	r30, 0x4E	; 78
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	87 7f       	andi	r24, 0xF7	; 247
     fc4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
     fc6:	ae e4       	ldi	r26, 0x4E	; 78
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ee e4       	ldi	r30, 0x4E	; 78
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 7e       	andi	r24, 0xEF	; 239
     fd2:	8c 93       	st	X, r24
	/*OVERFLOW  Enable Interrupt */
	SET_BIT(TIMSK,2);
     fd4:	a9 e5       	ldi	r26, 0x59	; 89
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e9 e5       	ldi	r30, 0x59	; 89
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	84 60       	ori	r24, 0x04	; 4
     fe0:	8c 93       	st	X, r24
#else
#error "Timer 1 Options Is Not Valid."
#endif

/*********SET PRESCALER *********/
	TCCR1B&=0xF8;
     fe2:	ae e4       	ldi	r26, 0x4E	; 78
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ee e4       	ldi	r30, 0x4E	; 78
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	88 7f       	andi	r24, 0xF8	; 248
     fee:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SETPRESCALER;
     ff0:	ae e4       	ldi	r26, 0x4E	; 78
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee e4       	ldi	r30, 0x4E	; 78
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	83 60       	ori	r24, 0x03	; 3
     ffc:	8c 93       	st	X, r24
}
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <MTIMER1_VidInit_ICU>:
void MTIMER1_VidInit_ICU(void)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
    100c:	a9 e5       	ldi	r26, 0x59	; 89
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e9 e5       	ldi	r30, 0x59	; 89
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	80 62       	ori	r24, 0x20	; 32
    1018:	8c 93       	st	X, r24
	    /*Enable ICU Noise Canceler */
	SET_BIT(TCCR1B,7);
    101a:	ae e4       	ldi	r26, 0x4E	; 78
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ee e4       	ldi	r30, 0x4E	; 78
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 68       	ori	r24, 0x80	; 128
    1026:	8c 93       	st	X, r24
}
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <MTIMER1_VidICU_SelectEdge>:
void MTIMER1_VidICU_SelectEdge(uint8 copy_uint8SelectEgde)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <MTIMER1_VidICU_SelectEdge+0x6>
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_uint8SelectEgde)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3b 83       	std	Y+3, r19	; 0x03
    1044:	2a 83       	std	Y+2, r18	; 0x02
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	69 f0       	breq	.+26     	; 0x1068 <MTIMER1_VidICU_SelectEdge+0x3a>
    104e:	2a 81       	ldd	r18, Y+2	; 0x02
    1050:	3b 81       	ldd	r19, Y+3	; 0x03
    1052:	21 30       	cpi	r18, 0x01	; 1
    1054:	31 05       	cpc	r19, r1
    1056:	79 f4       	brne	.+30     	; 0x1076 <MTIMER1_VidICU_SelectEdge+0x48>
	{
	case ICU_RISING_EDGE:
	{
	     SET_BIT(TCCR1B,6);
    1058:	ae e4       	ldi	r26, 0x4E	; 78
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ee e4       	ldi	r30, 0x4E	; 78
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	80 64       	ori	r24, 0x40	; 64
    1064:	8c 93       	st	X, r24
    1066:	07 c0       	rjmp	.+14     	; 0x1076 <MTIMER1_VidICU_SelectEdge+0x48>
	     break;
	}
	case ICU_FALLING_EDGE:
	{
		CLR_BIT(TCCR1B,6);
    1068:	ae e4       	ldi	r26, 0x4E	; 78
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ee e4       	ldi	r30, 0x4E	; 78
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8f 7b       	andi	r24, 0xBF	; 191
    1074:	8c 93       	st	X, r24
		break;
	}

	}
}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <MTIMER1_VidSetPreLoad>:
void MTIMER1_VidSetPreLoad(uint16 copy_uint16PreLoadvalue)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <MTIMER1_VidSetPreLoad+0x6>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
	/*Normal mode data Register*/
	//uint16 TCNT1;
	TCNT1=copy_uint16PreLoadvalue;
    1090:	ec e4       	ldi	r30, 0x4C	; 76
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	91 83       	std	Z+1, r25	; 0x01
    109a:	80 83       	st	Z, r24
	/*TCNT1=TCNT1H;
	TCNT1|=TCNT1L<<8;
	TCNT1=copy_uint8PreLoadvalue;*/
}
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <MTIMER1_VidSetCTCRegister_CHB>:
void MTIMER1_VidSetCTCRegister_CHB(uint16 copy_uint16CTCValue)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <MTIMER1_VidSetCTCRegister_CHB+0x6>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=copy_uint16CTCValue;
    10b4:	e8 e4       	ldi	r30, 0x48	; 72
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	80 83       	st	Z, r24
	/*OutPut Compare match B option*/
	/*OCR1B=OCR1BH;
	OCR1B|=OCR1BL<<8;
	OCR1B=copy_uint16CTCValue;*/
}
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <MTIMER1_VidSetCTCRegister_CHA>:
void MTIMER1_VidSetCTCRegister_CHA(uint16 copy_uint16CTCValue)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <MTIMER1_VidSetCTCRegister_CHA+0x6>
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=copy_uint16CTCValue;
    10d8:	ea e4       	ldi	r30, 0x4A	; 74
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	91 83       	std	Z+1, r25	; 0x01
    10e2:	80 83       	st	Z, r24
	/*OutPut Compare match A option*/
	//OCR1A=copy_uint16CTCValue;
	/*OCR1A=OCR1AH;
		OCR1A|=OCR1AL<<8;
		OCR1A=copy_uint16CTCValue;*/
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <MTIMER1_VidSetCTCRegister_ICR1>:
void MTIMER1_VidSetCTCRegister_ICR1(uint16 copy_uint16CTCValue)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <MTIMER1_VidSetCTCRegister_ICR1+0x6>
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	9a 83       	std	Y+2, r25	; 0x02
    10fa:	89 83       	std	Y+1, r24	; 0x01
	ICR1=copy_uint16CTCValue;
    10fc:	e6 e4       	ldi	r30, 0x46	; 70
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	91 83       	std	Z+1, r25	; 0x01
    1106:	80 83       	st	Z, r24
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <MTIMER1_VidTimer1_OverFlow_SetCallBack>:
void MTIMER1_VidTimer1_OverFlow_SetCallBack(void (*PtrToFun)(void))
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <MTIMER1_VidTimer1_OverFlow_SetCallBack+0x6>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	90 93 88 00 	sts	0x0088, r25
    1128:	80 93 87 00 	sts	0x0087, r24
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <MTIMER1_VidTimer1_CTC_SetCallBack>:
void MTIMER1_VidTimer1_CTC_SetCallBack(void (*PtrToFun)(void))
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <MTIMER1_VidTimer1_CTC_SetCallBack+0x6>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	90 93 88 00 	sts	0x0088, r25
    114c:	80 93 87 00 	sts	0x0087, r24
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <MTIMER1_uint32Read_ICR1>:

uint32 MTIMER1_uint32Read_ICR1(void)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1162:	e6 e4       	ldi	r30, 0x46	; 70
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	91 81       	ldd	r25, Z+1	; 0x01
    116a:	cc 01       	movw	r24, r24
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	b0 e0       	ldi	r27, 0x00	; 0
}
    1170:	bc 01       	movw	r22, r24
    1172:	cd 01       	movw	r24, r26
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <MTIMER1_VidTimer1_ICU_SetCallBack>:
void MTIMER1_VidTimer1_ICU_SetCallBack(void(*PtrToFun)(void))
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <MTIMER1_VidTimer1_ICU_SetCallBack+0x6>
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	9a 83       	std	Y+2, r25	; 0x02
    1186:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	9a 81       	ldd	r25, Y+2	; 0x02
    118c:	90 93 88 00 	sts	0x0088, r25
    1190:	80 93 87 00 	sts	0x0087, r24
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <__vector_7>:
     /*Compare A*/
void __vector_7(void)  __attribute__((signal));
void __vector_7(void)
{
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	2f 93       	push	r18
    11aa:	3f 93       	push	r19
    11ac:	4f 93       	push	r20
    11ae:	5f 93       	push	r21
    11b0:	6f 93       	push	r22
    11b2:	7f 93       	push	r23
    11b4:	8f 93       	push	r24
    11b6:	9f 93       	push	r25
    11b8:	af 93       	push	r26
    11ba:	bf 93       	push	r27
    11bc:	ef 93       	push	r30
    11be:	ff 93       	push	r31
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    11c8:	e0 91 87 00 	lds	r30, 0x0087
    11cc:	f0 91 88 00 	lds	r31, 0x0088
    11d0:	09 95       	icall
}
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	bf 91       	pop	r27
    11dc:	af 91       	pop	r26
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	7f 91       	pop	r23
    11e4:	6f 91       	pop	r22
    11e6:	5f 91       	pop	r21
    11e8:	4f 91       	pop	r20
    11ea:	3f 91       	pop	r19
    11ec:	2f 91       	pop	r18
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	1f 90       	pop	r1
    11f6:	18 95       	reti

000011f8 <__vector_8>:
   /*Compare B*/
void __vector_8(void)  __attribute__((signal));
void __vector_8(void)
{
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    1222:	e0 91 87 00 	lds	r30, 0x0087
    1226:	f0 91 88 00 	lds	r31, 0x0088
    122a:	09 95       	icall
}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	ff 91       	pop	r31
    1232:	ef 91       	pop	r30
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	7f 91       	pop	r23
    123e:	6f 91       	pop	r22
    1240:	5f 91       	pop	r21
    1242:	4f 91       	pop	r20
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	0f 90       	pop	r0
    124e:	1f 90       	pop	r1
    1250:	18 95       	reti

00001252 <__vector_9>:
   /*OverFlow */
void __vector_9(void)  __attribute__((signal));
void __vector_9(void)
{
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    127c:	e0 91 87 00 	lds	r30, 0x0087
    1280:	f0 91 88 00 	lds	r31, 0x0088
    1284:	09 95       	icall
}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	ff 91       	pop	r31
    128c:	ef 91       	pop	r30
    128e:	bf 91       	pop	r27
    1290:	af 91       	pop	r26
    1292:	9f 91       	pop	r25
    1294:	8f 91       	pop	r24
    1296:	7f 91       	pop	r23
    1298:	6f 91       	pop	r22
    129a:	5f 91       	pop	r21
    129c:	4f 91       	pop	r20
    129e:	3f 91       	pop	r19
    12a0:	2f 91       	pop	r18
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <__vector_6>:
  /*ICU*/
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    12d6:	e0 91 87 00 	lds	r30, 0x0087
    12da:	f0 91 88 00 	lds	r31, 0x0088
    12de:	09 95       	icall
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	0f 90       	pop	r0
    1302:	1f 90       	pop	r1
    1304:	18 95       	reti

00001306 <MTIMER0_VidInit>:
#include"MTIMER0_Private.h"
#include"MTIMER0_Config.h"

void (*MTIMER0_CALLBACK)(void);
void MTIMER0_VidInit(void)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
	#else #error "OC0 PIN Is Not Valid.."
	#endif
	/*CTC Enable interrupt */
	SET_BIT(TIMSK,1);
#elif TIMER0_SETMODE == TIMER0_NORMALMODE
	CLR_BIT(TCCR0,3);
    130e:	a3 e5       	ldi	r26, 0x53	; 83
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e3 e5       	ldi	r30, 0x53	; 83
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	87 7f       	andi	r24, 0xF7	; 247
    131a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
    131c:	a3 e5       	ldi	r26, 0x53	; 83
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e3 e5       	ldi	r30, 0x53	; 83
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8f 7b       	andi	r24, 0xBF	; 191
    1328:	8c 93       	st	X, r24
	/*OVERFLOW  Enable interrupt */
	SET_BIT(TIMSK,0);
    132a:	a9 e5       	ldi	r26, 0x59	; 89
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e9 e5       	ldi	r30, 0x59	; 89
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	81 60       	ori	r24, 0x01	; 1
    1336:	8c 93       	st	X, r24

#else
	#error"TIMER0 MODE Is Not Valid.."
#endif
	/*Set PreScaler*/
	TCCR0&=0xF8;
    1338:	a3 e5       	ldi	r26, 0x53	; 83
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e3 e5       	ldi	r30, 0x53	; 83
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	88 7f       	andi	r24, 0xF8	; 248
    1344:	8c 93       	st	X, r24
	TCCR0|=TIMER0_SETPRESCALER;
    1346:	a3 e5       	ldi	r26, 0x53	; 83
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e3 e5       	ldi	r30, 0x53	; 83
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	84 60       	ori	r24, 0x04	; 4
    1352:	8c 93       	st	X, r24
}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <MTIMER0_uint32Read>:
uint8 MTIMER0_uint32Read(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1362:	e2 e5       	ldi	r30, 0x52	; 82
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
}
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <MTIMER0_VidSetPreLoad>:
void MTIMER0_VidSetPreLoad(uint8 copy_uint8PreLoad)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	0f 92       	push	r0
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=copy_uint8PreLoad;
    137a:	e2 e5       	ldi	r30, 0x52	; 82
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	80 83       	st	Z, r24
}
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <MTIMER0_VidSetCTCRegister>:
void MTIMER0_VidSetCTCRegister(uint8 copy_uint8CTCValue)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	0f 92       	push	r0
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	89 83       	std	Y+1, r24	; 0x01
	OCR0=copy_uint8CTCValue;
    1396:	ec e5       	ldi	r30, 0x5C	; 92
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	80 83       	st	Z, r24
}
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <MTIMER0_VidTimerOverFlow_SetCallBack>:
void MTIMER0_VidTimerOverFlow_SetCallBack(void (*PtrToFun)(void))
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <MTIMER0_VidTimerOverFlow_SetCallBack+0x6>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_CALLBACK=PtrToFun;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	9a 81       	ldd	r25, Y+2	; 0x02
    13b8:	90 93 8a 00 	sts	0x008A, r25
    13bc:	80 93 89 00 	sts	0x0089, r24
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <MTIMER0_VidTimerCTC_SetCallBack>:
void MTIMER0_VidTimerCTC_SetCallBack(void (*PtrToFun)(void))
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <MTIMER0_VidTimerCTC_SetCallBack+0x6>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_CALLBACK=PtrToFun;
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	90 93 8a 00 	sts	0x008A, r25
    13e0:	80 93 89 00 	sts	0x0089, r24
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <__vector_10>:

/*CTC*/
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_CALLBACK();
    1418:	e0 91 89 00 	lds	r30, 0x0089
    141c:	f0 91 8a 00 	lds	r31, 0x008A
    1420:	09 95       	icall
}
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	7f 91       	pop	r23
    1434:	6f 91       	pop	r22
    1436:	5f 91       	pop	r21
    1438:	4f 91       	pop	r20
    143a:	3f 91       	pop	r19
    143c:	2f 91       	pop	r18
    143e:	0f 90       	pop	r0
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	0f 90       	pop	r0
    1444:	1f 90       	pop	r1
    1446:	18 95       	reti

00001448 <__vector_11>:
/*OVERFLOW*/
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    1448:	1f 92       	push	r1
    144a:	0f 92       	push	r0
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	0f 92       	push	r0
    1450:	11 24       	eor	r1, r1
    1452:	2f 93       	push	r18
    1454:	3f 93       	push	r19
    1456:	4f 93       	push	r20
    1458:	5f 93       	push	r21
    145a:	6f 93       	push	r22
    145c:	7f 93       	push	r23
    145e:	8f 93       	push	r24
    1460:	9f 93       	push	r25
    1462:	af 93       	push	r26
    1464:	bf 93       	push	r27
    1466:	ef 93       	push	r30
    1468:	ff 93       	push	r31
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_CALLBACK();
    1472:	e0 91 89 00 	lds	r30, 0x0089
    1476:	f0 91 8a 00 	lds	r31, 0x008A
    147a:	09 95       	icall
}
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	ff 91       	pop	r31
    1482:	ef 91       	pop	r30
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	7f 91       	pop	r23
    148e:	6f 91       	pop	r22
    1490:	5f 91       	pop	r21
    1492:	4f 91       	pop	r20
    1494:	3f 91       	pop	r19
    1496:	2f 91       	pop	r18
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	0f 90       	pop	r0
    149e:	1f 90       	pop	r1
    14a0:	18 95       	reti

000014a2 <MGIE_Enable>:

#include"../../LIB/LSTD_TYPES.h"
#include"../../LIB/LBIT_MATH.h"
#include"MGIE_Private.h"
void MGIE_Enable(void)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    14aa:	af e5       	ldi	r26, 0x5F	; 95
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ef e5       	ldi	r30, 0x5F	; 95
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	80 68       	ori	r24, 0x80	; 128
    14b6:	8c 93       	st	X, r24
}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <MGIE_Disable>:
void MGIE_Disable(void)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    14c6:	af e5       	ldi	r26, 0x5F	; 95
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ef e5       	ldi	r30, 0x5F	; 95
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 77       	andi	r24, 0x7F	; 127
    14d2:	8c 93       	st	X, r24
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <MEXTI_VidInitEXTI0>:
#include "MEXTI_Config.h"

void (*CALLBACK)(void);

void MEXTI_VidInitEXTI0(void)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
	/*Select sense control*/
#if SET_SENCECONTROL_EXTI0==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,1);
	SET_BIT(MCUCR,0);
#elif SET_SENCECONTROL_EXTI0==MEXTI_FALLING_EDGE
	SET_BIT(MCUCR,1);
    14e2:	a5 e5       	ldi	r26, 0x55	; 85
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e5 e5       	ldi	r30, 0x55	; 85
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	82 60       	ori	r24, 0x02	; 2
    14ee:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);
    14f0:	a5 e5       	ldi	r26, 0x55	; 85
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e5 e5       	ldi	r30, 0x55	; 85
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8e 7f       	andi	r24, 0xFE	; 254
    14fc:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI0 is not valid"

#endif
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
    14fe:	ab e5       	ldi	r26, 0x5B	; 91
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	eb e5       	ldi	r30, 0x5B	; 91
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 64       	ori	r24, 0x40	; 64
    150a:	8c 93       	st	X, r24

}
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <MEXTI_VidInitEXTI1>:
void MEXTI_VidInitEXTI1(void)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control */
#if SET_SENCECONTROL_EXTI1==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,3);
    151a:	a5 e5       	ldi	r26, 0x55	; 85
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e5 e5       	ldi	r30, 0x55	; 85
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	88 60       	ori	r24, 0x08	; 8
    1526:	8c 93       	st	X, r24
	SET_BIT(MCUCR,2);
    1528:	a5 e5       	ldi	r26, 0x55	; 85
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e5 e5       	ldi	r30, 0x55	; 85
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	84 60       	ori	r24, 0x04	; 4
    1534:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI1 is not valid"

#endif
	/* Enable EXTI 1*/
	SET_BIT(GICR,7);
    1536:	ab e5       	ldi	r26, 0x5B	; 91
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	eb e5       	ldi	r30, 0x5B	; 91
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	8c 93       	st	X, r24
}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <MEXTI_VidInitEXTI2>:
void MEXTI_VidInitEXTI2(void)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control */
	#if SET_SENCECONTROL_EXTI2==MEXTI_RISING_EDGE
		SET_BIT(MCUCSR,6);
	#elif SET_SENCECONTROL_EXTI2==MEXTI_FALLING_EDGE
		CLR_BIT(MCUCSR,6);
    1552:	a4 e5       	ldi	r26, 0x54	; 84
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e4 e5       	ldi	r30, 0x54	; 84
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8f 7b       	andi	r24, 0xBF	; 191
    155e:	8c 93       	st	X, r24
	#else
	#error "Sense Control option of EXTI2 is not valid"

	#endif
		/* Enable EXTI 2*/
		SET_BIT(GICR,5);
    1560:	ab e5       	ldi	r26, 0x5B	; 91
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	eb e5       	ldi	r30, 0x5B	; 91
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 62       	ori	r24, 0x20	; 32
    156c:	8c 93       	st	X, r24

}
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <MEXTI_VidSenseControlSelect>:
void MEXTI_VidSenseControlSelect(uint8 copy_uint8EXTI_ID,uint8 copy_uint8EXTI_SenseControl)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <MEXTI_VidSenseControlSelect+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <MEXTI_VidSenseControlSelect+0x8>
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_uint8EXTI_ID)
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	3c 83       	std	Y+4, r19	; 0x04
    158c:	2b 83       	std	Y+3, r18	; 0x03
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	91 05       	cpc	r25, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <MEXTI_VidSenseControlSelect+0x26>
    1598:	54 c0       	rjmp	.+168    	; 0x1642 <MEXTI_VidSenseControlSelect+0xce>
    159a:	2b 81       	ldd	r18, Y+3	; 0x03
    159c:	3c 81       	ldd	r19, Y+4	; 0x04
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <MEXTI_VidSenseControlSelect+0x32>
    15a4:	96 c0       	rjmp	.+300    	; 0x16d2 <MEXTI_VidSenseControlSelect+0x15e>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <MEXTI_VidSenseControlSelect+0x3c>
    15ae:	a6 c0       	rjmp	.+332    	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
	{
	case EXTI0:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	88 23       	and	r24, r24
    15b4:	79 f4       	brne	.+30     	; 0x15d4 <MEXTI_VidSenseControlSelect+0x60>
		{
			SET_BIT(MCUCR,1);
    15b6:	a5 e5       	ldi	r26, 0x55	; 85
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e5 e5       	ldi	r30, 0x55	; 85
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	82 60       	ori	r24, 0x02	; 2
    15c2:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    15c4:	a5 e5       	ldi	r26, 0x55	; 85
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e5 e5       	ldi	r30, 0x55	; 85
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	81 60       	ori	r24, 0x01	; 1
    15d0:	8c 93       	st	X, r24
    15d2:	94 c0       	rjmp	.+296    	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	79 f4       	brne	.+30     	; 0x15f8 <MEXTI_VidSenseControlSelect+0x84>
		{
			SET_BIT(MCUCR,1);
    15da:	a5 e5       	ldi	r26, 0x55	; 85
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e5 e5       	ldi	r30, 0x55	; 85
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	82 60       	ori	r24, 0x02	; 2
    15e6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    15e8:	a5 e5       	ldi	r26, 0x55	; 85
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e5 e5       	ldi	r30, 0x55	; 85
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8e 7f       	andi	r24, 0xFE	; 254
    15f4:	8c 93       	st	X, r24
    15f6:	82 c0       	rjmp	.+260    	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	79 f4       	brne	.+30     	; 0x161c <MEXTI_VidSenseControlSelect+0xa8>
		{
			CLR_BIT(MCUCR,1);
    15fe:	a5 e5       	ldi	r26, 0x55	; 85
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e5       	ldi	r30, 0x55	; 85
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8d 7f       	andi	r24, 0xFD	; 253
    160a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    160c:	a5 e5       	ldi	r26, 0x55	; 85
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e5 e5       	ldi	r30, 0x55	; 85
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	81 60       	ori	r24, 0x01	; 1
    1618:	8c 93       	st	X, r24
    161a:	70 c0       	rjmp	.+224    	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	09 f0       	breq	.+2      	; 0x1624 <MEXTI_VidSenseControlSelect+0xb0>
    1622:	6c c0       	rjmp	.+216    	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,1);
    1624:	a5 e5       	ldi	r26, 0x55	; 85
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e5       	ldi	r30, 0x55	; 85
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8d 7f       	andi	r24, 0xFD	; 253
    1630:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    1632:	a5 e5       	ldi	r26, 0x55	; 85
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e5       	ldi	r30, 0x55	; 85
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8e 7f       	andi	r24, 0xFE	; 254
    163e:	8c 93       	st	X, r24
    1640:	5d c0       	rjmp	.+186    	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI1:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	88 23       	and	r24, r24
    1646:	79 f4       	brne	.+30     	; 0x1666 <MEXTI_VidSenseControlSelect+0xf2>
		{
			SET_BIT(MCUCR,3);
    1648:	a5 e5       	ldi	r26, 0x55	; 85
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e5 e5       	ldi	r30, 0x55	; 85
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	88 60       	ori	r24, 0x08	; 8
    1654:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    1656:	a5 e5       	ldi	r26, 0x55	; 85
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e5 e5       	ldi	r30, 0x55	; 85
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	84 60       	ori	r24, 0x04	; 4
    1662:	8c 93       	st	X, r24
    1664:	4b c0       	rjmp	.+150    	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	79 f4       	brne	.+30     	; 0x168a <MEXTI_VidSenseControlSelect+0x116>
		{
			SET_BIT(MCUCR,3);
    166c:	a5 e5       	ldi	r26, 0x55	; 85
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e5 e5       	ldi	r30, 0x55	; 85
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	88 60       	ori	r24, 0x08	; 8
    1678:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    167a:	a5 e5       	ldi	r26, 0x55	; 85
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e5 e5       	ldi	r30, 0x55	; 85
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	8b 7f       	andi	r24, 0xFB	; 251
    1686:	8c 93       	st	X, r24
    1688:	39 c0       	rjmp	.+114    	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	79 f4       	brne	.+30     	; 0x16ae <MEXTI_VidSenseControlSelect+0x13a>
		{
			CLR_BIT(MCUCR,3);
    1690:	a5 e5       	ldi	r26, 0x55	; 85
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e5 e5       	ldi	r30, 0x55	; 85
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	87 7f       	andi	r24, 0xF7	; 247
    169c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    169e:	a5 e5       	ldi	r26, 0x55	; 85
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e5 e5       	ldi	r30, 0x55	; 85
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	84 60       	ori	r24, 0x04	; 4
    16aa:	8c 93       	st	X, r24
    16ac:	27 c0       	rjmp	.+78     	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	21 f5       	brne	.+72     	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,3);
    16b4:	a5 e5       	ldi	r26, 0x55	; 85
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e5 e5       	ldi	r30, 0x55	; 85
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	87 7f       	andi	r24, 0xF7	; 247
    16c0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    16c2:	a5 e5       	ldi	r26, 0x55	; 85
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e5 e5       	ldi	r30, 0x55	; 85
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	8b 7f       	andi	r24, 0xFB	; 251
    16ce:	8c 93       	st	X, r24
    16d0:	15 c0       	rjmp	.+42     	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI2:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	88 23       	and	r24, r24
    16d6:	41 f4       	brne	.+16     	; 0x16e8 <MEXTI_VidSenseControlSelect+0x174>
		{
			SET_BIT(MCUCSR,6);
    16d8:	a4 e5       	ldi	r26, 0x54	; 84
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e4 e5       	ldi	r30, 0x54	; 84
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	80 64       	ori	r24, 0x40	; 64
    16e4:	8c 93       	st	X, r24
    16e6:	0a c0       	rjmp	.+20     	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	39 f4       	brne	.+14     	; 0x16fc <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCSR,6);		}
    16ee:	a4 e5       	ldi	r26, 0x54	; 84
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e4 e5       	ldi	r30, 0x54	; 84
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8f 7b       	andi	r24, 0xBF	; 191
    16fa:	8c 93       	st	X, r24
			/*do nothing*/
		}
		break;
	}

}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <MEXTI0_VidSetCallBack>:
void MEXTI0_VidSetCallBack(void (*PtrToFun)(void))
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <MEXTI0_VidSetCallBack+0x6>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	90 93 84 00 	sts	0x0084, r25
    1720:	80 93 83 00 	sts	0x0083, r24
}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <MEXTI1_VidSetCallBack>:
void MEXTI1_VidSetCallBack(void (*PtrToFun)(void))
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	00 d0       	rcall	.+0      	; 0x1734 <MEXTI1_VidSetCallBack+0x6>
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	90 93 84 00 	sts	0x0084, r25
    1744:	80 93 83 00 	sts	0x0083, r24
}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <MEXTI2_VidSetCallBack>:
void MEXTI2_VidSetCallBack(void (*PtrToFun)(void))
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	00 d0       	rcall	.+0      	; 0x1758 <MEXTI2_VidSetCallBack+0x6>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	90 93 84 00 	sts	0x0084, r25
    1768:	80 93 83 00 	sts	0x0083, r24
}
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <__vector_1>:
/*EXTI0*/
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	2f 93       	push	r18
    1782:	3f 93       	push	r19
    1784:	4f 93       	push	r20
    1786:	5f 93       	push	r21
    1788:	6f 93       	push	r22
    178a:	7f 93       	push	r23
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	af 93       	push	r26
    1792:	bf 93       	push	r27
    1794:	ef 93       	push	r30
    1796:	ff 93       	push	r31
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    17a0:	e0 91 83 00 	lds	r30, 0x0083
    17a4:	f0 91 84 00 	lds	r31, 0x0084
    17a8:	09 95       	icall
}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	ff 91       	pop	r31
    17b0:	ef 91       	pop	r30
    17b2:	bf 91       	pop	r27
    17b4:	af 91       	pop	r26
    17b6:	9f 91       	pop	r25
    17b8:	8f 91       	pop	r24
    17ba:	7f 91       	pop	r23
    17bc:	6f 91       	pop	r22
    17be:	5f 91       	pop	r21
    17c0:	4f 91       	pop	r20
    17c2:	3f 91       	pop	r19
    17c4:	2f 91       	pop	r18
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	0f 90       	pop	r0
    17cc:	1f 90       	pop	r1
    17ce:	18 95       	reti

000017d0 <__vector_2>:
/*EXTI 1 */
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
    17da:	2f 93       	push	r18
    17dc:	3f 93       	push	r19
    17de:	4f 93       	push	r20
    17e0:	5f 93       	push	r21
    17e2:	6f 93       	push	r22
    17e4:	7f 93       	push	r23
    17e6:	8f 93       	push	r24
    17e8:	9f 93       	push	r25
    17ea:	af 93       	push	r26
    17ec:	bf 93       	push	r27
    17ee:	ef 93       	push	r30
    17f0:	ff 93       	push	r31
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    17fa:	e0 91 83 00 	lds	r30, 0x0083
    17fe:	f0 91 84 00 	lds	r31, 0x0084
    1802:	09 95       	icall
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	ff 91       	pop	r31
    180a:	ef 91       	pop	r30
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	0f 90       	pop	r0
    1826:	1f 90       	pop	r1
    1828:	18 95       	reti

0000182a <__vector_3>:
/*EXTI2*/
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    182a:	1f 92       	push	r1
    182c:	0f 92       	push	r0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	0f 92       	push	r0
    1832:	11 24       	eor	r1, r1
    1834:	2f 93       	push	r18
    1836:	3f 93       	push	r19
    1838:	4f 93       	push	r20
    183a:	5f 93       	push	r21
    183c:	6f 93       	push	r22
    183e:	7f 93       	push	r23
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	af 93       	push	r26
    1846:	bf 93       	push	r27
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1854:	e0 91 83 00 	lds	r30, 0x0083
    1858:	f0 91 84 00 	lds	r31, 0x0084
    185c:	09 95       	icall
}
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	7f 91       	pop	r23
    1870:	6f 91       	pop	r22
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	1f 90       	pop	r1
    1882:	18 95       	reti

00001884 <MDIO_Errorstate_SetPinDirection>:

/********* Set pin direction************/

ErrorState MDIO_Errorstate_SetPinDirection (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinDirection)

{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	28 97       	sbiw	r28, 0x08	; 8
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	8a 83       	std	Y+2, r24	; 0x02
    189a:	6b 83       	std	Y+3, r22	; 0x03
    189c:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01

	if (copy_uint8PinNumber<8)
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	88 30       	cpi	r24, 0x08	; 8
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <MDIO_Errorstate_SetPinDirection+0x26>
    18a8:	f1 c0       	rjmp	.+482    	; 0x1a8c <MDIO_Errorstate_SetPinDirection+0x208>
	{
		if(copy_uint8PinDirection==PIN_OUTPUT)
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <MDIO_Errorstate_SetPinDirection+0x2e>
    18b0:	71 c0       	rjmp	.+226    	; 0x1994 <MDIO_Errorstate_SetPinDirection+0x110>
		{
			switch(copy_uint8PortID)
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	38 87       	std	Y+8, r19	; 0x08
    18ba:	2f 83       	std	Y+7, r18	; 0x07
    18bc:	8f 81       	ldd	r24, Y+7	; 0x07
    18be:	98 85       	ldd	r25, Y+8	; 0x08
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	91 05       	cpc	r25, r1
    18c4:	49 f1       	breq	.+82     	; 0x1918 <MDIO_Errorstate_SetPinDirection+0x94>
    18c6:	2f 81       	ldd	r18, Y+7	; 0x07
    18c8:	38 85       	ldd	r19, Y+8	; 0x08
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	2c f4       	brge	.+10     	; 0x18da <MDIO_Errorstate_SetPinDirection+0x56>
    18d0:	8f 81       	ldd	r24, Y+7	; 0x07
    18d2:	98 85       	ldd	r25, Y+8	; 0x08
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	61 f0       	breq	.+24     	; 0x18f0 <MDIO_Errorstate_SetPinDirection+0x6c>
    18d8:	5b c0       	rjmp	.+182    	; 0x1990 <MDIO_Errorstate_SetPinDirection+0x10c>
    18da:	2f 81       	ldd	r18, Y+7	; 0x07
    18dc:	38 85       	ldd	r19, Y+8	; 0x08
    18de:	22 30       	cpi	r18, 0x02	; 2
    18e0:	31 05       	cpc	r19, r1
    18e2:	71 f1       	breq	.+92     	; 0x1940 <MDIO_Errorstate_SetPinDirection+0xbc>
    18e4:	8f 81       	ldd	r24, Y+7	; 0x07
    18e6:	98 85       	ldd	r25, Y+8	; 0x08
    18e8:	83 30       	cpi	r24, 0x03	; 3
    18ea:	91 05       	cpc	r25, r1
    18ec:	e9 f1       	breq	.+122    	; 0x1968 <MDIO_Errorstate_SetPinDirection+0xe4>
    18ee:	50 c0       	rjmp	.+160    	; 0x1990 <MDIO_Errorstate_SetPinDirection+0x10c>
			{
			case MDIO_PORTA:
				SET_BIT(DDRA,copy_uint8PinNumber);
    18f0:	aa e3       	ldi	r26, 0x3A	; 58
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ea e3       	ldi	r30, 0x3A	; 58
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <MDIO_Errorstate_SetPinDirection+0x8a>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <MDIO_Errorstate_SetPinDirection+0x86>
    1912:	84 2b       	or	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	bb c0       	rjmp	.+374    	; 0x1a8e <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				SET_BIT(DDRB,copy_uint8PinNumber);
    1918:	a7 e3       	ldi	r26, 0x37	; 55
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e7 e3       	ldi	r30, 0x37	; 55
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <MDIO_Errorstate_SetPinDirection+0xb2>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <MDIO_Errorstate_SetPinDirection+0xae>
    193a:	84 2b       	or	r24, r20
    193c:	8c 93       	st	X, r24
    193e:	a7 c0       	rjmp	.+334    	; 0x1a8e <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				SET_BIT(DDRC,copy_uint8PinNumber);
    1940:	a4 e3       	ldi	r26, 0x34	; 52
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e4 e3       	ldi	r30, 0x34	; 52
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	48 2f       	mov	r20, r24
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <MDIO_Errorstate_SetPinDirection+0xda>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <MDIO_Errorstate_SetPinDirection+0xd6>
    1962:	84 2b       	or	r24, r20
    1964:	8c 93       	st	X, r24
    1966:	93 c0       	rjmp	.+294    	; 0x1a8e <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				SET_BIT(DDRD,copy_uint8PinNumber);
    1968:	a1 e3       	ldi	r26, 0x31	; 49
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e1 e3       	ldi	r30, 0x31	; 49
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	48 2f       	mov	r20, r24
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 2e       	mov	r0, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <MDIO_Errorstate_SetPinDirection+0x102>
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	0a 94       	dec	r0
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <MDIO_Errorstate_SetPinDirection+0xfe>
    198a:	84 2b       	or	r24, r20
    198c:	8c 93       	st	X, r24
    198e:	7f c0       	rjmp	.+254    	; 0x1a8e <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    1990:	19 82       	std	Y+1, r1	; 0x01
    1992:	7d c0       	rjmp	.+250    	; 0x1a8e <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			}
		}

		else if(copy_uint8PinDirection==PIN_INPUT)
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	88 23       	and	r24, r24
    1998:	09 f0       	breq	.+2      	; 0x199c <MDIO_Errorstate_SetPinDirection+0x118>
    199a:	76 c0       	rjmp	.+236    	; 0x1a88 <MDIO_Errorstate_SetPinDirection+0x204>
		{
			switch(copy_uint8PortID)
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	3e 83       	std	Y+6, r19	; 0x06
    19a4:	2d 83       	std	Y+5, r18	; 0x05
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	91 05       	cpc	r25, r1
    19ae:	59 f1       	breq	.+86     	; 0x1a06 <MDIO_Errorstate_SetPinDirection+0x182>
    19b0:	2d 81       	ldd	r18, Y+5	; 0x05
    19b2:	3e 81       	ldd	r19, Y+6	; 0x06
    19b4:	22 30       	cpi	r18, 0x02	; 2
    19b6:	31 05       	cpc	r19, r1
    19b8:	2c f4       	brge	.+10     	; 0x19c4 <MDIO_Errorstate_SetPinDirection+0x140>
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	69 f0       	breq	.+26     	; 0x19dc <MDIO_Errorstate_SetPinDirection+0x158>
    19c2:	60 c0       	rjmp	.+192    	; 0x1a84 <MDIO_Errorstate_SetPinDirection+0x200>
    19c4:	2d 81       	ldd	r18, Y+5	; 0x05
    19c6:	3e 81       	ldd	r19, Y+6	; 0x06
    19c8:	22 30       	cpi	r18, 0x02	; 2
    19ca:	31 05       	cpc	r19, r1
    19cc:	89 f1       	breq	.+98     	; 0x1a30 <MDIO_Errorstate_SetPinDirection+0x1ac>
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	83 30       	cpi	r24, 0x03	; 3
    19d4:	91 05       	cpc	r25, r1
    19d6:	09 f4       	brne	.+2      	; 0x19da <MDIO_Errorstate_SetPinDirection+0x156>
    19d8:	40 c0       	rjmp	.+128    	; 0x1a5a <MDIO_Errorstate_SetPinDirection+0x1d6>
    19da:	54 c0       	rjmp	.+168    	; 0x1a84 <MDIO_Errorstate_SetPinDirection+0x200>
			{
			case MDIO_PORTA:
				CLR_BIT(DDRA,copy_uint8PinNumber);
    19dc:	aa e3       	ldi	r26, 0x3A	; 58
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	ea e3       	ldi	r30, 0x3A	; 58
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	48 2f       	mov	r20, r24
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	02 2e       	mov	r0, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <MDIO_Errorstate_SetPinDirection+0x176>
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	0a 94       	dec	r0
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <MDIO_Errorstate_SetPinDirection+0x172>
    19fe:	80 95       	com	r24
    1a00:	84 23       	and	r24, r20
    1a02:	8c 93       	st	X, r24
    1a04:	44 c0       	rjmp	.+136    	; 0x1a8e <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				CLR_BIT(DDRB,copy_uint8PinNumber);
    1a06:	a7 e3       	ldi	r26, 0x37	; 55
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e7 e3       	ldi	r30, 0x37	; 55
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	48 2f       	mov	r20, r24
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	02 2e       	mov	r0, r18
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <MDIO_Errorstate_SetPinDirection+0x1a0>
    1a20:	88 0f       	add	r24, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	0a 94       	dec	r0
    1a26:	e2 f7       	brpl	.-8      	; 0x1a20 <MDIO_Errorstate_SetPinDirection+0x19c>
    1a28:	80 95       	com	r24
    1a2a:	84 23       	and	r24, r20
    1a2c:	8c 93       	st	X, r24
    1a2e:	2f c0       	rjmp	.+94     	; 0x1a8e <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				CLR_BIT(DDRC,copy_uint8PinNumber);
    1a30:	a4 e3       	ldi	r26, 0x34	; 52
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e4 e3       	ldi	r30, 0x34	; 52
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <MDIO_Errorstate_SetPinDirection+0x1ca>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <MDIO_Errorstate_SetPinDirection+0x1c6>
    1a52:	80 95       	com	r24
    1a54:	84 23       	and	r24, r20
    1a56:	8c 93       	st	X, r24
    1a58:	1a c0       	rjmp	.+52     	; 0x1a8e <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				CLR_BIT(DDRD,copy_uint8PinNumber);
    1a5a:	a1 e3       	ldi	r26, 0x31	; 49
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e1 e3       	ldi	r30, 0x31	; 49
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	48 2f       	mov	r20, r24
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 2e       	mov	r0, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <MDIO_Errorstate_SetPinDirection+0x1f4>
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	0a 94       	dec	r0
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <MDIO_Errorstate_SetPinDirection+0x1f0>
    1a7c:	80 95       	com	r24
    1a7e:	84 23       	and	r24, r20
    1a80:	8c 93       	st	X, r24
    1a82:	05 c0       	rjmp	.+10     	; 0x1a8e <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    1a84:	19 82       	std	Y+1, r1	; 0x01
    1a86:	03 c0       	rjmp	.+6      	; 0x1a8e <MDIO_Errorstate_SetPinDirection+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    1a88:	19 82       	std	Y+1, r1	; 0x01
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <MDIO_Errorstate_SetPinDirection+0x20a>
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    1a8c:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state ;
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a90:	28 96       	adiw	r28, 0x08	; 8
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <MDIO_Errorstate_SetPinValue>:

/********* Set pin value************/
ErrorState MDIO_Errorstate_SetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinValue)
{
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	28 97       	sbiw	r28, 0x08	; 8
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
    1ab8:	6b 83       	std	Y+3, r22	; 0x03
    1aba:	4c 83       	std	Y+4, r20	; 0x04
	{
		ErrorState loc_Errorstate_Error_state = OK;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	89 83       	std	Y+1, r24	; 0x01

		if (copy_uint8PinNumber<8)
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	88 30       	cpi	r24, 0x08	; 8
    1ac4:	08 f0       	brcs	.+2      	; 0x1ac8 <MDIO_Errorstate_SetPinValue+0x26>
    1ac6:	f1 c0       	rjmp	.+482    	; 0x1caa <MDIO_Errorstate_SetPinValue+0x208>
		{
			if(copy_uint8PinValue==PIN_HIGH)
    1ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <MDIO_Errorstate_SetPinValue+0x2e>
    1ace:	71 c0       	rjmp	.+226    	; 0x1bb2 <MDIO_Errorstate_SetPinValue+0x110>
			{
				switch(copy_uint8PortID)
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	38 87       	std	Y+8, r19	; 0x08
    1ad8:	2f 83       	std	Y+7, r18	; 0x07
    1ada:	8f 81       	ldd	r24, Y+7	; 0x07
    1adc:	98 85       	ldd	r25, Y+8	; 0x08
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	49 f1       	breq	.+82     	; 0x1b36 <MDIO_Errorstate_SetPinValue+0x94>
    1ae4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ae6:	38 85       	ldd	r19, Y+8	; 0x08
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <MDIO_Errorstate_SetPinValue+0x56>
    1aee:	8f 81       	ldd	r24, Y+7	; 0x07
    1af0:	98 85       	ldd	r25, Y+8	; 0x08
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	61 f0       	breq	.+24     	; 0x1b0e <MDIO_Errorstate_SetPinValue+0x6c>
    1af6:	5b c0       	rjmp	.+182    	; 0x1bae <MDIO_Errorstate_SetPinValue+0x10c>
    1af8:	2f 81       	ldd	r18, Y+7	; 0x07
    1afa:	38 85       	ldd	r19, Y+8	; 0x08
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	71 f1       	breq	.+92     	; 0x1b5e <MDIO_Errorstate_SetPinValue+0xbc>
    1b02:	8f 81       	ldd	r24, Y+7	; 0x07
    1b04:	98 85       	ldd	r25, Y+8	; 0x08
    1b06:	83 30       	cpi	r24, 0x03	; 3
    1b08:	91 05       	cpc	r25, r1
    1b0a:	e9 f1       	breq	.+122    	; 0x1b86 <MDIO_Errorstate_SetPinValue+0xe4>
    1b0c:	50 c0       	rjmp	.+160    	; 0x1bae <MDIO_Errorstate_SetPinValue+0x10c>
				{
				case MDIO_PORTA:
					SET_BIT(PORTA,copy_uint8PinNumber);
    1b0e:	ab e3       	ldi	r26, 0x3B	; 59
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	eb e3       	ldi	r30, 0x3B	; 59
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <MDIO_Errorstate_SetPinValue+0x8a>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <MDIO_Errorstate_SetPinValue+0x86>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24
    1b34:	bb c0       	rjmp	.+374    	; 0x1cac <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					SET_BIT(PORTB,copy_uint8PinNumber);
    1b36:	a8 e3       	ldi	r26, 0x38	; 56
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e8 e3       	ldi	r30, 0x38	; 56
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <MDIO_Errorstate_SetPinValue+0xb2>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <MDIO_Errorstate_SetPinValue+0xae>
    1b58:	84 2b       	or	r24, r20
    1b5a:	8c 93       	st	X, r24
    1b5c:	a7 c0       	rjmp	.+334    	; 0x1cac <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					SET_BIT(PORTC,copy_uint8PinNumber);
    1b5e:	a5 e3       	ldi	r26, 0x35	; 53
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e5 e3       	ldi	r30, 0x35	; 53
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <MDIO_Errorstate_SetPinValue+0xda>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <MDIO_Errorstate_SetPinValue+0xd6>
    1b80:	84 2b       	or	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	93 c0       	rjmp	.+294    	; 0x1cac <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					SET_BIT(PORTD,copy_uint8PinNumber);
    1b86:	a2 e3       	ldi	r26, 0x32	; 50
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e2 e3       	ldi	r30, 0x32	; 50
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <MDIO_Errorstate_SetPinValue+0x102>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <MDIO_Errorstate_SetPinValue+0xfe>
    1ba8:	84 2b       	or	r24, r20
    1baa:	8c 93       	st	X, r24
    1bac:	7f c0       	rjmp	.+254    	; 0x1cac <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    1bae:	19 82       	std	Y+1, r1	; 0x01
    1bb0:	7d c0       	rjmp	.+250    	; 0x1cac <MDIO_Errorstate_SetPinValue+0x20a>

					break;
				}
			}

			else if(copy_uint8PinValue==PIN_LOW)
    1bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <MDIO_Errorstate_SetPinValue+0x118>
    1bb8:	76 c0       	rjmp	.+236    	; 0x1ca6 <MDIO_Errorstate_SetPinValue+0x204>
			{
				switch(copy_uint8PortID)
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	3e 83       	std	Y+6, r19	; 0x06
    1bc2:	2d 83       	std	Y+5, r18	; 0x05
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	91 05       	cpc	r25, r1
    1bcc:	59 f1       	breq	.+86     	; 0x1c24 <MDIO_Errorstate_SetPinValue+0x182>
    1bce:	2d 81       	ldd	r18, Y+5	; 0x05
    1bd0:	3e 81       	ldd	r19, Y+6	; 0x06
    1bd2:	22 30       	cpi	r18, 0x02	; 2
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <MDIO_Errorstate_SetPinValue+0x140>
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f0       	breq	.+26     	; 0x1bfa <MDIO_Errorstate_SetPinValue+0x158>
    1be0:	60 c0       	rjmp	.+192    	; 0x1ca2 <MDIO_Errorstate_SetPinValue+0x200>
    1be2:	2d 81       	ldd	r18, Y+5	; 0x05
    1be4:	3e 81       	ldd	r19, Y+6	; 0x06
    1be6:	22 30       	cpi	r18, 0x02	; 2
    1be8:	31 05       	cpc	r19, r1
    1bea:	89 f1       	breq	.+98     	; 0x1c4e <MDIO_Errorstate_SetPinValue+0x1ac>
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	83 30       	cpi	r24, 0x03	; 3
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <MDIO_Errorstate_SetPinValue+0x156>
    1bf6:	40 c0       	rjmp	.+128    	; 0x1c78 <MDIO_Errorstate_SetPinValue+0x1d6>
    1bf8:	54 c0       	rjmp	.+168    	; 0x1ca2 <MDIO_Errorstate_SetPinValue+0x200>
				{
				case MDIO_PORTA:
					CLR_BIT(PORTA,copy_uint8PinNumber);
    1bfa:	ab e3       	ldi	r26, 0x3B	; 59
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	eb e3       	ldi	r30, 0x3B	; 59
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <MDIO_Errorstate_SetPinValue+0x176>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <MDIO_Errorstate_SetPinValue+0x172>
    1c1c:	80 95       	com	r24
    1c1e:	84 23       	and	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	44 c0       	rjmp	.+136    	; 0x1cac <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					CLR_BIT(PORTB,copy_uint8PinNumber);
    1c24:	a8 e3       	ldi	r26, 0x38	; 56
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e8 e3       	ldi	r30, 0x38	; 56
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <MDIO_Errorstate_SetPinValue+0x1a0>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <MDIO_Errorstate_SetPinValue+0x19c>
    1c46:	80 95       	com	r24
    1c48:	84 23       	and	r24, r20
    1c4a:	8c 93       	st	X, r24
    1c4c:	2f c0       	rjmp	.+94     	; 0x1cac <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					CLR_BIT(PORTC,copy_uint8PinNumber);
    1c4e:	a5 e3       	ldi	r26, 0x35	; 53
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e5 e3       	ldi	r30, 0x35	; 53
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	48 2f       	mov	r20, r24
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	02 2e       	mov	r0, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <MDIO_Errorstate_SetPinValue+0x1ca>
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	0a 94       	dec	r0
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <MDIO_Errorstate_SetPinValue+0x1c6>
    1c70:	80 95       	com	r24
    1c72:	84 23       	and	r24, r20
    1c74:	8c 93       	st	X, r24
    1c76:	1a c0       	rjmp	.+52     	; 0x1cac <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					CLR_BIT(PORTD,copy_uint8PinNumber);
    1c78:	a2 e3       	ldi	r26, 0x32	; 50
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e2 e3       	ldi	r30, 0x32	; 50
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <MDIO_Errorstate_SetPinValue+0x1f4>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <MDIO_Errorstate_SetPinValue+0x1f0>
    1c9a:	80 95       	com	r24
    1c9c:	84 23       	and	r24, r20
    1c9e:	8c 93       	st	X, r24
    1ca0:	05 c0       	rjmp	.+10     	; 0x1cac <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    1ca2:	19 82       	std	Y+1, r1	; 0x01
    1ca4:	03 c0       	rjmp	.+6      	; 0x1cac <MDIO_Errorstate_SetPinValue+0x20a>
				}
			}
			else
			{
				loc_Errorstate_Error_state=NOK;
    1ca6:	19 82       	std	Y+1, r1	; 0x01
    1ca8:	01 c0       	rjmp	.+2      	; 0x1cac <MDIO_Errorstate_SetPinValue+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    1caa:	19 82       	std	Y+1, r1	; 0x01
		}
		return loc_Errorstate_Error_state ;
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1cae:	28 96       	adiw	r28, 0x08	; 8
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <MDIO_Errorstate_GetPinValue>:


/********* get pin value************/
ErrorState MDIO_Errorstate_GetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 *puint8PinValue)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	27 97       	sbiw	r28, 0x07	; 7
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	8a 83       	std	Y+2, r24	; 0x02
    1cd6:	6b 83       	std	Y+3, r22	; 0x03
    1cd8:	5d 83       	std	Y+5, r21	; 0x05
    1cda:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	89 83       	std	Y+1, r24	; 0x01
	if (copy_uint8PinNumber<8)
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	88 30       	cpi	r24, 0x08	; 8
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <MDIO_Errorstate_GetPinValue+0x28>
    1ce6:	73 c0       	rjmp	.+230    	; 0x1dce <MDIO_Errorstate_GetPinValue+0x10e>
	{
		switch(copy_uint8PortID)
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	3f 83       	std	Y+7, r19	; 0x07
    1cf0:	2e 83       	std	Y+6, r18	; 0x06
    1cf2:	4e 81       	ldd	r20, Y+6	; 0x06
    1cf4:	5f 81       	ldd	r21, Y+7	; 0x07
    1cf6:	41 30       	cpi	r20, 0x01	; 1
    1cf8:	51 05       	cpc	r21, r1
    1cfa:	59 f1       	breq	.+86     	; 0x1d52 <MDIO_Errorstate_GetPinValue+0x92>
    1cfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfe:	9f 81       	ldd	r25, Y+7	; 0x07
    1d00:	82 30       	cpi	r24, 0x02	; 2
    1d02:	91 05       	cpc	r25, r1
    1d04:	34 f4       	brge	.+12     	; 0x1d12 <MDIO_Errorstate_GetPinValue+0x52>
    1d06:	2e 81       	ldd	r18, Y+6	; 0x06
    1d08:	3f 81       	ldd	r19, Y+7	; 0x07
    1d0a:	21 15       	cp	r18, r1
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	69 f0       	breq	.+26     	; 0x1d2a <MDIO_Errorstate_GetPinValue+0x6a>
    1d10:	5c c0       	rjmp	.+184    	; 0x1dca <MDIO_Errorstate_GetPinValue+0x10a>
    1d12:	4e 81       	ldd	r20, Y+6	; 0x06
    1d14:	5f 81       	ldd	r21, Y+7	; 0x07
    1d16:	42 30       	cpi	r20, 0x02	; 2
    1d18:	51 05       	cpc	r21, r1
    1d1a:	79 f1       	breq	.+94     	; 0x1d7a <MDIO_Errorstate_GetPinValue+0xba>
    1d1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d20:	83 30       	cpi	r24, 0x03	; 3
    1d22:	91 05       	cpc	r25, r1
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <MDIO_Errorstate_GetPinValue+0x68>
    1d26:	3d c0       	rjmp	.+122    	; 0x1da2 <MDIO_Errorstate_GetPinValue+0xe2>
    1d28:	50 c0       	rjmp	.+160    	; 0x1dca <MDIO_Errorstate_GetPinValue+0x10a>
		{
		case MDIO_PORTA:
			*puint8PinValue= GET_BIT(PINA,copy_uint8PinNumber);
    1d2a:	e9 e3       	ldi	r30, 0x39	; 57
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	88 2f       	mov	r24, r24
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	a9 01       	movw	r20, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <MDIO_Errorstate_GetPinValue+0x82>
    1d3e:	55 95       	asr	r21
    1d40:	47 95       	ror	r20
    1d42:	8a 95       	dec	r24
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <MDIO_Errorstate_GetPinValue+0x7e>
    1d46:	ca 01       	movw	r24, r20
    1d48:	81 70       	andi	r24, 0x01	; 1
    1d4a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d4c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d4e:	80 83       	st	Z, r24
    1d50:	3f c0       	rjmp	.+126    	; 0x1dd0 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTB:
			*puint8PinValue=GET_BIT(PINB,copy_uint8PinNumber);
    1d52:	e6 e3       	ldi	r30, 0x36	; 54
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a9 01       	movw	r20, r18
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <MDIO_Errorstate_GetPinValue+0xaa>
    1d66:	55 95       	asr	r21
    1d68:	47 95       	ror	r20
    1d6a:	8a 95       	dec	r24
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <MDIO_Errorstate_GetPinValue+0xa6>
    1d6e:	ca 01       	movw	r24, r20
    1d70:	81 70       	andi	r24, 0x01	; 1
    1d72:	ec 81       	ldd	r30, Y+4	; 0x04
    1d74:	fd 81       	ldd	r31, Y+5	; 0x05
    1d76:	80 83       	st	Z, r24
    1d78:	2b c0       	rjmp	.+86     	; 0x1dd0 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTC:
			*puint8PinValue=GET_BIT(PINC,copy_uint8PinNumber);
    1d7a:	e3 e3       	ldi	r30, 0x33	; 51
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a9 01       	movw	r20, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <MDIO_Errorstate_GetPinValue+0xd2>
    1d8e:	55 95       	asr	r21
    1d90:	47 95       	ror	r20
    1d92:	8a 95       	dec	r24
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <MDIO_Errorstate_GetPinValue+0xce>
    1d96:	ca 01       	movw	r24, r20
    1d98:	81 70       	andi	r24, 0x01	; 1
    1d9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d9e:	80 83       	st	Z, r24
    1da0:	17 c0       	rjmp	.+46     	; 0x1dd0 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTD:
			*puint8PinValue=GET_BIT(PIND,copy_uint8PinNumber);
    1da2:	e0 e3       	ldi	r30, 0x30	; 48
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a9 01       	movw	r20, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <MDIO_Errorstate_GetPinValue+0xfa>
    1db6:	55 95       	asr	r21
    1db8:	47 95       	ror	r20
    1dba:	8a 95       	dec	r24
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <MDIO_Errorstate_GetPinValue+0xf6>
    1dbe:	ca 01       	movw	r24, r20
    1dc0:	81 70       	andi	r24, 0x01	; 1
    1dc2:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc4:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc6:	80 83       	st	Z, r24
    1dc8:	03 c0       	rjmp	.+6      	; 0x1dd0 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    1dca:	19 82       	std	Y+1, r1	; 0x01
    1dcc:	01 c0       	rjmp	.+2      	; 0x1dd0 <MDIO_Errorstate_GetPinValue+0x110>

		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    1dce:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd2:	27 96       	adiw	r28, 0x07	; 7
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <MDIO_Errorstate_SetPortDirection>:

/********* set port direction & value************/
ErrorState MDIO_Errorstate_SetPortDirection (uint8 copy_uint8PortID , uint8 copy_uint8PortDirection)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <MDIO_Errorstate_SetPortDirection+0x6>
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <MDIO_Errorstate_SetPortDirection+0x8>
    1dec:	0f 92       	push	r0
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	8a 83       	std	Y+2, r24	; 0x02
    1df4:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	89 83       	std	Y+1, r24	; 0x01

	if((copy_uint8PortDirection== PORT_OUTPUT) ||(copy_uint8PortDirection==PORT_INPUT))
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	8f 3f       	cpi	r24, 0xFF	; 255
    1dfe:	19 f0       	breq	.+6      	; 0x1e06 <MDIO_Errorstate_SetPortDirection+0x22>
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	88 23       	and	r24, r24
    1e04:	a9 f5       	brne	.+106    	; 0x1e70 <MDIO_Errorstate_SetPortDirection+0x8c>
	{
		switch(copy_uint8PortID)
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	3d 83       	std	Y+5, r19	; 0x05
    1e0e:	2c 83       	std	Y+4, r18	; 0x04
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	9d 81       	ldd	r25, Y+5	; 0x05
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	91 05       	cpc	r25, r1
    1e18:	d1 f0       	breq	.+52     	; 0x1e4e <MDIO_Errorstate_SetPortDirection+0x6a>
    1e1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e1e:	22 30       	cpi	r18, 0x02	; 2
    1e20:	31 05       	cpc	r19, r1
    1e22:	2c f4       	brge	.+10     	; 0x1e2e <MDIO_Errorstate_SetPortDirection+0x4a>
    1e24:	8c 81       	ldd	r24, Y+4	; 0x04
    1e26:	9d 81       	ldd	r25, Y+5	; 0x05
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	61 f0       	breq	.+24     	; 0x1e44 <MDIO_Errorstate_SetPortDirection+0x60>
    1e2c:	1f c0       	rjmp	.+62     	; 0x1e6c <MDIO_Errorstate_SetPortDirection+0x88>
    1e2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e30:	3d 81       	ldd	r19, Y+5	; 0x05
    1e32:	22 30       	cpi	r18, 0x02	; 2
    1e34:	31 05       	cpc	r19, r1
    1e36:	81 f0       	breq	.+32     	; 0x1e58 <MDIO_Errorstate_SetPortDirection+0x74>
    1e38:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3c:	83 30       	cpi	r24, 0x03	; 3
    1e3e:	91 05       	cpc	r25, r1
    1e40:	81 f0       	breq	.+32     	; 0x1e62 <MDIO_Errorstate_SetPortDirection+0x7e>
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <MDIO_Errorstate_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortDirection;
    1e44:	ea e3       	ldi	r30, 0x3A	; 58
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	80 83       	st	Z, r24
    1e4c:	12 c0       	rjmp	.+36     	; 0x1e72 <MDIO_Errorstate_SetPortDirection+0x8e>

			break;
		case MDIO_PORTB:
			DDRB=copy_uint8PortDirection;
    1e4e:	e7 e3       	ldi	r30, 0x37	; 55
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	80 83       	st	Z, r24
    1e56:	0d c0       	rjmp	.+26     	; 0x1e72 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=copy_uint8PortDirection;
    1e58:	e4 e3       	ldi	r30, 0x34	; 52
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	80 83       	st	Z, r24
    1e60:	08 c0       	rjmp	.+16     	; 0x1e72 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=copy_uint8PortDirection;
    1e62:	e1 e3       	ldi	r30, 0x31	; 49
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	80 83       	st	Z, r24
    1e6a:	03 c0       	rjmp	.+6      	; 0x1e72 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    1e6c:	19 82       	std	Y+1, r1	; 0x01
    1e6e:	01 c0       	rjmp	.+2      	; 0x1e72 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    1e70:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <MDIO_Errorstate_SetPortValue>:

/*************** set port value ***********/
ErrorState MDIO_Errorstate_SetPortValue (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <MDIO_Errorstate_SetPortValue+0x6>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <MDIO_Errorstate_SetPortValue+0x8>
    1e8c:	0f 92       	push	r0
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	8a 83       	std	Y+2, r24	; 0x02
    1e94:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	89 83       	std	Y+1, r24	; 0x01

	if(copy_uint8PortValue<=PORT_HIGH)
	{
		switch(copy_uint8PortID)
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	3d 83       	std	Y+5, r19	; 0x05
    1ea2:	2c 83       	std	Y+4, r18	; 0x04
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	91 05       	cpc	r25, r1
    1eac:	d1 f0       	breq	.+52     	; 0x1ee2 <MDIO_Errorstate_SetPortValue+0x5e>
    1eae:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb2:	22 30       	cpi	r18, 0x02	; 2
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <MDIO_Errorstate_SetPortValue+0x3e>
    1eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eba:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	61 f0       	breq	.+24     	; 0x1ed8 <MDIO_Errorstate_SetPortValue+0x54>
    1ec0:	1f c0       	rjmp	.+62     	; 0x1f00 <MDIO_Errorstate_SetPortValue+0x7c>
    1ec2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec6:	22 30       	cpi	r18, 0x02	; 2
    1ec8:	31 05       	cpc	r19, r1
    1eca:	81 f0       	breq	.+32     	; 0x1eec <MDIO_Errorstate_SetPortValue+0x68>
    1ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ece:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed0:	83 30       	cpi	r24, 0x03	; 3
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	81 f0       	breq	.+32     	; 0x1ef6 <MDIO_Errorstate_SetPortValue+0x72>
    1ed6:	14 c0       	rjmp	.+40     	; 0x1f00 <MDIO_Errorstate_SetPortValue+0x7c>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortValue;
    1ed8:	ea e3       	ldi	r30, 0x3A	; 58
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	80 83       	st	Z, r24
    1ee0:	10 c0       	rjmp	.+32     	; 0x1f02 <MDIO_Errorstate_SetPortValue+0x7e>

			break;
		case MDIO_PORTB:
			PORTB=copy_uint8PortValue;
    1ee2:	e8 e3       	ldi	r30, 0x38	; 56
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	80 83       	st	Z, r24
    1eea:	0b c0       	rjmp	.+22     	; 0x1f02 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTC:
			PORTC=copy_uint8PortValue;
    1eec:	e5 e3       	ldi	r30, 0x35	; 53
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	80 83       	st	Z, r24
    1ef4:	06 c0       	rjmp	.+12     	; 0x1f02 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTD:
			PORTD=copy_uint8PortValue;
    1ef6:	e2 e3       	ldi	r30, 0x32	; 50
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	80 83       	st	Z, r24
    1efe:	01 c0       	rjmp	.+2      	; 0x1f02 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    1f00:	19 82       	std	Y+1, r1	; 0x01
	}
		else
		{
			loc_Errorstate_Error_state=NOK;
		}
		return loc_Errorstate_Error_state;
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <MDIO_Errorstate_Set4MostBits>:

ErrorState MDIO_Errorstate_Set4MostBits (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <MDIO_Errorstate_Set4MostBits+0x6>
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <MDIO_Errorstate_Set4MostBits+0x8>
    1f1c:	0f 92       	push	r0
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	8a 83       	std	Y+2, r24	; 0x02
    1f24:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState Loc_Errorstate_Error_state = OK;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_uint8PortID)
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	3d 83       	std	Y+5, r19	; 0x05
    1f32:	2c 83       	std	Y+4, r18	; 0x04
    1f34:	8c 81       	ldd	r24, Y+4	; 0x04
    1f36:	9d 81       	ldd	r25, Y+5	; 0x05
    1f38:	81 30       	cpi	r24, 0x01	; 1
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	29 f1       	breq	.+74     	; 0x1f88 <MDIO_Errorstate_Set4MostBits+0x74>
    1f3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f40:	3d 81       	ldd	r19, Y+5	; 0x05
    1f42:	22 30       	cpi	r18, 0x02	; 2
    1f44:	31 05       	cpc	r19, r1
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <MDIO_Errorstate_Set4MostBits+0x3e>
    1f48:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	61 f0       	breq	.+24     	; 0x1f68 <MDIO_Errorstate_Set4MostBits+0x54>
    1f50:	4b c0       	rjmp	.+150    	; 0x1fe8 <MDIO_Errorstate_Set4MostBits+0xd4>
    1f52:	2c 81       	ldd	r18, Y+4	; 0x04
    1f54:	3d 81       	ldd	r19, Y+5	; 0x05
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 05       	cpc	r19, r1
    1f5a:	31 f1       	breq	.+76     	; 0x1fa8 <MDIO_Errorstate_Set4MostBits+0x94>
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	83 30       	cpi	r24, 0x03	; 3
    1f62:	91 05       	cpc	r25, r1
    1f64:	89 f1       	breq	.+98     	; 0x1fc8 <MDIO_Errorstate_Set4MostBits+0xb4>
    1f66:	40 c0       	rjmp	.+128    	; 0x1fe8 <MDIO_Errorstate_Set4MostBits+0xd4>
			{
			case MDIO_PORTA:
				PORTA&=0x0F;
    1f68:	ab e3       	ldi	r26, 0x3B	; 59
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	eb e3       	ldi	r30, 0x3B	; 59
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	8f 70       	andi	r24, 0x0F	; 15
    1f74:	8c 93       	st	X, r24
				PORTA|=copy_uint8PortValue;
    1f76:	ab e3       	ldi	r26, 0x3B	; 59
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	eb e3       	ldi	r30, 0x3B	; 59
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	90 81       	ld	r25, Z
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	89 2b       	or	r24, r25
    1f84:	8c 93       	st	X, r24
    1f86:	31 c0       	rjmp	.+98     	; 0x1fea <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTB:
				PORTB&=0x0F;
    1f88:	a8 e3       	ldi	r26, 0x38	; 56
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e8 e3       	ldi	r30, 0x38	; 56
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	8f 70       	andi	r24, 0x0F	; 15
    1f94:	8c 93       	st	X, r24
				PORTB|=copy_uint8PortValue;
    1f96:	a8 e3       	ldi	r26, 0x38	; 56
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e8 e3       	ldi	r30, 0x38	; 56
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	90 81       	ld	r25, Z
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	89 2b       	or	r24, r25
    1fa4:	8c 93       	st	X, r24
    1fa6:	21 c0       	rjmp	.+66     	; 0x1fea <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTC:
				PORTC&=0x0F;
    1fa8:	a5 e3       	ldi	r26, 0x35	; 53
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e5 e3       	ldi	r30, 0x35	; 53
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8f 70       	andi	r24, 0x0F	; 15
    1fb4:	8c 93       	st	X, r24
				PORTC|=copy_uint8PortValue;
    1fb6:	a5 e3       	ldi	r26, 0x35	; 53
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e5 e3       	ldi	r30, 0x35	; 53
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	90 81       	ld	r25, Z
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	89 2b       	or	r24, r25
    1fc4:	8c 93       	st	X, r24
    1fc6:	11 c0       	rjmp	.+34     	; 0x1fea <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTD:
				PORTD&=0x0F;
    1fc8:	a2 e3       	ldi	r26, 0x32	; 50
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e2 e3       	ldi	r30, 0x32	; 50
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	8f 70       	andi	r24, 0x0F	; 15
    1fd4:	8c 93       	st	X, r24
				PORTD|=copy_uint8PortValue;
    1fd6:	a2 e3       	ldi	r26, 0x32	; 50
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e2 e3       	ldi	r30, 0x32	; 50
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	90 81       	ld	r25, Z
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	89 2b       	or	r24, r25
    1fe4:	8c 93       	st	X, r24
    1fe6:	01 c0       	rjmp	.+2      	; 0x1fea <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			default :
				Loc_Errorstate_Error_state=NOK;
    1fe8:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
	return Loc_Errorstate_Error_state;
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <MADC_VidSingleConversion_Init>:
#include"MADC_Config.h"

void (*MADC_CALLBACK)(void);

void MADC_VidSingleConversion_Init(void)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	/* 1-Select Reference Volt*/
#if MADC_SET_REFERENCVOLT == MADC_Vref_AVCC
	SET_BIT(ADMUX,6);
    2004:	a7 e2       	ldi	r26, 0x27	; 39
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e7 e2       	ldi	r30, 0x27	; 39
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	80 64       	ori	r24, 0x40	; 64
    2010:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    2012:	a7 e2       	ldi	r26, 0x27	; 39
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e7 e2       	ldi	r30, 0x27	; 39
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	8f 77       	andi	r24, 0x7F	; 127
    201e:	8c 93       	st	X, r24
#else
#error"Reference Volt Option Is Not Valid.."
#endif
	/*  2-Select Left Or Right Adjustment Result*/
#if MADC_SET_ADJUSTRESULT==MADC_RIGHT_ADJUST
	SET_BIT(ADMUX,5);
    2020:	a7 e2       	ldi	r26, 0x27	; 39
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e7 e2       	ldi	r30, 0x27	; 39
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	80 62       	ori	r24, 0x20	; 32
    202c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,5);
#else
	#error"Adjustment Result Is Not Valid.. "
#endif
	/*  3-Select ADC PreScaler*/
	ADCSRA&=0xF8;
    202e:	a6 e2       	ldi	r26, 0x26	; 38
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e6 e2       	ldi	r30, 0x26	; 38
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	88 7f       	andi	r24, 0xF8	; 248
    203a:	8c 93       	st	X, r24
	ADCSRA|=ADC_SET_PRESCALER;
    203c:	a6 e2       	ldi	r26, 0x26	; 38
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e6 e2       	ldi	r30, 0x26	; 38
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	87 60       	ori	r24, 0x07	; 7
    2048:	8c 93       	st	X, r24
	 /* 4-Enable ADC peripheral*/
	SET_BIT(ADCSRA,7);
    204a:	a6 e2       	ldi	r26, 0x26	; 38
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e6 e2       	ldi	r30, 0x26	; 38
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	80 68       	ori	r24, 0x80	; 128
    2056:	8c 93       	st	X, r24
}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <MADC_VidAutoTrigger_Init>:

void MADC_VidAutoTrigger_Init(void)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
	/*1-Auto trigger Enable*/
	SET_BIT(ADCSRA,5);
    2066:	a6 e2       	ldi	r26, 0x26	; 38
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e6 e2       	ldi	r30, 0x26	; 38
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	80 62       	ori	r24, 0x20	; 32
    2072:	8c 93       	st	X, r24
	 /*2-ADC_Auto_Trigger_Source*/
#if MADC_SET_AUTO_TRIGGER_SOURCE ==MADC_FREERUNNING

	 SFIOR&=0x1F;
    2074:	a0 e5       	ldi	r26, 0x50	; 80
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e0 e5       	ldi	r30, 0x50	; 80
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	8f 71       	andi	r24, 0x1F	; 31
    2080:	8c 93       	st	X, r24
	SFIOR|=MADC_FREERUNNING;
    2082:	a0 e5       	ldi	r26, 0x50	; 80
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e0 e5       	ldi	r30, 0x50	; 80
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	8c 93       	st	X, r24
#else
#error "Auto Trigger Source Is Not Valid.."
#endif
}
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <MADC_VidInterrupt_Enable>:

void MADC_VidInterrupt_Enable(void)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
 /* 1-Set ADC Interrupt Enable */
	SET_BIT(ADCSRA,3);
    209c:	a6 e2       	ldi	r26, 0x26	; 38
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e6 e2       	ldi	r30, 0x26	; 38
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	88 60       	ori	r24, 0x08	; 8
    20a8:	8c 93       	st	X, r24
}
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <MADC_VidADCStartSingleConversion>:

void MADC_VidADCStartSingleConversion(uint8 copy_uint8Channel)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	0f 92       	push	r0
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	89 83       	std	Y+1, r24	; 0x01
	/*1-Select Analog Channels
	 * single Ended or Differential */
#if MADC_SET_ANALOGCHANNEL ==  MADC_SINGLEENDED_CHANNEL
	ADMUX&=0xE0;
    20bc:	a7 e2       	ldi	r26, 0x27	; 39
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e7 e2       	ldi	r30, 0x27	; 39
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	80 7e       	andi	r24, 0xE0	; 224
    20c8:	8c 93       	st	X, r24
	ADMUX|=copy_uint8Channel;
    20ca:	a7 e2       	ldi	r26, 0x27	; 39
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e7 e2       	ldi	r30, 0x27	; 39
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	90 81       	ld	r25, Z
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	89 2b       	or	r24, r25
    20d8:	8c 93       	st	X, r24
#else
#error "Analog Channel Is Not Valid.."
#endif
	/* 2-Start Conversion*/
	SET_BIT(ADCSRA,6);
    20da:	a6 e2       	ldi	r26, 0x26	; 38
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e6 e2       	ldi	r30, 0x26	; 38
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	80 64       	ori	r24, 0x40	; 64
    20e6:	8c 93       	st	X, r24
	/*wait until flag is set to 1*/
	while(GET_BIT(ADCSRA,4)==0);
    20e8:	e6 e2       	ldi	r30, 0x26	; 38
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	82 95       	swap	r24
    20f0:	8f 70       	andi	r24, 0x0F	; 15
    20f2:	88 2f       	mov	r24, r24
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	81 70       	andi	r24, 0x01	; 1
    20f8:	90 70       	andi	r25, 0x00	; 0
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	a9 f3       	breq	.-22     	; 0x20e8 <MADC_VidADCStartSingleConversion+0x38>

}
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <MADC_VidADCStartSingleConversion_With_Interrupt>:
void MADC_VidADCStartSingleConversion_With_Interrupt(uint8 copy_uint8Channel)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	0f 92       	push	r0
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	89 83       	std	Y+1, r24	; 0x01
#if MADC_SET_ANALOGCHANNEL == MADC_SINGLEENDED_CHANNEL
	ADMUX&=0xE0;
    2112:	a7 e2       	ldi	r26, 0x27	; 39
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e7 e2       	ldi	r30, 0x27	; 39
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	80 7e       	andi	r24, 0xE0	; 224
    211e:	8c 93       	st	X, r24
	ADMUX|=copy_uint8Channel;
    2120:	a7 e2       	ldi	r26, 0x27	; 39
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e7 e2       	ldi	r30, 0x27	; 39
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	90 81       	ld	r25, Z
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	89 2b       	or	r24, r25
    212e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,6);
    2130:	a6 e2       	ldi	r26, 0x26	; 38
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e6 e2       	ldi	r30, 0x26	; 38
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	80 64       	ori	r24, 0x40	; 64
    213c:	8c 93       	st	X, r24
#else
	#error "Analog Channel Is Not Valid .."
#endif
}
    213e:	0f 90       	pop	r0
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <MADC_uint16Read>:

uint16 MADC_uint16Read(void)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	00 d0       	rcall	.+0      	; 0x214c <MADC_uint16Read+0x6>
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
	uint16 ADC;
	/*1- right adjust*/
#if MADC_SET_ADJUSTRESULT==MADC_RIGHT_ADJUST

	ADC=ADCH;
    2150:	e5 e2       	ldi	r30, 0x25	; 37
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	91 81       	ldd	r25, Z+1	; 0x01
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
	ADC|=ADCL<<8;
    215c:	e4 e2       	ldi	r30, 0x24	; 36
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	91 81       	ldd	r25, Z+1	; 0x01
    2164:	38 2f       	mov	r19, r24
    2166:	22 27       	eor	r18, r18
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	82 2b       	or	r24, r18
    216e:	93 2b       	or	r25, r19
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
	return ADC;
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	9a 81       	ldd	r25, Y+2	; 0x02

 #else
	#error"Analog Channel Is Not Valid .."
#endif
	//return ADC;
}
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <MADC_SetCallBack>:
void MADC_SetCallBack(void(*PtrToFun)(void))
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <MADC_SetCallBack+0x6>
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
	MADC_CALLBACK=PtrToFun;
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	90 93 8c 00 	sts	0x008C, r25
    2198:	80 93 8b 00 	sts	0x008B, r24
}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <__vector_16>:
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)  	{
    21a6:	1f 92       	push	r1
    21a8:	0f 92       	push	r0
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	0f 92       	push	r0
    21ae:	11 24       	eor	r1, r1
    21b0:	2f 93       	push	r18
    21b2:	3f 93       	push	r19
    21b4:	4f 93       	push	r20
    21b6:	5f 93       	push	r21
    21b8:	6f 93       	push	r22
    21ba:	7f 93       	push	r23
    21bc:	8f 93       	push	r24
    21be:	9f 93       	push	r25
    21c0:	af 93       	push	r26
    21c2:	bf 93       	push	r27
    21c4:	ef 93       	push	r30
    21c6:	ff 93       	push	r31
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
	MADC_CALLBACK();
    21d0:	e0 91 8b 00 	lds	r30, 0x008B
    21d4:	f0 91 8c 00 	lds	r31, 0x008C
    21d8:	09 95       	icall
}
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	ff 91       	pop	r31
    21e0:	ef 91       	pop	r30
    21e2:	bf 91       	pop	r27
    21e4:	af 91       	pop	r26
    21e6:	9f 91       	pop	r25
    21e8:	8f 91       	pop	r24
    21ea:	7f 91       	pop	r23
    21ec:	6f 91       	pop	r22
    21ee:	5f 91       	pop	r21
    21f0:	4f 91       	pop	r20
    21f2:	3f 91       	pop	r19
    21f4:	2f 91       	pop	r18
    21f6:	0f 90       	pop	r0
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	0f 90       	pop	r0
    21fc:	1f 90       	pop	r1
    21fe:	18 95       	reti

00002200 <HStepper_Init>:
#include "../HSTEPPER/HStepper_Config.h"
#include "../HSTEPPER/HStepper_Interface.h"
#define F_CPU 16000000UL
#include<util/delay.h>
void HStepper_Init(void)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL1,PIN_OUTPUT);
    2208:	82 e0       	ldi	r24, 0x02	; 2
    220a:	63 e0       	ldi	r22, 0x03	; 3
    220c:	41 e0       	ldi	r20, 0x01	; 1
    220e:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL2,PIN_OUTPUT);
    2212:	82 e0       	ldi	r24, 0x02	; 2
    2214:	64 e0       	ldi	r22, 0x04	; 4
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL3,PIN_OUTPUT);
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	65 e0       	ldi	r22, 0x05	; 5
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL4,PIN_OUTPUT);
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	66 e0       	ldi	r22, 0x06	; 6
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
}
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <HStepper_SetStepsDirection>:
void HStepper_SetStepsDirection(uint16 copy_uint16Steps,uint8 copy_uint8Direction)
{
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	c9 57       	subi	r28, 0x79	; 121
    2244:	d0 40       	sbci	r29, 0x00	; 0
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	fe 01       	movw	r30, r28
    2252:	eb 58       	subi	r30, 0x8B	; 139
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    225a:	fe 01       	movw	r30, r28
    225c:	e9 58       	subi	r30, 0x89	; 137
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	60 83       	st	Z, r22
	switch(copy_uint8Direction)
    2262:	fe 01       	movw	r30, r28
    2264:	e9 58       	subi	r30, 0x89	; 137
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 81       	ld	r24, Z
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	ea 96       	adiw	r28, 0x3a	; 58
    2270:	3f af       	std	Y+63, r19	; 0x3f
    2272:	2e af       	std	Y+62, r18	; 0x3e
    2274:	ea 97       	sbiw	r28, 0x3a	; 58
    2276:	ea 96       	adiw	r28, 0x3a	; 58
    2278:	8e ad       	ldd	r24, Y+62	; 0x3e
    227a:	9f ad       	ldd	r25, Y+63	; 0x3f
    227c:	ea 97       	sbiw	r28, 0x3a	; 58
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	49 f0       	breq	.+18     	; 0x2294 <HStepper_SetStepsDirection+0x5e>
    2282:	ea 96       	adiw	r28, 0x3a	; 58
    2284:	ee ad       	ldd	r30, Y+62	; 0x3e
    2286:	ff ad       	ldd	r31, Y+63	; 0x3f
    2288:	ea 97       	sbiw	r28, 0x3a	; 58
    228a:	e1 30       	cpi	r30, 0x01	; 1
    228c:	f1 05       	cpc	r31, r1
    228e:	09 f4       	brne	.+2      	; 0x2292 <HStepper_SetStepsDirection+0x5c>
    2290:	10 c3       	rjmp	.+1568   	; 0x28b2 <HStepper_SetStepsDirection+0x67c>
    2292:	47 c5       	rjmp	.+2702   	; 0x2d22 <HStepper_SetStepsDirection+0xaec>
		{
	                         /*clock wise */
		     case CW:
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2294:	fe 01       	movw	r30, r28
    2296:	ed 58       	subi	r30, 0x8D	; 141
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	11 82       	std	Z+1, r1	; 0x01
    229c:	10 82       	st	Z, r1
    229e:	f9 c2       	rjmp	.+1522   	; 0x2892 <HStepper_SetStepsDirection+0x65c>
					{
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_LOW);
    22a0:	82 e0       	ldi	r24, 0x02	; 2
    22a2:	63 e0       	ldi	r22, 0x03	; 3
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	64 e0       	ldi	r22, 0x04	; 4
    22ae:	41 e0       	ldi	r20, 0x01	; 1
    22b0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	65 e0       	ldi	r22, 0x05	; 5
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	66 e0       	ldi	r22, 0x06	; 6
    22c2:	41 e0       	ldi	r20, 0x01	; 1
    22c4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    22c8:	fe 01       	movw	r30, r28
    22ca:	e3 59       	subi	r30, 0x93	; 147
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	a0 ee       	ldi	r26, 0xE0	; 224
    22d4:	b0 e4       	ldi	r27, 0x40	; 64
    22d6:	80 83       	st	Z, r24
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	a2 83       	std	Z+2, r26	; 0x02
    22dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22de:	8e 01       	movw	r16, r28
    22e0:	07 59       	subi	r16, 0x97	; 151
    22e2:	1f 4f       	sbci	r17, 0xFF	; 255
    22e4:	fe 01       	movw	r30, r28
    22e6:	e3 59       	subi	r30, 0x93	; 147
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	60 81       	ld	r22, Z
    22ec:	71 81       	ldd	r23, Z+1	; 0x01
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	93 81       	ldd	r25, Z+3	; 0x03
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	4a e7       	ldi	r20, 0x7A	; 122
    22f8:	55 e4       	ldi	r21, 0x45	; 69
    22fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	f8 01       	movw	r30, r16
    2304:	80 83       	st	Z, r24
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	a2 83       	std	Z+2, r26	; 0x02
    230a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    230c:	fe 01       	movw	r30, r28
    230e:	e7 59       	subi	r30, 0x97	; 151
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e8       	ldi	r20, 0x80	; 128
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2326:	88 23       	and	r24, r24
    2328:	44 f4       	brge	.+16     	; 0x233a <HStepper_SetStepsDirection+0x104>
		__ticks = 1;
    232a:	fe 01       	movw	r30, r28
    232c:	e9 59       	subi	r30, 0x99	; 153
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
    2338:	64 c0       	rjmp	.+200    	; 0x2402 <HStepper_SetStepsDirection+0x1cc>
	else if (__tmp > 65535)
    233a:	fe 01       	movw	r30, r28
    233c:	e7 59       	subi	r30, 0x97	; 151
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	60 81       	ld	r22, Z
    2342:	71 81       	ldd	r23, Z+1	; 0x01
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	3f ef       	ldi	r19, 0xFF	; 255
    234c:	4f e7       	ldi	r20, 0x7F	; 127
    234e:	57 e4       	ldi	r21, 0x47	; 71
    2350:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2354:	18 16       	cp	r1, r24
    2356:	0c f0       	brlt	.+2      	; 0x235a <HStepper_SetStepsDirection+0x124>
    2358:	43 c0       	rjmp	.+134    	; 0x23e0 <HStepper_SetStepsDirection+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235a:	fe 01       	movw	r30, r28
    235c:	e3 59       	subi	r30, 0x93	; 147
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	93 81       	ldd	r25, Z+3	; 0x03
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	8e 01       	movw	r16, r28
    237a:	09 59       	subi	r16, 0x99	; 153
    237c:	1f 4f       	sbci	r17, 0xFF	; 255
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	f8 01       	movw	r30, r16
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	80 83       	st	Z, r24
    2390:	1f c0       	rjmp	.+62     	; 0x23d0 <HStepper_SetStepsDirection+0x19a>
    2392:	fe 01       	movw	r30, r28
    2394:	eb 59       	subi	r30, 0x9B	; 155
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	80 e9       	ldi	r24, 0x90	; 144
    239a:	91 e0       	ldi	r25, 0x01	; 1
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a0:	fe 01       	movw	r30, r28
    23a2:	eb 59       	subi	r30, 0x9B	; 155
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	80 81       	ld	r24, Z
    23a8:	91 81       	ldd	r25, Z+1	; 0x01
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <HStepper_SetStepsDirection+0x174>
    23ae:	fe 01       	movw	r30, r28
    23b0:	eb 59       	subi	r30, 0x9B	; 155
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b8:	de 01       	movw	r26, r28
    23ba:	a9 59       	subi	r26, 0x99	; 153
    23bc:	bf 4f       	sbci	r27, 0xFF	; 255
    23be:	fe 01       	movw	r30, r28
    23c0:	e9 59       	subi	r30, 0x99	; 153
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 81       	ld	r24, Z
    23c6:	91 81       	ldd	r25, Z+1	; 0x01
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	11 96       	adiw	r26, 0x01	; 1
    23cc:	9c 93       	st	X, r25
    23ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	fe 01       	movw	r30, r28
    23d2:	e9 59       	subi	r30, 0x99	; 153
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	d1 f6       	brne	.-76     	; 0x2392 <HStepper_SetStepsDirection+0x15c>
    23de:	27 c0       	rjmp	.+78     	; 0x242e <HStepper_SetStepsDirection+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	8e 01       	movw	r16, r28
    23e2:	09 59       	subi	r16, 0x99	; 153
    23e4:	1f 4f       	sbci	r17, 0xFF	; 255
    23e6:	fe 01       	movw	r30, r28
    23e8:	e7 59       	subi	r30, 0x97	; 151
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	60 81       	ld	r22, Z
    23ee:	71 81       	ldd	r23, Z+1	; 0x01
    23f0:	82 81       	ldd	r24, Z+2	; 0x02
    23f2:	93 81       	ldd	r25, Z+3	; 0x03
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	f8 01       	movw	r30, r16
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	80 83       	st	Z, r24
    2402:	de 01       	movw	r26, r28
    2404:	ad 59       	subi	r26, 0x9D	; 157
    2406:	bf 4f       	sbci	r27, 0xFF	; 255
    2408:	fe 01       	movw	r30, r28
    240a:	e9 59       	subi	r30, 0x99	; 153
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	8d 93       	st	X+, r24
    2414:	9c 93       	st	X, r25
    2416:	fe 01       	movw	r30, r28
    2418:	ed 59       	subi	r30, 0x9D	; 157
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <HStepper_SetStepsDirection+0x1ea>
    2424:	fe 01       	movw	r30, r28
    2426:	ed 59       	subi	r30, 0x9D	; 157
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	91 83       	std	Z+1, r25	; 0x01
    242c:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	63 e0       	ldi	r22, 0x03	; 3
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_LOW);
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	64 e0       	ldi	r22, 0x04	; 4
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2442:	82 e0       	ldi	r24, 0x02	; 2
    2444:	65 e0       	ldi	r22, 0x05	; 5
    2446:	41 e0       	ldi	r20, 0x01	; 1
    2448:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	66 e0       	ldi	r22, 0x06	; 6
    2450:	41 e0       	ldi	r20, 0x01	; 1
    2452:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    2456:	fe 01       	movw	r30, r28
    2458:	e1 5a       	subi	r30, 0xA1	; 161
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	a0 ee       	ldi	r26, 0xE0	; 224
    2462:	b0 e4       	ldi	r27, 0x40	; 64
    2464:	80 83       	st	Z, r24
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	a2 83       	std	Z+2, r26	; 0x02
    246a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246c:	8e 01       	movw	r16, r28
    246e:	05 5a       	subi	r16, 0xA5	; 165
    2470:	1f 4f       	sbci	r17, 0xFF	; 255
    2472:	fe 01       	movw	r30, r28
    2474:	e1 5a       	subi	r30, 0xA1	; 161
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	60 81       	ld	r22, Z
    247a:	71 81       	ldd	r23, Z+1	; 0x01
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	4a e7       	ldi	r20, 0x7A	; 122
    2486:	55 e4       	ldi	r21, 0x45	; 69
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	f8 01       	movw	r30, r16
    2492:	80 83       	st	Z, r24
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	a2 83       	std	Z+2, r26	; 0x02
    2498:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    249a:	fe 01       	movw	r30, r28
    249c:	e5 5a       	subi	r30, 0xA5	; 165
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	60 81       	ld	r22, Z
    24a2:	71 81       	ldd	r23, Z+1	; 0x01
    24a4:	82 81       	ldd	r24, Z+2	; 0x02
    24a6:	93 81       	ldd	r25, Z+3	; 0x03
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e8       	ldi	r20, 0x80	; 128
    24ae:	5f e3       	ldi	r21, 0x3F	; 63
    24b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b4:	88 23       	and	r24, r24
    24b6:	44 f4       	brge	.+16     	; 0x24c8 <HStepper_SetStepsDirection+0x292>
		__ticks = 1;
    24b8:	fe 01       	movw	r30, r28
    24ba:	e7 5a       	subi	r30, 0xA7	; 167
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
    24c6:	64 c0       	rjmp	.+200    	; 0x2590 <HStepper_SetStepsDirection+0x35a>
	else if (__tmp > 65535)
    24c8:	fe 01       	movw	r30, r28
    24ca:	e5 5a       	subi	r30, 0xA5	; 165
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	60 81       	ld	r22, Z
    24d0:	71 81       	ldd	r23, Z+1	; 0x01
    24d2:	82 81       	ldd	r24, Z+2	; 0x02
    24d4:	93 81       	ldd	r25, Z+3	; 0x03
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	57 e4       	ldi	r21, 0x47	; 71
    24de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e2:	18 16       	cp	r1, r24
    24e4:	0c f0       	brlt	.+2      	; 0x24e8 <HStepper_SetStepsDirection+0x2b2>
    24e6:	43 c0       	rjmp	.+134    	; 0x256e <HStepper_SetStepsDirection+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e8:	fe 01       	movw	r30, r28
    24ea:	e1 5a       	subi	r30, 0xA1	; 161
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e2       	ldi	r20, 0x20	; 32
    24fc:	51 e4       	ldi	r21, 0x41	; 65
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	8e 01       	movw	r16, r28
    2508:	07 5a       	subi	r16, 0xA7	; 167
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	f8 01       	movw	r30, r16
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	80 83       	st	Z, r24
    251e:	1f c0       	rjmp	.+62     	; 0x255e <HStepper_SetStepsDirection+0x328>
    2520:	fe 01       	movw	r30, r28
    2522:	e9 5a       	subi	r30, 0xA9	; 169
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 e9       	ldi	r24, 0x90	; 144
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	91 83       	std	Z+1, r25	; 0x01
    252c:	80 83       	st	Z, r24
    252e:	fe 01       	movw	r30, r28
    2530:	e9 5a       	subi	r30, 0xA9	; 169
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <HStepper_SetStepsDirection+0x302>
    253c:	fe 01       	movw	r30, r28
    253e:	e9 5a       	subi	r30, 0xA9	; 169
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	91 83       	std	Z+1, r25	; 0x01
    2544:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	de 01       	movw	r26, r28
    2548:	a7 5a       	subi	r26, 0xA7	; 167
    254a:	bf 4f       	sbci	r27, 0xFF	; 255
    254c:	fe 01       	movw	r30, r28
    254e:	e7 5a       	subi	r30, 0xA7	; 167
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	11 96       	adiw	r26, 0x01	; 1
    255a:	9c 93       	st	X, r25
    255c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255e:	fe 01       	movw	r30, r28
    2560:	e7 5a       	subi	r30, 0xA7	; 167
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	d1 f6       	brne	.-76     	; 0x2520 <HStepper_SetStepsDirection+0x2ea>
    256c:	27 c0       	rjmp	.+78     	; 0x25bc <HStepper_SetStepsDirection+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256e:	8e 01       	movw	r16, r28
    2570:	07 5a       	subi	r16, 0xA7	; 167
    2572:	1f 4f       	sbci	r17, 0xFF	; 255
    2574:	fe 01       	movw	r30, r28
    2576:	e5 5a       	subi	r30, 0xA5	; 165
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	60 81       	ld	r22, Z
    257c:	71 81       	ldd	r23, Z+1	; 0x01
    257e:	82 81       	ldd	r24, Z+2	; 0x02
    2580:	93 81       	ldd	r25, Z+3	; 0x03
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	f8 01       	movw	r30, r16
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	80 83       	st	Z, r24
    2590:	de 01       	movw	r26, r28
    2592:	ab 5a       	subi	r26, 0xAB	; 171
    2594:	bf 4f       	sbci	r27, 0xFF	; 255
    2596:	fe 01       	movw	r30, r28
    2598:	e7 5a       	subi	r30, 0xA7	; 167
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	8d 93       	st	X+, r24
    25a2:	9c 93       	st	X, r25
    25a4:	fe 01       	movw	r30, r28
    25a6:	eb 5a       	subi	r30, 0xAB	; 171
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <HStepper_SetStepsDirection+0x378>
    25b2:	fe 01       	movw	r30, r28
    25b4:	eb 5a       	subi	r30, 0xAB	; 171
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    25bc:	82 e0       	ldi	r24, 0x02	; 2
    25be:	63 e0       	ldi	r22, 0x03	; 3
    25c0:	41 e0       	ldi	r20, 0x01	; 1
    25c2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    25c6:	82 e0       	ldi	r24, 0x02	; 2
    25c8:	64 e0       	ldi	r22, 0x04	; 4
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_LOW);
    25d0:	82 e0       	ldi	r24, 0x02	; 2
    25d2:	65 e0       	ldi	r22, 0x05	; 5
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    25da:	82 e0       	ldi	r24, 0x02	; 2
    25dc:	66 e0       	ldi	r22, 0x06	; 6
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    25e4:	fe 01       	movw	r30, r28
    25e6:	ef 5a       	subi	r30, 0xAF	; 175
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a0 ee       	ldi	r26, 0xE0	; 224
    25f0:	b0 e4       	ldi	r27, 0x40	; 64
    25f2:	80 83       	st	Z, r24
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	a2 83       	std	Z+2, r26	; 0x02
    25f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fa:	8e 01       	movw	r16, r28
    25fc:	03 5b       	subi	r16, 0xB3	; 179
    25fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2600:	fe 01       	movw	r30, r28
    2602:	ef 5a       	subi	r30, 0xAF	; 175
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	4a e7       	ldi	r20, 0x7A	; 122
    2614:	55 e4       	ldi	r21, 0x45	; 69
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	f8 01       	movw	r30, r16
    2620:	80 83       	st	Z, r24
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	a2 83       	std	Z+2, r26	; 0x02
    2626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2628:	fe 01       	movw	r30, r28
    262a:	e3 5b       	subi	r30, 0xB3	; 179
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f e3       	ldi	r21, 0x3F	; 63
    263e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2642:	88 23       	and	r24, r24
    2644:	44 f4       	brge	.+16     	; 0x2656 <HStepper_SetStepsDirection+0x420>
		__ticks = 1;
    2646:	fe 01       	movw	r30, r28
    2648:	e5 5b       	subi	r30, 0xB5	; 181
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24
    2654:	64 c0       	rjmp	.+200    	; 0x271e <HStepper_SetStepsDirection+0x4e8>
	else if (__tmp > 65535)
    2656:	fe 01       	movw	r30, r28
    2658:	e3 5b       	subi	r30, 0xB3	; 179
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	60 81       	ld	r22, Z
    265e:	71 81       	ldd	r23, Z+1	; 0x01
    2660:	82 81       	ldd	r24, Z+2	; 0x02
    2662:	93 81       	ldd	r25, Z+3	; 0x03
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	0c f0       	brlt	.+2      	; 0x2676 <HStepper_SetStepsDirection+0x440>
    2674:	43 c0       	rjmp	.+134    	; 0x26fc <HStepper_SetStepsDirection+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2676:	fe 01       	movw	r30, r28
    2678:	ef 5a       	subi	r30, 0xAF	; 175
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8e 01       	movw	r16, r28
    2696:	05 5b       	subi	r16, 0xB5	; 181
    2698:	1f 4f       	sbci	r17, 0xFF	; 255
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	f8 01       	movw	r30, r16
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
    26ac:	1f c0       	rjmp	.+62     	; 0x26ec <HStepper_SetStepsDirection+0x4b6>
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 5b       	subi	r30, 0xB7	; 183
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	80 e9       	ldi	r24, 0x90	; 144
    26b6:	91 e0       	ldi	r25, 0x01	; 1
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	80 83       	st	Z, r24
    26bc:	fe 01       	movw	r30, r28
    26be:	e7 5b       	subi	r30, 0xB7	; 183
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <HStepper_SetStepsDirection+0x490>
    26ca:	fe 01       	movw	r30, r28
    26cc:	e7 5b       	subi	r30, 0xB7	; 183
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d4:	de 01       	movw	r26, r28
    26d6:	a5 5b       	subi	r26, 0xB5	; 181
    26d8:	bf 4f       	sbci	r27, 0xFF	; 255
    26da:	fe 01       	movw	r30, r28
    26dc:	e5 5b       	subi	r30, 0xB5	; 181
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	11 96       	adiw	r26, 0x01	; 1
    26e8:	9c 93       	st	X, r25
    26ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	fe 01       	movw	r30, r28
    26ee:	e5 5b       	subi	r30, 0xB5	; 181
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	d1 f6       	brne	.-76     	; 0x26ae <HStepper_SetStepsDirection+0x478>
    26fa:	27 c0       	rjmp	.+78     	; 0x274a <HStepper_SetStepsDirection+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fc:	8e 01       	movw	r16, r28
    26fe:	05 5b       	subi	r16, 0xB5	; 181
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
    2702:	fe 01       	movw	r30, r28
    2704:	e3 5b       	subi	r30, 0xB3	; 179
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	60 81       	ld	r22, Z
    270a:	71 81       	ldd	r23, Z+1	; 0x01
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	93 81       	ldd	r25, Z+3	; 0x03
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	f8 01       	movw	r30, r16
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
    271e:	de 01       	movw	r26, r28
    2720:	a9 5b       	subi	r26, 0xB9	; 185
    2722:	bf 4f       	sbci	r27, 0xFF	; 255
    2724:	fe 01       	movw	r30, r28
    2726:	e5 5b       	subi	r30, 0xB5	; 181
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	8d 93       	st	X+, r24
    2730:	9c 93       	st	X, r25
    2732:	fe 01       	movw	r30, r28
    2734:	e9 5b       	subi	r30, 0xB9	; 185
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <HStepper_SetStepsDirection+0x506>
    2740:	fe 01       	movw	r30, r28
    2742:	e9 5b       	subi	r30, 0xB9	; 185
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	63 e0       	ldi	r22, 0x03	; 3
    274e:	41 e0       	ldi	r20, 0x01	; 1
    2750:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	64 e0       	ldi	r22, 0x04	; 4
    2758:	41 e0       	ldi	r20, 0x01	; 1
    275a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	65 e0       	ldi	r22, 0x05	; 5
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_LOW);
    2768:	82 e0       	ldi	r24, 0x02	; 2
    276a:	66 e0       	ldi	r22, 0x06	; 6
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    2772:	fe 01       	movw	r30, r28
    2774:	ed 5b       	subi	r30, 0xBD	; 189
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	a0 ee       	ldi	r26, 0xE0	; 224
    277e:	b0 e4       	ldi	r27, 0x40	; 64
    2780:	80 83       	st	Z, r24
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	a2 83       	std	Z+2, r26	; 0x02
    2786:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2788:	8e 01       	movw	r16, r28
    278a:	01 5c       	subi	r16, 0xC1	; 193
    278c:	1f 4f       	sbci	r17, 0xFF	; 255
    278e:	fe 01       	movw	r30, r28
    2790:	ed 5b       	subi	r30, 0xBD	; 189
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	60 81       	ld	r22, Z
    2796:	71 81       	ldd	r23, Z+1	; 0x01
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	93 81       	ldd	r25, Z+3	; 0x03
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	4a e7       	ldi	r20, 0x7A	; 122
    27a2:	55 e4       	ldi	r21, 0x45	; 69
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	f8 01       	movw	r30, r16
    27ae:	80 83       	st	Z, r24
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	a2 83       	std	Z+2, r26	; 0x02
    27b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27b6:	fe 01       	movw	r30, r28
    27b8:	ff 96       	adiw	r30, 0x3f	; 63
    27ba:	60 81       	ld	r22, Z
    27bc:	71 81       	ldd	r23, Z+1	; 0x01
    27be:	82 81       	ldd	r24, Z+2	; 0x02
    27c0:	93 81       	ldd	r25, Z+3	; 0x03
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ce:	88 23       	and	r24, r24
    27d0:	2c f4       	brge	.+10     	; 0x27dc <HStepper_SetStepsDirection+0x5a6>
		__ticks = 1;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9e af       	std	Y+62, r25	; 0x3e
    27d8:	8d af       	std	Y+61, r24	; 0x3d
    27da:	46 c0       	rjmp	.+140    	; 0x2868 <HStepper_SetStepsDirection+0x632>
	else if (__tmp > 65535)
    27dc:	fe 01       	movw	r30, r28
    27de:	ff 96       	adiw	r30, 0x3f	; 63
    27e0:	60 81       	ld	r22, Z
    27e2:	71 81       	ldd	r23, Z+1	; 0x01
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	3f ef       	ldi	r19, 0xFF	; 255
    27ec:	4f e7       	ldi	r20, 0x7F	; 127
    27ee:	57 e4       	ldi	r21, 0x47	; 71
    27f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f4:	18 16       	cp	r1, r24
    27f6:	64 f5       	brge	.+88     	; 0x2850 <HStepper_SetStepsDirection+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f8:	fe 01       	movw	r30, r28
    27fa:	ed 5b       	subi	r30, 0xBD	; 189
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	60 81       	ld	r22, Z
    2800:	71 81       	ldd	r23, Z+1	; 0x01
    2802:	82 81       	ldd	r24, Z+2	; 0x02
    2804:	93 81       	ldd	r25, Z+3	; 0x03
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e2       	ldi	r20, 0x20	; 32
    280c:	51 e4       	ldi	r21, 0x41	; 65
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9e af       	std	Y+62, r25	; 0x3e
    2824:	8d af       	std	Y+61, r24	; 0x3d
    2826:	0f c0       	rjmp	.+30     	; 0x2846 <HStepper_SetStepsDirection+0x610>
    2828:	80 e9       	ldi	r24, 0x90	; 144
    282a:	91 e0       	ldi	r25, 0x01	; 1
    282c:	9c af       	std	Y+60, r25	; 0x3c
    282e:	8b af       	std	Y+59, r24	; 0x3b
    2830:	8b ad       	ldd	r24, Y+59	; 0x3b
    2832:	9c ad       	ldd	r25, Y+60	; 0x3c
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <HStepper_SetStepsDirection+0x5fe>
    2838:	9c af       	std	Y+60, r25	; 0x3c
    283a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283c:	8d ad       	ldd	r24, Y+61	; 0x3d
    283e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	9e af       	std	Y+62, r25	; 0x3e
    2844:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2846:	8d ad       	ldd	r24, Y+61	; 0x3d
    2848:	9e ad       	ldd	r25, Y+62	; 0x3e
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	69 f7       	brne	.-38     	; 0x2828 <HStepper_SetStepsDirection+0x5f2>
    284e:	16 c0       	rjmp	.+44     	; 0x287c <HStepper_SetStepsDirection+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2850:	fe 01       	movw	r30, r28
    2852:	ff 96       	adiw	r30, 0x3f	; 63
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	9e af       	std	Y+62, r25	; 0x3e
    2866:	8d af       	std	Y+61, r24	; 0x3d
    2868:	8d ad       	ldd	r24, Y+61	; 0x3d
    286a:	9e ad       	ldd	r25, Y+62	; 0x3e
    286c:	9a af       	std	Y+58, r25	; 0x3a
    286e:	89 af       	std	Y+57, r24	; 0x39
    2870:	89 ad       	ldd	r24, Y+57	; 0x39
    2872:	9a ad       	ldd	r25, Y+58	; 0x3a
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	f1 f7       	brne	.-4      	; 0x2874 <HStepper_SetStepsDirection+0x63e>
    2878:	9a af       	std	Y+58, r25	; 0x3a
    287a:	89 af       	std	Y+57, r24	; 0x39
{
	switch(copy_uint8Direction)
		{
	                         /*clock wise */
		     case CW:
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    287c:	de 01       	movw	r26, r28
    287e:	ad 58       	subi	r26, 0x8D	; 141
    2880:	bf 4f       	sbci	r27, 0xFF	; 255
    2882:	fe 01       	movw	r30, r28
    2884:	ed 58       	subi	r30, 0x8D	; 141
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	91 81       	ldd	r25, Z+1	; 0x01
    288c:	01 96       	adiw	r24, 0x01	; 1
    288e:	8d 93       	st	X+, r24
    2890:	9c 93       	st	X, r25
    2892:	fe 01       	movw	r30, r28
    2894:	ed 58       	subi	r30, 0x8D	; 141
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	de 01       	movw	r26, r28
    289a:	ab 58       	subi	r26, 0x8B	; 139
    289c:	bf 4f       	sbci	r27, 0xFF	; 255
    289e:	20 81       	ld	r18, Z
    28a0:	31 81       	ldd	r19, Z+1	; 0x01
    28a2:	8d 91       	ld	r24, X+
    28a4:	9c 91       	ld	r25, X
    28a6:	11 97       	sbiw	r26, 0x01	; 1
    28a8:	28 17       	cp	r18, r24
    28aa:	39 07       	cpc	r19, r25
    28ac:	08 f4       	brcc	.+2      	; 0x28b0 <HStepper_SetStepsDirection+0x67a>
    28ae:	f8 cc       	rjmp	.-1552   	; 0x22a0 <HStepper_SetStepsDirection+0x6a>
    28b0:	38 c2       	rjmp	.+1136   	; 0x2d22 <HStepper_SetStepsDirection+0xaec>
					}
			break;

                                        /* counter clock wise*/
		case CCW :
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    28b2:	fe 01       	movw	r30, r28
    28b4:	ef 58       	subi	r30, 0x8F	; 143
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	11 82       	std	Z+1, r1	; 0x01
    28ba:	10 82       	st	Z, r1
    28bc:	23 c2       	rjmp	.+1094   	; 0x2d04 <HStepper_SetStepsDirection+0xace>
			{
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	63 e0       	ldi	r22, 0x03	; 3
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    28c8:	82 e0       	ldi	r24, 0x02	; 2
    28ca:	64 e0       	ldi	r22, 0x04	; 4
    28cc:	41 e0       	ldi	r20, 0x01	; 1
    28ce:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    28d2:	82 e0       	ldi	r24, 0x02	; 2
    28d4:	65 e0       	ldi	r22, 0x05	; 5
    28d6:	41 e0       	ldi	r20, 0x01	; 1
    28d8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_LOW);
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	66 e0       	ldi	r22, 0x06	; 6
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a0 ee       	ldi	r26, 0xE0	; 224
    28ec:	b0 e4       	ldi	r27, 0x40	; 64
    28ee:	8d ab       	std	Y+53, r24	; 0x35
    28f0:	9e ab       	std	Y+54, r25	; 0x36
    28f2:	af ab       	std	Y+55, r26	; 0x37
    28f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f6:	6d a9       	ldd	r22, Y+53	; 0x35
    28f8:	7e a9       	ldd	r23, Y+54	; 0x36
    28fa:	8f a9       	ldd	r24, Y+55	; 0x37
    28fc:	98 ad       	ldd	r25, Y+56	; 0x38
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	4a e7       	ldi	r20, 0x7A	; 122
    2904:	55 e4       	ldi	r21, 0x45	; 69
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	89 ab       	std	Y+49, r24	; 0x31
    2910:	9a ab       	std	Y+50, r25	; 0x32
    2912:	ab ab       	std	Y+51, r26	; 0x33
    2914:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2916:	69 a9       	ldd	r22, Y+49	; 0x31
    2918:	7a a9       	ldd	r23, Y+50	; 0x32
    291a:	8b a9       	ldd	r24, Y+51	; 0x33
    291c:	9c a9       	ldd	r25, Y+52	; 0x34
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e8       	ldi	r20, 0x80	; 128
    2924:	5f e3       	ldi	r21, 0x3F	; 63
    2926:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292a:	88 23       	and	r24, r24
    292c:	2c f4       	brge	.+10     	; 0x2938 <HStepper_SetStepsDirection+0x702>
		__ticks = 1;
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	98 ab       	std	Y+48, r25	; 0x30
    2934:	8f a7       	std	Y+47, r24	; 0x2f
    2936:	3f c0       	rjmp	.+126    	; 0x29b6 <HStepper_SetStepsDirection+0x780>
	else if (__tmp > 65535)
    2938:	69 a9       	ldd	r22, Y+49	; 0x31
    293a:	7a a9       	ldd	r23, Y+50	; 0x32
    293c:	8b a9       	ldd	r24, Y+51	; 0x33
    293e:	9c a9       	ldd	r25, Y+52	; 0x34
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	3f ef       	ldi	r19, 0xFF	; 255
    2944:	4f e7       	ldi	r20, 0x7F	; 127
    2946:	57 e4       	ldi	r21, 0x47	; 71
    2948:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    294c:	18 16       	cp	r1, r24
    294e:	4c f5       	brge	.+82     	; 0x29a2 <HStepper_SetStepsDirection+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2950:	6d a9       	ldd	r22, Y+53	; 0x35
    2952:	7e a9       	ldd	r23, Y+54	; 0x36
    2954:	8f a9       	ldd	r24, Y+55	; 0x37
    2956:	98 ad       	ldd	r25, Y+56	; 0x38
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e2       	ldi	r20, 0x20	; 32
    295e:	51 e4       	ldi	r21, 0x41	; 65
    2960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	98 ab       	std	Y+48, r25	; 0x30
    2976:	8f a7       	std	Y+47, r24	; 0x2f
    2978:	0f c0       	rjmp	.+30     	; 0x2998 <HStepper_SetStepsDirection+0x762>
    297a:	80 e9       	ldi	r24, 0x90	; 144
    297c:	91 e0       	ldi	r25, 0x01	; 1
    297e:	9e a7       	std	Y+46, r25	; 0x2e
    2980:	8d a7       	std	Y+45, r24	; 0x2d
    2982:	8d a5       	ldd	r24, Y+45	; 0x2d
    2984:	9e a5       	ldd	r25, Y+46	; 0x2e
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <HStepper_SetStepsDirection+0x750>
    298a:	9e a7       	std	Y+46, r25	; 0x2e
    298c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2990:	98 a9       	ldd	r25, Y+48	; 0x30
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	98 ab       	std	Y+48, r25	; 0x30
    2996:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2998:	8f a5       	ldd	r24, Y+47	; 0x2f
    299a:	98 a9       	ldd	r25, Y+48	; 0x30
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	69 f7       	brne	.-38     	; 0x297a <HStepper_SetStepsDirection+0x744>
    29a0:	14 c0       	rjmp	.+40     	; 0x29ca <HStepper_SetStepsDirection+0x794>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a2:	69 a9       	ldd	r22, Y+49	; 0x31
    29a4:	7a a9       	ldd	r23, Y+50	; 0x32
    29a6:	8b a9       	ldd	r24, Y+51	; 0x33
    29a8:	9c a9       	ldd	r25, Y+52	; 0x34
    29aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	98 ab       	std	Y+48, r25	; 0x30
    29b4:	8f a7       	std	Y+47, r24	; 0x2f
    29b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b8:	98 a9       	ldd	r25, Y+48	; 0x30
    29ba:	9c a7       	std	Y+44, r25	; 0x2c
    29bc:	8b a7       	std	Y+43, r24	; 0x2b
    29be:	8b a5       	ldd	r24, Y+43	; 0x2b
    29c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <HStepper_SetStepsDirection+0x78c>
    29c6:	9c a7       	std	Y+44, r25	; 0x2c
    29c8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(MAX_SPEED_DELAY);

				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    29ca:	82 e0       	ldi	r24, 0x02	; 2
    29cc:	63 e0       	ldi	r22, 0x03	; 3
    29ce:	41 e0       	ldi	r20, 0x01	; 1
    29d0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	64 e0       	ldi	r22, 0x04	; 4
    29d8:	41 e0       	ldi	r20, 0x01	; 1
    29da:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_LOW);
    29de:	82 e0       	ldi	r24, 0x02	; 2
    29e0:	65 e0       	ldi	r22, 0x05	; 5
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	66 e0       	ldi	r22, 0x06	; 6
    29ec:	41 e0       	ldi	r20, 0x01	; 1
    29ee:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a0 ee       	ldi	r26, 0xE0	; 224
    29f8:	b0 e4       	ldi	r27, 0x40	; 64
    29fa:	8f a3       	std	Y+39, r24	; 0x27
    29fc:	98 a7       	std	Y+40, r25	; 0x28
    29fe:	a9 a7       	std	Y+41, r26	; 0x29
    2a00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a02:	6f a1       	ldd	r22, Y+39	; 0x27
    2a04:	78 a5       	ldd	r23, Y+40	; 0x28
    2a06:	89 a5       	ldd	r24, Y+41	; 0x29
    2a08:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	4a e7       	ldi	r20, 0x7A	; 122
    2a10:	55 e4       	ldi	r21, 0x45	; 69
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	8b a3       	std	Y+35, r24	; 0x23
    2a1c:	9c a3       	std	Y+36, r25	; 0x24
    2a1e:	ad a3       	std	Y+37, r26	; 0x25
    2a20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a22:	6b a1       	ldd	r22, Y+35	; 0x23
    2a24:	7c a1       	ldd	r23, Y+36	; 0x24
    2a26:	8d a1       	ldd	r24, Y+37	; 0x25
    2a28:	9e a1       	ldd	r25, Y+38	; 0x26
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e8       	ldi	r20, 0x80	; 128
    2a30:	5f e3       	ldi	r21, 0x3F	; 63
    2a32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a36:	88 23       	and	r24, r24
    2a38:	2c f4       	brge	.+10     	; 0x2a44 <HStepper_SetStepsDirection+0x80e>
		__ticks = 1;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9a a3       	std	Y+34, r25	; 0x22
    2a40:	89 a3       	std	Y+33, r24	; 0x21
    2a42:	3f c0       	rjmp	.+126    	; 0x2ac2 <HStepper_SetStepsDirection+0x88c>
	else if (__tmp > 65535)
    2a44:	6b a1       	ldd	r22, Y+35	; 0x23
    2a46:	7c a1       	ldd	r23, Y+36	; 0x24
    2a48:	8d a1       	ldd	r24, Y+37	; 0x25
    2a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	3f ef       	ldi	r19, 0xFF	; 255
    2a50:	4f e7       	ldi	r20, 0x7F	; 127
    2a52:	57 e4       	ldi	r21, 0x47	; 71
    2a54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a58:	18 16       	cp	r1, r24
    2a5a:	4c f5       	brge	.+82     	; 0x2aae <HStepper_SetStepsDirection+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a5e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a60:	89 a5       	ldd	r24, Y+41	; 0x29
    2a62:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e2       	ldi	r20, 0x20	; 32
    2a6a:	51 e4       	ldi	r21, 0x41	; 65
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	9a a3       	std	Y+34, r25	; 0x22
    2a82:	89 a3       	std	Y+33, r24	; 0x21
    2a84:	0f c0       	rjmp	.+30     	; 0x2aa4 <HStepper_SetStepsDirection+0x86e>
    2a86:	80 e9       	ldi	r24, 0x90	; 144
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	98 a3       	std	Y+32, r25	; 0x20
    2a8c:	8f 8f       	std	Y+31, r24	; 0x1f
    2a8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a90:	98 a1       	ldd	r25, Y+32	; 0x20
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <HStepper_SetStepsDirection+0x85c>
    2a96:	98 a3       	std	Y+32, r25	; 0x20
    2a98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	9a a3       	std	Y+34, r25	; 0x22
    2aa2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa4:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa6:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	69 f7       	brne	.-38     	; 0x2a86 <HStepper_SetStepsDirection+0x850>
    2aac:	14 c0       	rjmp	.+40     	; 0x2ad6 <HStepper_SetStepsDirection+0x8a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aae:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9a a3       	std	Y+34, r25	; 0x22
    2ac0:	89 a3       	std	Y+33, r24	; 0x21
    2ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac8:	8d 8f       	std	Y+29, r24	; 0x1d
    2aca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2acc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <HStepper_SetStepsDirection+0x898>
    2ad2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad4:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(MAX_SPEED_DELAY);
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	63 e0       	ldi	r22, 0x03	; 3
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_LOW);
    2ae0:	82 e0       	ldi	r24, 0x02	; 2
    2ae2:	64 e0       	ldi	r22, 0x04	; 4
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	65 e0       	ldi	r22, 0x05	; 5
    2aee:	41 e0       	ldi	r20, 0x01	; 1
    2af0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	66 e0       	ldi	r22, 0x06	; 6
    2af8:	41 e0       	ldi	r20, 0x01	; 1
    2afa:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	a0 ee       	ldi	r26, 0xE0	; 224
    2b04:	b0 e4       	ldi	r27, 0x40	; 64
    2b06:	89 8f       	std	Y+25, r24	; 0x19
    2b08:	9a 8f       	std	Y+26, r25	; 0x1a
    2b0a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	4a e7       	ldi	r20, 0x7A	; 122
    2b1c:	55 e4       	ldi	r21, 0x45	; 69
    2b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	8d 8b       	std	Y+21, r24	; 0x15
    2b28:	9e 8b       	std	Y+22, r25	; 0x16
    2b2a:	af 8b       	std	Y+23, r26	; 0x17
    2b2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b30:	7e 89       	ldd	r23, Y+22	; 0x16
    2b32:	8f 89       	ldd	r24, Y+23	; 0x17
    2b34:	98 8d       	ldd	r25, Y+24	; 0x18
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e8       	ldi	r20, 0x80	; 128
    2b3c:	5f e3       	ldi	r21, 0x3F	; 63
    2b3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b42:	88 23       	and	r24, r24
    2b44:	2c f4       	brge	.+10     	; 0x2b50 <HStepper_SetStepsDirection+0x91a>
		__ticks = 1;
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	9c 8b       	std	Y+20, r25	; 0x14
    2b4c:	8b 8b       	std	Y+19, r24	; 0x13
    2b4e:	3f c0       	rjmp	.+126    	; 0x2bce <HStepper_SetStepsDirection+0x998>
	else if (__tmp > 65535)
    2b50:	6d 89       	ldd	r22, Y+21	; 0x15
    2b52:	7e 89       	ldd	r23, Y+22	; 0x16
    2b54:	8f 89       	ldd	r24, Y+23	; 0x17
    2b56:	98 8d       	ldd	r25, Y+24	; 0x18
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	3f ef       	ldi	r19, 0xFF	; 255
    2b5c:	4f e7       	ldi	r20, 0x7F	; 127
    2b5e:	57 e4       	ldi	r21, 0x47	; 71
    2b60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b64:	18 16       	cp	r1, r24
    2b66:	4c f5       	brge	.+82     	; 0x2bba <HStepper_SetStepsDirection+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b68:	69 8d       	ldd	r22, Y+25	; 0x19
    2b6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e2       	ldi	r20, 0x20	; 32
    2b76:	51 e4       	ldi	r21, 0x41	; 65
    2b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	bc 01       	movw	r22, r24
    2b82:	cd 01       	movw	r24, r26
    2b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	9c 8b       	std	Y+20, r25	; 0x14
    2b8e:	8b 8b       	std	Y+19, r24	; 0x13
    2b90:	0f c0       	rjmp	.+30     	; 0x2bb0 <HStepper_SetStepsDirection+0x97a>
    2b92:	80 e9       	ldi	r24, 0x90	; 144
    2b94:	91 e0       	ldi	r25, 0x01	; 1
    2b96:	9a 8b       	std	Y+18, r25	; 0x12
    2b98:	89 8b       	std	Y+17, r24	; 0x11
    2b9a:	89 89       	ldd	r24, Y+17	; 0x11
    2b9c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <HStepper_SetStepsDirection+0x968>
    2ba2:	9a 8b       	std	Y+18, r25	; 0x12
    2ba4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	9c 8b       	std	Y+20, r25	; 0x14
    2bae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	69 f7       	brne	.-38     	; 0x2b92 <HStepper_SetStepsDirection+0x95c>
    2bb8:	14 c0       	rjmp	.+40     	; 0x2be2 <HStepper_SetStepsDirection+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bba:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	9c 8b       	std	Y+20, r25	; 0x14
    2bcc:	8b 8b       	std	Y+19, r24	; 0x13
    2bce:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd2:	98 8b       	std	Y+16, r25	; 0x10
    2bd4:	8f 87       	std	Y+15, r24	; 0x0f
    2bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd8:	98 89       	ldd	r25, Y+16	; 0x10
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <HStepper_SetStepsDirection+0x9a4>
    2bde:	98 8b       	std	Y+16, r25	; 0x10
    2be0:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(MAX_SPEED_DELAY);

				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_LOW);
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	63 e0       	ldi	r22, 0x03	; 3
    2be6:	40 e0       	ldi	r20, 0x00	; 0
    2be8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2bec:	82 e0       	ldi	r24, 0x02	; 2
    2bee:	64 e0       	ldi	r22, 0x04	; 4
    2bf0:	41 e0       	ldi	r20, 0x01	; 1
    2bf2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	65 e0       	ldi	r22, 0x05	; 5
    2bfa:	41 e0       	ldi	r20, 0x01	; 1
    2bfc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2c00:	82 e0       	ldi	r24, 0x02	; 2
    2c02:	66 e0       	ldi	r22, 0x06	; 6
    2c04:	41 e0       	ldi	r20, 0x01	; 1
    2c06:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	a0 ee       	ldi	r26, 0xE0	; 224
    2c10:	b0 e4       	ldi	r27, 0x40	; 64
    2c12:	8b 87       	std	Y+11, r24	; 0x0b
    2c14:	9c 87       	std	Y+12, r25	; 0x0c
    2c16:	ad 87       	std	Y+13, r26	; 0x0d
    2c18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	4a e7       	ldi	r20, 0x7A	; 122
    2c28:	55 e4       	ldi	r21, 0x45	; 69
    2c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	8f 83       	std	Y+7, r24	; 0x07
    2c34:	98 87       	std	Y+8, r25	; 0x08
    2c36:	a9 87       	std	Y+9, r26	; 0x09
    2c38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3c:	78 85       	ldd	r23, Y+8	; 0x08
    2c3e:	89 85       	ldd	r24, Y+9	; 0x09
    2c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e8       	ldi	r20, 0x80	; 128
    2c48:	5f e3       	ldi	r21, 0x3F	; 63
    2c4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c4e:	88 23       	and	r24, r24
    2c50:	2c f4       	brge	.+10     	; 0x2c5c <HStepper_SetStepsDirection+0xa26>
		__ticks = 1;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	9e 83       	std	Y+6, r25	; 0x06
    2c58:	8d 83       	std	Y+5, r24	; 0x05
    2c5a:	3f c0       	rjmp	.+126    	; 0x2cda <HStepper_SetStepsDirection+0xaa4>
	else if (__tmp > 65535)
    2c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5e:	78 85       	ldd	r23, Y+8	; 0x08
    2c60:	89 85       	ldd	r24, Y+9	; 0x09
    2c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	3f ef       	ldi	r19, 0xFF	; 255
    2c68:	4f e7       	ldi	r20, 0x7F	; 127
    2c6a:	57 e4       	ldi	r21, 0x47	; 71
    2c6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c70:	18 16       	cp	r1, r24
    2c72:	4c f5       	brge	.+82     	; 0x2cc6 <HStepper_SetStepsDirection+0xa90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e2       	ldi	r20, 0x20	; 32
    2c82:	51 e4       	ldi	r21, 0x41	; 65
    2c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	cd 01       	movw	r24, r26
    2c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
    2c9c:	0f c0       	rjmp	.+30     	; 0x2cbc <HStepper_SetStepsDirection+0xa86>
    2c9e:	80 e9       	ldi	r24, 0x90	; 144
    2ca0:	91 e0       	ldi	r25, 0x01	; 1
    2ca2:	9c 83       	std	Y+4, r25	; 0x04
    2ca4:	8b 83       	std	Y+3, r24	; 0x03
    2ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <HStepper_SetStepsDirection+0xa74>
    2cae:	9c 83       	std	Y+4, r25	; 0x04
    2cb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	9e 83       	std	Y+6, r25	; 0x06
    2cba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc0:	00 97       	sbiw	r24, 0x00	; 0
    2cc2:	69 f7       	brne	.-38     	; 0x2c9e <HStepper_SetStepsDirection+0xa68>
    2cc4:	14 c0       	rjmp	.+40     	; 0x2cee <HStepper_SetStepsDirection+0xab8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc8:	78 85       	ldd	r23, Y+8	; 0x08
    2cca:	89 85       	ldd	r24, Y+9	; 0x09
    2ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	9e 83       	std	Y+6, r25	; 0x06
    2cd8:	8d 83       	std	Y+5, r24	; 0x05
    2cda:	8d 81       	ldd	r24, Y+5	; 0x05
    2cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cde:	9a 83       	std	Y+2, r25	; 0x02
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <HStepper_SetStepsDirection+0xab0>
    2cea:	9a 83       	std	Y+2, r25	; 0x02
    2cec:	89 83       	std	Y+1, r24	; 0x01
					}
			break;

                                        /* counter clock wise*/
		case CCW :
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2cee:	de 01       	movw	r26, r28
    2cf0:	af 58       	subi	r26, 0x8F	; 143
    2cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	ef 58       	subi	r30, 0x8F	; 143
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	01 96       	adiw	r24, 0x01	; 1
    2d00:	8d 93       	st	X+, r24
    2d02:	9c 93       	st	X, r25
    2d04:	fe 01       	movw	r30, r28
    2d06:	ef 58       	subi	r30, 0x8F	; 143
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	de 01       	movw	r26, r28
    2d0c:	ab 58       	subi	r26, 0x8B	; 139
    2d0e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d10:	20 81       	ld	r18, Z
    2d12:	31 81       	ldd	r19, Z+1	; 0x01
    2d14:	8d 91       	ld	r24, X+
    2d16:	9c 91       	ld	r25, X
    2d18:	11 97       	sbiw	r26, 0x01	; 1
    2d1a:	28 17       	cp	r18, r24
    2d1c:	39 07       	cpc	r19, r25
    2d1e:	08 f4       	brcc	.+2      	; 0x2d22 <HStepper_SetStepsDirection+0xaec>
    2d20:	ce cd       	rjmp	.-1124   	; 0x28be <HStepper_SetStepsDirection+0x688>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
				_delay_ms(MAX_SPEED_DELAY);
				}
			break;
		}
}
    2d22:	c7 58       	subi	r28, 0x87	; 135
    2d24:	df 4f       	sbci	r29, 0xFF	; 255
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	1f 91       	pop	r17
    2d36:	0f 91       	pop	r16
    2d38:	08 95       	ret

00002d3a <HLED_Errorstate_Led_Init>:


/*******led initialize       ***********/

ErrorState HLED_Errorstate_Led_Init( LED_T* copy_LED_object)
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <HLED_Errorstate_Led_Init+0x6>
    2d40:	0f 92       	push	r0
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	9b 83       	std	Y+3, r25	; 0x03
    2d48:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	89 83       	std	Y+1, r24	; 0x01
	Loc_ErrorState_Error_state = MDIO_Errorstate_SetPinDirection(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_OUTPUT);
    2d4e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d50:	fb 81       	ldd	r31, Y+3	; 0x03
    2d52:	80 81       	ld	r24, Z
    2d54:	ea 81       	ldd	r30, Y+2	; 0x02
    2d56:	fb 81       	ldd	r31, Y+3	; 0x03
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	69 2f       	mov	r22, r25
    2d5c:	41 e0       	ldi	r20, 0x01	; 1
    2d5e:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
    2d62:	89 83       	std	Y+1, r24	; 0x01
		return Loc_ErrorState_Error_state;
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	08 95       	ret

00002d72 <HLED_Errorstate_Led_On>:

/********* led on              ***********/
ErrorState HLED_Errorstate_Led_On(LED_T* copy_LED_object)
{
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <HLED_Errorstate_Led_On+0x6>
    2d78:	0f 92       	push	r0
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	9b 83       	std	Y+3, r25	; 0x03
    2d80:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	89 83       	std	Y+1, r24	; 0x01

	if(copy_LED_object->LedActiveState==ACTIVE_HIGH)
    2d86:	ea 81       	ldd	r30, Y+2	; 0x02
    2d88:	fb 81       	ldd	r31, Y+3	; 0x03
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	81 30       	cpi	r24, 0x01	; 1
    2d8e:	59 f4       	brne	.+22     	; 0x2da6 <HLED_Errorstate_Led_On+0x34>
	{
		MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    2d90:	ea 81       	ldd	r30, Y+2	; 0x02
    2d92:	fb 81       	ldd	r31, Y+3	; 0x03
    2d94:	80 81       	ld	r24, Z
    2d96:	ea 81       	ldd	r30, Y+2	; 0x02
    2d98:	fb 81       	ldd	r31, Y+3	; 0x03
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	69 2f       	mov	r22, r25
    2d9e:	41 e0       	ldi	r20, 0x01	; 1
    2da0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    2da4:	11 c0       	rjmp	.+34     	; 0x2dc8 <HLED_Errorstate_Led_On+0x56>
	}
	else if(copy_LED_object->LedActiveState==ACTIVE_LOW)
    2da6:	ea 81       	ldd	r30, Y+2	; 0x02
    2da8:	fb 81       	ldd	r31, Y+3	; 0x03
    2daa:	82 81       	ldd	r24, Z+2	; 0x02
    2dac:	88 23       	and	r24, r24
    2dae:	59 f4       	brne	.+22     	; 0x2dc6 <HLED_Errorstate_Led_On+0x54>
	{
		MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    2db0:	ea 81       	ldd	r30, Y+2	; 0x02
    2db2:	fb 81       	ldd	r31, Y+3	; 0x03
    2db4:	80 81       	ld	r24, Z
    2db6:	ea 81       	ldd	r30, Y+2	; 0x02
    2db8:	fb 81       	ldd	r31, Y+3	; 0x03
    2dba:	91 81       	ldd	r25, Z+1	; 0x01
    2dbc:	69 2f       	mov	r22, r25
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    2dc4:	01 c0       	rjmp	.+2      	; 0x2dc8 <HLED_Errorstate_Led_On+0x56>
	}
	else
	{
		Loc_ErrorState_Error_state=NOK;
    2dc6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_ErrorState_Error_state;
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <HLED_Errorstate_Led_Off>:

/***                        led off                  ****/
	ErrorState HLED_Errorstate_Led_Off(LED_T* copy_LED_object)
	{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <HLED_Errorstate_Led_Off+0x6>
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	9b 83       	std	Y+3, r25	; 0x03
    2de4:	8a 83       	std	Y+2, r24	; 0x02
		ErrorState Loc_ErrorState_Error_state=OK;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	89 83       	std	Y+1, r24	; 0x01

		if(copy_LED_object->LedActiveState==ACTIVE_HIGH)
    2dea:	ea 81       	ldd	r30, Y+2	; 0x02
    2dec:	fb 81       	ldd	r31, Y+3	; 0x03
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	81 30       	cpi	r24, 0x01	; 1
    2df2:	59 f4       	brne	.+22     	; 0x2e0a <HLED_Errorstate_Led_Off+0x34>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    2df4:	ea 81       	ldd	r30, Y+2	; 0x02
    2df6:	fb 81       	ldd	r31, Y+3	; 0x03
    2df8:	80 81       	ld	r24, Z
    2dfa:	ea 81       	ldd	r30, Y+2	; 0x02
    2dfc:	fb 81       	ldd	r31, Y+3	; 0x03
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	69 2f       	mov	r22, r25
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    2e08:	11 c0       	rjmp	.+34     	; 0x2e2c <HLED_Errorstate_Led_Off+0x56>
		}
		else if(copy_LED_object->LedActiveState==ACTIVE_LOW)
    2e0a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e0c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	88 23       	and	r24, r24
    2e12:	59 f4       	brne	.+22     	; 0x2e2a <HLED_Errorstate_Led_Off+0x54>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    2e14:	ea 81       	ldd	r30, Y+2	; 0x02
    2e16:	fb 81       	ldd	r31, Y+3	; 0x03
    2e18:	80 81       	ld	r24, Z
    2e1a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e1c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
    2e20:	69 2f       	mov	r22, r25
    2e22:	41 e0       	ldi	r20, 0x01	; 1
    2e24:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    2e28:	01 c0       	rjmp	.+2      	; 0x2e2c <HLED_Errorstate_Led_Off+0x56>
		}
		else
		{
			Loc_ErrorState_Error_state=NOK;
    2e2a:	19 82       	std	Y+1, r1	; 0x01
		}

		return Loc_ErrorState_Error_state;
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
		}
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <HLED_Errorstate_Led_Toggle>:

	ErrorState HLED_Errorstate_Led_Toggle(LED_T* copy_LED_object)
	{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <HLED_Errorstate_Led_Toggle+0x6>
    2e40:	0f 92       	push	r0
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	9b 83       	std	Y+3, r25	; 0x03
    2e48:	8a 83       	std	Y+2, r24	; 0x02
		static uint8 flag=0; // imp
		ErrorState Loc_ErrorState_Error_state=OK;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	89 83       	std	Y+1, r24	; 0x01
		if(flag==0)
    2e4e:	80 91 82 00 	lds	r24, 0x0082
    2e52:	88 23       	and	r24, r24
    2e54:	71 f4       	brne	.+28     	; 0x2e72 <HLED_Errorstate_Led_Toggle+0x38>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    2e56:	ea 81       	ldd	r30, Y+2	; 0x02
    2e58:	fb 81       	ldd	r31, Y+3	; 0x03
    2e5a:	80 81       	ld	r24, Z
    2e5c:	ea 81       	ldd	r30, Y+2	; 0x02
    2e5e:	fb 81       	ldd	r31, Y+3	; 0x03
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	69 2f       	mov	r22, r25
    2e64:	41 e0       	ldi	r20, 0x01	; 1
    2e66:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
			flag=1;
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	80 93 82 00 	sts	0x0082, r24
    2e70:	10 c0       	rjmp	.+32     	; 0x2e92 <HLED_Errorstate_Led_Toggle+0x58>
		}
		else if(flag==1)
    2e72:	80 91 82 00 	lds	r24, 0x0082
    2e76:	81 30       	cpi	r24, 0x01	; 1
    2e78:	61 f4       	brne	.+24     	; 0x2e92 <HLED_Errorstate_Led_Toggle+0x58>
		{

			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    2e7a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e7c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e7e:	80 81       	ld	r24, Z
    2e80:	ea 81       	ldd	r30, Y+2	; 0x02
    2e82:	fb 81       	ldd	r31, Y+3	; 0x03
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	69 2f       	mov	r22, r25
    2e88:	40 e0       	ldi	r20, 0x00	; 0
    2e8a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
			flag=0;
    2e8e:	10 92 82 00 	sts	0x0082, r1
		}
		else
		{
			/*do nothing*/
		}
		return Loc_ErrorState_Error_state;
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	cf 91       	pop	r28
    2e9c:	df 91       	pop	r29
    2e9e:	08 95       	ret

00002ea0 <HKPD_VidInit>:
				'D'
		}
};
/* keypad init */
void HKPD_VidInit(void)
{
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
	/*Set Row PINS AS AN inPUT*/
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN0,PIN_INPUT);
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	40 e0       	ldi	r20, 0x00	; 0
    2eae:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN1,PIN_INPUT);
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	61 e0       	ldi	r22, 0x01	; 1
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN2,PIN_INPUT);
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	62 e0       	ldi	r22, 0x02	; 2
    2ec0:	40 e0       	ldi	r20, 0x00	; 0
    2ec2:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN3,PIN_INPUT);
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	63 e0       	ldi	r22, 0x03	; 3
    2eca:	40 e0       	ldi	r20, 0x00	; 0
    2ecc:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>

	/*Active internal  PULL UP RESISTOR for Row PINS*/
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN0,PIN_HIGH);
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	60 e0       	ldi	r22, 0x00	; 0
    2ed4:	41 e0       	ldi	r20, 0x01	; 1
    2ed6:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN1,PIN_HIGH);
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	61 e0       	ldi	r22, 0x01	; 1
    2ede:	41 e0       	ldi	r20, 0x01	; 1
    2ee0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN2,PIN_HIGH);
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	62 e0       	ldi	r22, 0x02	; 2
    2ee8:	41 e0       	ldi	r20, 0x01	; 1
    2eea:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN3,PIN_HIGH);
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	63 e0       	ldi	r22, 0x03	; 3
    2ef2:	41 e0       	ldi	r20, 0x01	; 1
    2ef4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>

	/*Set COLOUM PINS AS AN OUTPUTS*/
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN0,PIN_OUTPUT);
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	64 e0       	ldi	r22, 0x04	; 4
    2efc:	41 e0       	ldi	r20, 0x01	; 1
    2efe:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN1,PIN_OUTPUT);
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	65 e0       	ldi	r22, 0x05	; 5
    2f06:	41 e0       	ldi	r20, 0x01	; 1
    2f08:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN2,PIN_OUTPUT);
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	66 e0       	ldi	r22, 0x06	; 6
    2f10:	41 e0       	ldi	r20, 0x01	; 1
    2f12:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN3,PIN_OUTPUT);
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	67 e0       	ldi	r22, 0x07	; 7
    2f1a:	41 e0       	ldi	r20, 0x01	; 1
    2f1c:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>

	/* Set COLOUM PINS initial value --> one*/
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN0,PIN_HIGH);
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	64 e0       	ldi	r22, 0x04	; 4
    2f24:	41 e0       	ldi	r20, 0x01	; 1
    2f26:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN1,PIN_HIGH);
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	65 e0       	ldi	r22, 0x05	; 5
    2f2e:	41 e0       	ldi	r20, 0x01	; 1
    2f30:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN2,PIN_HIGH);
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	66 e0       	ldi	r22, 0x06	; 6
    2f38:	41 e0       	ldi	r20, 0x01	; 1
    2f3a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN3,PIN_HIGH);
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	67 e0       	ldi	r22, 0x07	; 7
    2f42:	41 e0       	ldi	r20, 0x01	; 1
    2f44:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
}
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <HKPD_uint8GetPressed>:

  /* keypad pressed */

uint8 HKPD_uint8GetPressed(void)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	62 97       	sbiw	r28, 0x12	; 18
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
	uint8 Loc_uint8ColCount=0;
    2f62:	19 8a       	std	Y+17, r1	; 0x11
	uint8 Loc_uint8RowCount=0;
    2f64:	18 8a       	std	Y+16, r1	; 0x10
	uint8 Loc_uint8KeyState;
	uint8 Loc_uint8KeyValue=HKPD_NOTPRESSED;
    2f66:	8f ef       	ldi	r24, 0xFF	; 255
    2f68:	8f 87       	std	Y+15, r24	; 0x0f

	for(Loc_uint8ColCount=HKPD_COLINIT ; Loc_uint8ColCount<HKPD_COLEND; Loc_uint8ColCount++)
    2f6a:	84 e0       	ldi	r24, 0x04	; 4
    2f6c:	89 8b       	std	Y+17, r24	; 0x11
    2f6e:	b4 c0       	rjmp	.+360    	; 0x30d8 <HKPD_uint8GetPressed+0x18a>
	{
		/*Select COLOUM*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_LOW);
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	69 89       	ldd	r22, Y+17	; 0x11
    2f74:	40 e0       	ldi	r20, 0x00	; 0
    2f76:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>

		/*select row*/

		for(Loc_uint8RowCount=HKPD_ROWINIT;Loc_uint8RowCount<HKPD_ROWEND;Loc_uint8RowCount++)
    2f7a:	18 8a       	std	Y+16, r1	; 0x10
    2f7c:	a1 c0       	rjmp	.+322    	; 0x30c0 <HKPD_uint8GetPressed+0x172>
		{
			MDIO_Errorstate_GetPinValue(HKPD_ROWPORT,Loc_uint8RowCount,&Loc_uint8KeyState);
    2f7e:	9e 01       	movw	r18, r28
    2f80:	2e 5e       	subi	r18, 0xEE	; 238
    2f82:	3f 4f       	sbci	r19, 0xFF	; 255
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	68 89       	ldd	r22, Y+16	; 0x10
    2f88:	a9 01       	movw	r20, r18
    2f8a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <MDIO_Errorstate_GetPinValue>

			if(Loc_uint8KeyState==0)
    2f8e:	8a 89       	ldd	r24, Y+18	; 0x12
    2f90:	88 23       	and	r24, r24
    2f92:	a9 f4       	brne	.+42     	; 0x2fbe <HKPD_uint8GetPressed+0x70>
			{
				Loc_uint8KeyValue=KPD_uint8Values[Loc_uint8ColCount-HKPD_COLINIT][Loc_uint8RowCount-HKPD_ROWINIT];
    2f94:	89 89       	ldd	r24, Y+17	; 0x11
    2f96:	88 2f       	mov	r24, r24
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	ac 01       	movw	r20, r24
    2f9c:	44 50       	subi	r20, 0x04	; 4
    2f9e:	50 40       	sbci	r21, 0x00	; 0
    2fa0:	88 89       	ldd	r24, Y+16	; 0x10
    2fa2:	28 2f       	mov	r18, r24
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	ca 01       	movw	r24, r20
    2fa8:	88 0f       	add	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	88 0f       	add	r24, r24
    2fae:	99 1f       	adc	r25, r25
    2fb0:	82 0f       	add	r24, r18
    2fb2:	93 1f       	adc	r25, r19
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	ee 58       	subi	r30, 0x8E	; 142
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	80 81       	ld	r24, Z
    2fbc:	8f 87       	std	Y+15, r24	; 0x0f
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	a0 ea       	ldi	r26, 0xA0	; 160
    2fc4:	b1 e4       	ldi	r27, 0x41	; 65
    2fc6:	8b 87       	std	Y+11, r24	; 0x0b
    2fc8:	9c 87       	std	Y+12, r25	; 0x0c
    2fca:	ad 87       	std	Y+13, r26	; 0x0d
    2fcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	4a e7       	ldi	r20, 0x7A	; 122
    2fdc:	55 e4       	ldi	r21, 0x45	; 69
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	8f 83       	std	Y+7, r24	; 0x07
    2fe8:	98 87       	std	Y+8, r25	; 0x08
    2fea:	a9 87       	std	Y+9, r26	; 0x09
    2fec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff0:	78 85       	ldd	r23, Y+8	; 0x08
    2ff2:	89 85       	ldd	r24, Y+9	; 0x09
    2ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e8       	ldi	r20, 0x80	; 128
    2ffc:	5f e3       	ldi	r21, 0x3F	; 63
    2ffe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3002:	88 23       	and	r24, r24
    3004:	2c f4       	brge	.+10     	; 0x3010 <HKPD_uint8GetPressed+0xc2>
		__ticks = 1;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	9e 83       	std	Y+6, r25	; 0x06
    300c:	8d 83       	std	Y+5, r24	; 0x05
    300e:	3f c0       	rjmp	.+126    	; 0x308e <HKPD_uint8GetPressed+0x140>
	else if (__tmp > 65535)
    3010:	6f 81       	ldd	r22, Y+7	; 0x07
    3012:	78 85       	ldd	r23, Y+8	; 0x08
    3014:	89 85       	ldd	r24, Y+9	; 0x09
    3016:	9a 85       	ldd	r25, Y+10	; 0x0a
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	3f ef       	ldi	r19, 0xFF	; 255
    301c:	4f e7       	ldi	r20, 0x7F	; 127
    301e:	57 e4       	ldi	r21, 0x47	; 71
    3020:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3024:	18 16       	cp	r1, r24
    3026:	4c f5       	brge	.+82     	; 0x307a <HKPD_uint8GetPressed+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3028:	6b 85       	ldd	r22, Y+11	; 0x0b
    302a:	7c 85       	ldd	r23, Y+12	; 0x0c
    302c:	8d 85       	ldd	r24, Y+13	; 0x0d
    302e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e2       	ldi	r20, 0x20	; 32
    3036:	51 e4       	ldi	r21, 0x41	; 65
    3038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	8d 83       	std	Y+5, r24	; 0x05
    3050:	0f c0       	rjmp	.+30     	; 0x3070 <HKPD_uint8GetPressed+0x122>
    3052:	80 e9       	ldi	r24, 0x90	; 144
    3054:	91 e0       	ldi	r25, 0x01	; 1
    3056:	9c 83       	std	Y+4, r25	; 0x04
    3058:	8b 83       	std	Y+3, r24	; 0x03
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	9c 81       	ldd	r25, Y+4	; 0x04
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <HKPD_uint8GetPressed+0x110>
    3062:	9c 83       	std	Y+4, r25	; 0x04
    3064:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	9e 81       	ldd	r25, Y+6	; 0x06
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	9e 83       	std	Y+6, r25	; 0x06
    306e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3070:	8d 81       	ldd	r24, Y+5	; 0x05
    3072:	9e 81       	ldd	r25, Y+6	; 0x06
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	69 f7       	brne	.-38     	; 0x3052 <HKPD_uint8GetPressed+0x104>
    3078:	1d c0       	rjmp	.+58     	; 0x30b4 <HKPD_uint8GetPressed+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307a:	6f 81       	ldd	r22, Y+7	; 0x07
    307c:	78 85       	ldd	r23, Y+8	; 0x08
    307e:	89 85       	ldd	r24, Y+9	; 0x09
    3080:	9a 85       	ldd	r25, Y+10	; 0x0a
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9e 83       	std	Y+6, r25	; 0x06
    308c:	8d 83       	std	Y+5, r24	; 0x05
    308e:	8d 81       	ldd	r24, Y+5	; 0x05
    3090:	9e 81       	ldd	r25, Y+6	; 0x06
    3092:	9a 83       	std	Y+2, r25	; 0x02
    3094:	89 83       	std	Y+1, r24	; 0x01
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	9a 81       	ldd	r25, Y+2	; 0x02
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <HKPD_uint8GetPressed+0x14c>
    309e:	9a 83       	std	Y+2, r25	; 0x02
    30a0:	89 83       	std	Y+1, r24	; 0x01
    30a2:	08 c0       	rjmp	.+16     	; 0x30b4 <HKPD_uint8GetPressed+0x166>
			_delay_ms(20);

			/*to do one press*/
			while(Loc_uint8KeyState==0)
			{
				MDIO_Errorstate_GetPinValue(HKPD_ROWPORT,Loc_uint8RowCount,&Loc_uint8KeyState);
    30a4:	9e 01       	movw	r18, r28
    30a6:	2e 5e       	subi	r18, 0xEE	; 238
    30a8:	3f 4f       	sbci	r19, 0xFF	; 255
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	68 89       	ldd	r22, Y+16	; 0x10
    30ae:	a9 01       	movw	r20, r18
    30b0:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <MDIO_Errorstate_GetPinValue>

			/* DE_POuncing*/
			_delay_ms(20);

			/*to do one press*/
			while(Loc_uint8KeyState==0)
    30b4:	8a 89       	ldd	r24, Y+18	; 0x12
    30b6:	88 23       	and	r24, r24
    30b8:	a9 f3       	breq	.-22     	; 0x30a4 <HKPD_uint8GetPressed+0x156>

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_LOW);

		/*select row*/

		for(Loc_uint8RowCount=HKPD_ROWINIT;Loc_uint8RowCount<HKPD_ROWEND;Loc_uint8RowCount++)
    30ba:	88 89       	ldd	r24, Y+16	; 0x10
    30bc:	8f 5f       	subi	r24, 0xFF	; 255
    30be:	88 8b       	std	Y+16, r24	; 0x10
    30c0:	88 89       	ldd	r24, Y+16	; 0x10
    30c2:	84 30       	cpi	r24, 0x04	; 4
    30c4:	08 f4       	brcc	.+2      	; 0x30c8 <HKPD_uint8GetPressed+0x17a>
    30c6:	5b cf       	rjmp	.-330    	; 0x2f7e <HKPD_uint8GetPressed+0x30>
			}
		}

		/*DE_Activate for coloum*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_HIGH);
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	69 89       	ldd	r22, Y+17	; 0x11
    30cc:	41 e0       	ldi	r20, 0x01	; 1
    30ce:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	uint8 Loc_uint8ColCount=0;
	uint8 Loc_uint8RowCount=0;
	uint8 Loc_uint8KeyState;
	uint8 Loc_uint8KeyValue=HKPD_NOTPRESSED;

	for(Loc_uint8ColCount=HKPD_COLINIT ; Loc_uint8ColCount<HKPD_COLEND; Loc_uint8ColCount++)
    30d2:	89 89       	ldd	r24, Y+17	; 0x11
    30d4:	8f 5f       	subi	r24, 0xFF	; 255
    30d6:	89 8b       	std	Y+17, r24	; 0x11
    30d8:	89 89       	ldd	r24, Y+17	; 0x11
    30da:	88 30       	cpi	r24, 0x08	; 8
    30dc:	08 f4       	brcc	.+2      	; 0x30e0 <HKPD_uint8GetPressed+0x192>
    30de:	48 cf       	rjmp	.-368    	; 0x2f70 <HKPD_uint8GetPressed+0x22>

		/*DE_Activate for coloum*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_HIGH);
	}
	return Loc_uint8KeyValue;
    30e0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    30e2:	62 96       	adiw	r28, 0x12	; 18
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	cf 91       	pop	r28
    30f0:	df 91       	pop	r29
    30f2:	08 95       	ret

000030f4 <HAL_VidHCLCD_4BitModeWriteCommand>:
#include"HCLCD_Config.h"
#define F_CPU   16000000UL
#include"util/delay.h"

void HAL_VidHCLCD_4BitModeWriteCommand(uint8 Copy_uint8Command)
{
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	2f 97       	sbiw	r28, 0x0f	; 15
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	8f 87       	std	Y+15, r24	; 0x0f
	/*Select Command Register-->LOW*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_LOW);
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	61 e0       	ldi	r22, 0x01	; 1
    310e:	40 e0       	ldi	r20, 0x00	; 0
    3110:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	62 e0       	ldi	r22, 0x02	; 2
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	/*Send Command*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,Copy_uint8Command);
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	6f 85       	ldd	r22, Y+15	; 0x0f
    3122:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	63 e0       	ldi	r22, 0x03	; 3
    312a:	41 e0       	ldi	r20, 0x01	; 1
    312c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	a0 e0       	ldi	r26, 0x00	; 0
    3136:	b0 e4       	ldi	r27, 0x40	; 64
    3138:	8b 87       	std	Y+11, r24	; 0x0b
    313a:	9c 87       	std	Y+12, r25	; 0x0c
    313c:	ad 87       	std	Y+13, r26	; 0x0d
    313e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3140:	6b 85       	ldd	r22, Y+11	; 0x0b
    3142:	7c 85       	ldd	r23, Y+12	; 0x0c
    3144:	8d 85       	ldd	r24, Y+13	; 0x0d
    3146:	9e 85       	ldd	r25, Y+14	; 0x0e
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	4a e7       	ldi	r20, 0x7A	; 122
    314e:	55 e4       	ldi	r21, 0x45	; 69
    3150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	8f 83       	std	Y+7, r24	; 0x07
    315a:	98 87       	std	Y+8, r25	; 0x08
    315c:	a9 87       	std	Y+9, r26	; 0x09
    315e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3160:	6f 81       	ldd	r22, Y+7	; 0x07
    3162:	78 85       	ldd	r23, Y+8	; 0x08
    3164:	89 85       	ldd	r24, Y+9	; 0x09
    3166:	9a 85       	ldd	r25, Y+10	; 0x0a
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e8       	ldi	r20, 0x80	; 128
    316e:	5f e3       	ldi	r21, 0x3F	; 63
    3170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3174:	88 23       	and	r24, r24
    3176:	2c f4       	brge	.+10     	; 0x3182 <HAL_VidHCLCD_4BitModeWriteCommand+0x8e>
		__ticks = 1;
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	9e 83       	std	Y+6, r25	; 0x06
    317e:	8d 83       	std	Y+5, r24	; 0x05
    3180:	3f c0       	rjmp	.+126    	; 0x3200 <HAL_VidHCLCD_4BitModeWriteCommand+0x10c>
	else if (__tmp > 65535)
    3182:	6f 81       	ldd	r22, Y+7	; 0x07
    3184:	78 85       	ldd	r23, Y+8	; 0x08
    3186:	89 85       	ldd	r24, Y+9	; 0x09
    3188:	9a 85       	ldd	r25, Y+10	; 0x0a
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	3f ef       	ldi	r19, 0xFF	; 255
    318e:	4f e7       	ldi	r20, 0x7F	; 127
    3190:	57 e4       	ldi	r21, 0x47	; 71
    3192:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3196:	18 16       	cp	r1, r24
    3198:	4c f5       	brge	.+82     	; 0x31ec <HAL_VidHCLCD_4BitModeWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319a:	6b 85       	ldd	r22, Y+11	; 0x0b
    319c:	7c 85       	ldd	r23, Y+12	; 0x0c
    319e:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	40 e2       	ldi	r20, 0x20	; 32
    31a8:	51 e4       	ldi	r21, 0x41	; 65
    31aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	bc 01       	movw	r22, r24
    31b4:	cd 01       	movw	r24, r26
    31b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	9e 83       	std	Y+6, r25	; 0x06
    31c0:	8d 83       	std	Y+5, r24	; 0x05
    31c2:	0f c0       	rjmp	.+30     	; 0x31e2 <HAL_VidHCLCD_4BitModeWriteCommand+0xee>
    31c4:	80 e9       	ldi	r24, 0x90	; 144
    31c6:	91 e0       	ldi	r25, 0x01	; 1
    31c8:	9c 83       	std	Y+4, r25	; 0x04
    31ca:	8b 83       	std	Y+3, r24	; 0x03
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	9c 81       	ldd	r25, Y+4	; 0x04
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	f1 f7       	brne	.-4      	; 0x31d0 <HAL_VidHCLCD_4BitModeWriteCommand+0xdc>
    31d4:	9c 83       	std	Y+4, r25	; 0x04
    31d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d8:	8d 81       	ldd	r24, Y+5	; 0x05
    31da:	9e 81       	ldd	r25, Y+6	; 0x06
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	9e 83       	std	Y+6, r25	; 0x06
    31e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e2:	8d 81       	ldd	r24, Y+5	; 0x05
    31e4:	9e 81       	ldd	r25, Y+6	; 0x06
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	69 f7       	brne	.-38     	; 0x31c4 <HAL_VidHCLCD_4BitModeWriteCommand+0xd0>
    31ea:	14 c0       	rjmp	.+40     	; 0x3214 <HAL_VidHCLCD_4BitModeWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ec:	6f 81       	ldd	r22, Y+7	; 0x07
    31ee:	78 85       	ldd	r23, Y+8	; 0x08
    31f0:	89 85       	ldd	r24, Y+9	; 0x09
    31f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	9e 83       	std	Y+6, r25	; 0x06
    31fe:	8d 83       	std	Y+5, r24	; 0x05
    3200:	8d 81       	ldd	r24, Y+5	; 0x05
    3202:	9e 81       	ldd	r25, Y+6	; 0x06
    3204:	9a 83       	std	Y+2, r25	; 0x02
    3206:	89 83       	std	Y+1, r24	; 0x01
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	9a 81       	ldd	r25, Y+2	; 0x02
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <HAL_VidHCLCD_4BitModeWriteCommand+0x118>
    3210:	9a 83       	std	Y+2, r25	; 0x02
    3212:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	63 e0       	ldi	r22, 0x03	; 3
    3218:	40 e0       	ldi	r20, 0x00	; 0
    321a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
}
    321e:	2f 96       	adiw	r28, 0x0f	; 15
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	08 95       	ret

00003230 <HAL_VidHCLCD_4BitModeWriteChar>:
void HAL_VidHCLCD_4BitModeWriteChar(uint8 Copy_uint8Char)
{
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	6d 97       	sbiw	r28, 0x1d	; 29
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	f8 94       	cli
    323e:	de bf       	out	0x3e, r29	; 62
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	cd bf       	out	0x3d, r28	; 61
    3244:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data Register-->HIGH*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_HIGH);
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	61 e0       	ldi	r22, 0x01	; 1
    324a:	41 e0       	ldi	r20, 0x01	; 1
    324c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	62 e0       	ldi	r22, 0x02	; 2
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	/*Send 4 Most Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char&0xF0));
    325a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    325c:	98 2f       	mov	r25, r24
    325e:	90 7f       	andi	r25, 0xF0	; 240
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	69 2f       	mov	r22, r25
    3264:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	63 e0       	ldi	r22, 0x03	; 3
    326c:	41 e0       	ldi	r20, 0x01	; 1
    326e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	a0 e0       	ldi	r26, 0x00	; 0
    3278:	b0 e4       	ldi	r27, 0x40	; 64
    327a:	89 8f       	std	Y+25, r24	; 0x19
    327c:	9a 8f       	std	Y+26, r25	; 0x1a
    327e:	ab 8f       	std	Y+27, r26	; 0x1b
    3280:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3282:	69 8d       	ldd	r22, Y+25	; 0x19
    3284:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3288:	9c 8d       	ldd	r25, Y+28	; 0x1c
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	4a e7       	ldi	r20, 0x7A	; 122
    3290:	55 e4       	ldi	r21, 0x45	; 69
    3292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	8d 8b       	std	Y+21, r24	; 0x15
    329c:	9e 8b       	std	Y+22, r25	; 0x16
    329e:	af 8b       	std	Y+23, r26	; 0x17
    32a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32a2:	6d 89       	ldd	r22, Y+21	; 0x15
    32a4:	7e 89       	ldd	r23, Y+22	; 0x16
    32a6:	8f 89       	ldd	r24, Y+23	; 0x17
    32a8:	98 8d       	ldd	r25, Y+24	; 0x18
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e8       	ldi	r20, 0x80	; 128
    32b0:	5f e3       	ldi	r21, 0x3F	; 63
    32b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b6:	88 23       	and	r24, r24
    32b8:	2c f4       	brge	.+10     	; 0x32c4 <HAL_VidHCLCD_4BitModeWriteChar+0x94>
		__ticks = 1;
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	9c 8b       	std	Y+20, r25	; 0x14
    32c0:	8b 8b       	std	Y+19, r24	; 0x13
    32c2:	3f c0       	rjmp	.+126    	; 0x3342 <HAL_VidHCLCD_4BitModeWriteChar+0x112>
	else if (__tmp > 65535)
    32c4:	6d 89       	ldd	r22, Y+21	; 0x15
    32c6:	7e 89       	ldd	r23, Y+22	; 0x16
    32c8:	8f 89       	ldd	r24, Y+23	; 0x17
    32ca:	98 8d       	ldd	r25, Y+24	; 0x18
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	3f ef       	ldi	r19, 0xFF	; 255
    32d0:	4f e7       	ldi	r20, 0x7F	; 127
    32d2:	57 e4       	ldi	r21, 0x47	; 71
    32d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32d8:	18 16       	cp	r1, r24
    32da:	4c f5       	brge	.+82     	; 0x332e <HAL_VidHCLCD_4BitModeWriteChar+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32dc:	69 8d       	ldd	r22, Y+25	; 0x19
    32de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	40 e2       	ldi	r20, 0x20	; 32
    32ea:	51 e4       	ldi	r21, 0x41	; 65
    32ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	bc 01       	movw	r22, r24
    32f6:	cd 01       	movw	r24, r26
    32f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	9c 8b       	std	Y+20, r25	; 0x14
    3302:	8b 8b       	std	Y+19, r24	; 0x13
    3304:	0f c0       	rjmp	.+30     	; 0x3324 <HAL_VidHCLCD_4BitModeWriteChar+0xf4>
    3306:	80 e9       	ldi	r24, 0x90	; 144
    3308:	91 e0       	ldi	r25, 0x01	; 1
    330a:	9a 8b       	std	Y+18, r25	; 0x12
    330c:	89 8b       	std	Y+17, r24	; 0x11
    330e:	89 89       	ldd	r24, Y+17	; 0x11
    3310:	9a 89       	ldd	r25, Y+18	; 0x12
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <HAL_VidHCLCD_4BitModeWriteChar+0xe2>
    3316:	9a 8b       	std	Y+18, r25	; 0x12
    3318:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331a:	8b 89       	ldd	r24, Y+19	; 0x13
    331c:	9c 89       	ldd	r25, Y+20	; 0x14
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	9c 8b       	std	Y+20, r25	; 0x14
    3322:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3324:	8b 89       	ldd	r24, Y+19	; 0x13
    3326:	9c 89       	ldd	r25, Y+20	; 0x14
    3328:	00 97       	sbiw	r24, 0x00	; 0
    332a:	69 f7       	brne	.-38     	; 0x3306 <HAL_VidHCLCD_4BitModeWriteChar+0xd6>
    332c:	14 c0       	rjmp	.+40     	; 0x3356 <HAL_VidHCLCD_4BitModeWriteChar+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    332e:	6d 89       	ldd	r22, Y+21	; 0x15
    3330:	7e 89       	ldd	r23, Y+22	; 0x16
    3332:	8f 89       	ldd	r24, Y+23	; 0x17
    3334:	98 8d       	ldd	r25, Y+24	; 0x18
    3336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	9c 8b       	std	Y+20, r25	; 0x14
    3340:	8b 8b       	std	Y+19, r24	; 0x13
    3342:	8b 89       	ldd	r24, Y+19	; 0x13
    3344:	9c 89       	ldd	r25, Y+20	; 0x14
    3346:	98 8b       	std	Y+16, r25	; 0x10
    3348:	8f 87       	std	Y+15, r24	; 0x0f
    334a:	8f 85       	ldd	r24, Y+15	; 0x0f
    334c:	98 89       	ldd	r25, Y+16	; 0x10
    334e:	01 97       	sbiw	r24, 0x01	; 1
    3350:	f1 f7       	brne	.-4      	; 0x334e <HAL_VidHCLCD_4BitModeWriteChar+0x11e>
    3352:	98 8b       	std	Y+16, r25	; 0x10
    3354:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	63 e0       	ldi	r22, 0x03	; 3
    335a:	40 e0       	ldi	r20, 0x00	; 0
    335c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
	/*Send 4 Least Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char<<4));
    3360:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3362:	98 2f       	mov	r25, r24
    3364:	92 95       	swap	r25
    3366:	90 7f       	andi	r25, 0xF0	; 240
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	69 2f       	mov	r22, r25
    336c:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	63 e0       	ldi	r22, 0x03	; 3
    3374:	41 e0       	ldi	r20, 0x01	; 1
    3376:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	a0 e0       	ldi	r26, 0x00	; 0
    3380:	b0 e4       	ldi	r27, 0x40	; 64
    3382:	8b 87       	std	Y+11, r24	; 0x0b
    3384:	9c 87       	std	Y+12, r25	; 0x0c
    3386:	ad 87       	std	Y+13, r26	; 0x0d
    3388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    338a:	6b 85       	ldd	r22, Y+11	; 0x0b
    338c:	7c 85       	ldd	r23, Y+12	; 0x0c
    338e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3390:	9e 85       	ldd	r25, Y+14	; 0x0e
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	4a e7       	ldi	r20, 0x7A	; 122
    3398:	55 e4       	ldi	r21, 0x45	; 69
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	8f 83       	std	Y+7, r24	; 0x07
    33a4:	98 87       	std	Y+8, r25	; 0x08
    33a6:	a9 87       	std	Y+9, r26	; 0x09
    33a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33aa:	6f 81       	ldd	r22, Y+7	; 0x07
    33ac:	78 85       	ldd	r23, Y+8	; 0x08
    33ae:	89 85       	ldd	r24, Y+9	; 0x09
    33b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e8       	ldi	r20, 0x80	; 128
    33b8:	5f e3       	ldi	r21, 0x3F	; 63
    33ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33be:	88 23       	and	r24, r24
    33c0:	2c f4       	brge	.+10     	; 0x33cc <HAL_VidHCLCD_4BitModeWriteChar+0x19c>
		__ticks = 1;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	9e 83       	std	Y+6, r25	; 0x06
    33c8:	8d 83       	std	Y+5, r24	; 0x05
    33ca:	3f c0       	rjmp	.+126    	; 0x344a <HAL_VidHCLCD_4BitModeWriteChar+0x21a>
	else if (__tmp > 65535)
    33cc:	6f 81       	ldd	r22, Y+7	; 0x07
    33ce:	78 85       	ldd	r23, Y+8	; 0x08
    33d0:	89 85       	ldd	r24, Y+9	; 0x09
    33d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	3f ef       	ldi	r19, 0xFF	; 255
    33d8:	4f e7       	ldi	r20, 0x7F	; 127
    33da:	57 e4       	ldi	r21, 0x47	; 71
    33dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33e0:	18 16       	cp	r1, r24
    33e2:	4c f5       	brge	.+82     	; 0x3436 <HAL_VidHCLCD_4BitModeWriteChar+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e2       	ldi	r20, 0x20	; 32
    33f2:	51 e4       	ldi	r21, 0x41	; 65
    33f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	bc 01       	movw	r22, r24
    33fe:	cd 01       	movw	r24, r26
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	9e 83       	std	Y+6, r25	; 0x06
    340a:	8d 83       	std	Y+5, r24	; 0x05
    340c:	0f c0       	rjmp	.+30     	; 0x342c <HAL_VidHCLCD_4BitModeWriteChar+0x1fc>
    340e:	80 e9       	ldi	r24, 0x90	; 144
    3410:	91 e0       	ldi	r25, 0x01	; 1
    3412:	9c 83       	std	Y+4, r25	; 0x04
    3414:	8b 83       	std	Y+3, r24	; 0x03
    3416:	8b 81       	ldd	r24, Y+3	; 0x03
    3418:	9c 81       	ldd	r25, Y+4	; 0x04
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	f1 f7       	brne	.-4      	; 0x341a <HAL_VidHCLCD_4BitModeWriteChar+0x1ea>
    341e:	9c 83       	std	Y+4, r25	; 0x04
    3420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3422:	8d 81       	ldd	r24, Y+5	; 0x05
    3424:	9e 81       	ldd	r25, Y+6	; 0x06
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	9e 83       	std	Y+6, r25	; 0x06
    342a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342c:	8d 81       	ldd	r24, Y+5	; 0x05
    342e:	9e 81       	ldd	r25, Y+6	; 0x06
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	69 f7       	brne	.-38     	; 0x340e <HAL_VidHCLCD_4BitModeWriteChar+0x1de>
    3434:	14 c0       	rjmp	.+40     	; 0x345e <HAL_VidHCLCD_4BitModeWriteChar+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3436:	6f 81       	ldd	r22, Y+7	; 0x07
    3438:	78 85       	ldd	r23, Y+8	; 0x08
    343a:	89 85       	ldd	r24, Y+9	; 0x09
    343c:	9a 85       	ldd	r25, Y+10	; 0x0a
    343e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	9e 83       	std	Y+6, r25	; 0x06
    3448:	8d 83       	std	Y+5, r24	; 0x05
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	9a 83       	std	Y+2, r25	; 0x02
    3450:	89 83       	std	Y+1, r24	; 0x01
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	9a 81       	ldd	r25, Y+2	; 0x02
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	f1 f7       	brne	.-4      	; 0x3456 <HAL_VidHCLCD_4BitModeWriteChar+0x226>
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	63 e0       	ldi	r22, 0x03	; 3
    3462:	40 e0       	ldi	r20, 0x00	; 0
    3464:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <MDIO_Errorstate_SetPinValue>
}
    3468:	6d 96       	adiw	r28, 0x1d	; 29
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	de bf       	out	0x3e, r29	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	cd bf       	out	0x3d, r28	; 61
    3474:	cf 91       	pop	r28
    3476:	df 91       	pop	r29
    3478:	08 95       	ret

0000347a <HAL_VidHCLCD_4BitModeInit>:
void HAL_VidHCLCD_4BitModeInit(void)
{
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	e8 97       	sbiw	r28, 0x38	; 56
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	f8 94       	cli
    3488:	de bf       	out	0x3e, r29	; 62
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	cd bf       	out	0x3d, r28	; 61
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	a0 ef       	ldi	r26, 0xF0	; 240
    3494:	b1 e4       	ldi	r27, 0x41	; 65
    3496:	8d ab       	std	Y+53, r24	; 0x35
    3498:	9e ab       	std	Y+54, r25	; 0x36
    349a:	af ab       	std	Y+55, r26	; 0x37
    349c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    349e:	6d a9       	ldd	r22, Y+53	; 0x35
    34a0:	7e a9       	ldd	r23, Y+54	; 0x36
    34a2:	8f a9       	ldd	r24, Y+55	; 0x37
    34a4:	98 ad       	ldd	r25, Y+56	; 0x38
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	4a e7       	ldi	r20, 0x7A	; 122
    34ac:	55 e4       	ldi	r21, 0x45	; 69
    34ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	89 ab       	std	Y+49, r24	; 0x31
    34b8:	9a ab       	std	Y+50, r25	; 0x32
    34ba:	ab ab       	std	Y+51, r26	; 0x33
    34bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34be:	69 a9       	ldd	r22, Y+49	; 0x31
    34c0:	7a a9       	ldd	r23, Y+50	; 0x32
    34c2:	8b a9       	ldd	r24, Y+51	; 0x33
    34c4:	9c a9       	ldd	r25, Y+52	; 0x34
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 e8       	ldi	r20, 0x80	; 128
    34cc:	5f e3       	ldi	r21, 0x3F	; 63
    34ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34d2:	88 23       	and	r24, r24
    34d4:	2c f4       	brge	.+10     	; 0x34e0 <HAL_VidHCLCD_4BitModeInit+0x66>
		__ticks = 1;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	98 ab       	std	Y+48, r25	; 0x30
    34dc:	8f a7       	std	Y+47, r24	; 0x2f
    34de:	3f c0       	rjmp	.+126    	; 0x355e <HAL_VidHCLCD_4BitModeInit+0xe4>
	else if (__tmp > 65535)
    34e0:	69 a9       	ldd	r22, Y+49	; 0x31
    34e2:	7a a9       	ldd	r23, Y+50	; 0x32
    34e4:	8b a9       	ldd	r24, Y+51	; 0x33
    34e6:	9c a9       	ldd	r25, Y+52	; 0x34
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	3f ef       	ldi	r19, 0xFF	; 255
    34ec:	4f e7       	ldi	r20, 0x7F	; 127
    34ee:	57 e4       	ldi	r21, 0x47	; 71
    34f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34f4:	18 16       	cp	r1, r24
    34f6:	4c f5       	brge	.+82     	; 0x354a <HAL_VidHCLCD_4BitModeInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f8:	6d a9       	ldd	r22, Y+53	; 0x35
    34fa:	7e a9       	ldd	r23, Y+54	; 0x36
    34fc:	8f a9       	ldd	r24, Y+55	; 0x37
    34fe:	98 ad       	ldd	r25, Y+56	; 0x38
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	40 e2       	ldi	r20, 0x20	; 32
    3506:	51 e4       	ldi	r21, 0x41	; 65
    3508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	bc 01       	movw	r22, r24
    3512:	cd 01       	movw	r24, r26
    3514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	98 ab       	std	Y+48, r25	; 0x30
    351e:	8f a7       	std	Y+47, r24	; 0x2f
    3520:	0f c0       	rjmp	.+30     	; 0x3540 <HAL_VidHCLCD_4BitModeInit+0xc6>
    3522:	80 e9       	ldi	r24, 0x90	; 144
    3524:	91 e0       	ldi	r25, 0x01	; 1
    3526:	9e a7       	std	Y+46, r25	; 0x2e
    3528:	8d a7       	std	Y+45, r24	; 0x2d
    352a:	8d a5       	ldd	r24, Y+45	; 0x2d
    352c:	9e a5       	ldd	r25, Y+46	; 0x2e
    352e:	01 97       	sbiw	r24, 0x01	; 1
    3530:	f1 f7       	brne	.-4      	; 0x352e <HAL_VidHCLCD_4BitModeInit+0xb4>
    3532:	9e a7       	std	Y+46, r25	; 0x2e
    3534:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3536:	8f a5       	ldd	r24, Y+47	; 0x2f
    3538:	98 a9       	ldd	r25, Y+48	; 0x30
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	98 ab       	std	Y+48, r25	; 0x30
    353e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3540:	8f a5       	ldd	r24, Y+47	; 0x2f
    3542:	98 a9       	ldd	r25, Y+48	; 0x30
    3544:	00 97       	sbiw	r24, 0x00	; 0
    3546:	69 f7       	brne	.-38     	; 0x3522 <HAL_VidHCLCD_4BitModeInit+0xa8>
    3548:	14 c0       	rjmp	.+40     	; 0x3572 <HAL_VidHCLCD_4BitModeInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    354a:	69 a9       	ldd	r22, Y+49	; 0x31
    354c:	7a a9       	ldd	r23, Y+50	; 0x32
    354e:	8b a9       	ldd	r24, Y+51	; 0x33
    3550:	9c a9       	ldd	r25, Y+52	; 0x34
    3552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	98 ab       	std	Y+48, r25	; 0x30
    355c:	8f a7       	std	Y+47, r24	; 0x2f
    355e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3560:	98 a9       	ldd	r25, Y+48	; 0x30
    3562:	9c a7       	std	Y+44, r25	; 0x2c
    3564:	8b a7       	std	Y+43, r24	; 0x2b
    3566:	8b a5       	ldd	r24, Y+43	; 0x2b
    3568:	9c a5       	ldd	r25, Y+44	; 0x2c
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	f1 f7       	brne	.-4      	; 0x356a <HAL_VidHCLCD_4BitModeInit+0xf0>
    356e:	9c a7       	std	Y+44, r25	; 0x2c
    3570:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait 30ms*/
	_delay_ms(30);
	/*send Function set command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    3572:	80 e2       	ldi	r24, 0x20	; 32
    3574:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    3578:	80 e2       	ldi	r24, 0x20	; 32
    357a:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET<<4));
    357e:	80 e8       	ldi	r24, 0x80	; 128
    3580:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HAL_VidHCLCD_4BitModeWriteCommand>
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	a0 e8       	ldi	r26, 0x80	; 128
    358a:	bf e3       	ldi	r27, 0x3F	; 63
    358c:	8f a3       	std	Y+39, r24	; 0x27
    358e:	98 a7       	std	Y+40, r25	; 0x28
    3590:	a9 a7       	std	Y+41, r26	; 0x29
    3592:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3594:	6f a1       	ldd	r22, Y+39	; 0x27
    3596:	78 a5       	ldd	r23, Y+40	; 0x28
    3598:	89 a5       	ldd	r24, Y+41	; 0x29
    359a:	9a a5       	ldd	r25, Y+42	; 0x2a
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	4a e7       	ldi	r20, 0x7A	; 122
    35a2:	55 e4       	ldi	r21, 0x45	; 69
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	8b a3       	std	Y+35, r24	; 0x23
    35ae:	9c a3       	std	Y+36, r25	; 0x24
    35b0:	ad a3       	std	Y+37, r26	; 0x25
    35b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35b4:	6b a1       	ldd	r22, Y+35	; 0x23
    35b6:	7c a1       	ldd	r23, Y+36	; 0x24
    35b8:	8d a1       	ldd	r24, Y+37	; 0x25
    35ba:	9e a1       	ldd	r25, Y+38	; 0x26
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	40 e8       	ldi	r20, 0x80	; 128
    35c2:	5f e3       	ldi	r21, 0x3F	; 63
    35c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35c8:	88 23       	and	r24, r24
    35ca:	2c f4       	brge	.+10     	; 0x35d6 <HAL_VidHCLCD_4BitModeInit+0x15c>
		__ticks = 1;
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	9a a3       	std	Y+34, r25	; 0x22
    35d2:	89 a3       	std	Y+33, r24	; 0x21
    35d4:	3f c0       	rjmp	.+126    	; 0x3654 <HAL_VidHCLCD_4BitModeInit+0x1da>
	else if (__tmp > 65535)
    35d6:	6b a1       	ldd	r22, Y+35	; 0x23
    35d8:	7c a1       	ldd	r23, Y+36	; 0x24
    35da:	8d a1       	ldd	r24, Y+37	; 0x25
    35dc:	9e a1       	ldd	r25, Y+38	; 0x26
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	3f ef       	ldi	r19, 0xFF	; 255
    35e2:	4f e7       	ldi	r20, 0x7F	; 127
    35e4:	57 e4       	ldi	r21, 0x47	; 71
    35e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35ea:	18 16       	cp	r1, r24
    35ec:	4c f5       	brge	.+82     	; 0x3640 <HAL_VidHCLCD_4BitModeInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ee:	6f a1       	ldd	r22, Y+39	; 0x27
    35f0:	78 a5       	ldd	r23, Y+40	; 0x28
    35f2:	89 a5       	ldd	r24, Y+41	; 0x29
    35f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	40 e2       	ldi	r20, 0x20	; 32
    35fc:	51 e4       	ldi	r21, 0x41	; 65
    35fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	bc 01       	movw	r22, r24
    3608:	cd 01       	movw	r24, r26
    360a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	9a a3       	std	Y+34, r25	; 0x22
    3614:	89 a3       	std	Y+33, r24	; 0x21
    3616:	0f c0       	rjmp	.+30     	; 0x3636 <HAL_VidHCLCD_4BitModeInit+0x1bc>
    3618:	80 e9       	ldi	r24, 0x90	; 144
    361a:	91 e0       	ldi	r25, 0x01	; 1
    361c:	98 a3       	std	Y+32, r25	; 0x20
    361e:	8f 8f       	std	Y+31, r24	; 0x1f
    3620:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3622:	98 a1       	ldd	r25, Y+32	; 0x20
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	f1 f7       	brne	.-4      	; 0x3624 <HAL_VidHCLCD_4BitModeInit+0x1aa>
    3628:	98 a3       	std	Y+32, r25	; 0x20
    362a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362c:	89 a1       	ldd	r24, Y+33	; 0x21
    362e:	9a a1       	ldd	r25, Y+34	; 0x22
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	9a a3       	std	Y+34, r25	; 0x22
    3634:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3636:	89 a1       	ldd	r24, Y+33	; 0x21
    3638:	9a a1       	ldd	r25, Y+34	; 0x22
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	69 f7       	brne	.-38     	; 0x3618 <HAL_VidHCLCD_4BitModeInit+0x19e>
    363e:	14 c0       	rjmp	.+40     	; 0x3668 <HAL_VidHCLCD_4BitModeInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3640:	6b a1       	ldd	r22, Y+35	; 0x23
    3642:	7c a1       	ldd	r23, Y+36	; 0x24
    3644:	8d a1       	ldd	r24, Y+37	; 0x25
    3646:	9e a1       	ldd	r25, Y+38	; 0x26
    3648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	9a a3       	std	Y+34, r25	; 0x22
    3652:	89 a3       	std	Y+33, r24	; 0x21
    3654:	89 a1       	ldd	r24, Y+33	; 0x21
    3656:	9a a1       	ldd	r25, Y+34	; 0x22
    3658:	9e 8f       	std	Y+30, r25	; 0x1e
    365a:	8d 8f       	std	Y+29, r24	; 0x1d
    365c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    365e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3660:	01 97       	sbiw	r24, 0x01	; 1
    3662:	f1 f7       	brne	.-4      	; 0x3660 <HAL_VidHCLCD_4BitModeInit+0x1e6>
    3664:	9e 8f       	std	Y+30, r25	; 0x1e
    3666:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Send Display on off command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF&0xF0));
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF<<4));
    366e:	80 ef       	ldi	r24, 0xF0	; 240
    3670:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HAL_VidHCLCD_4BitModeWriteCommand>
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	a0 e8       	ldi	r26, 0x80	; 128
    367a:	bf e3       	ldi	r27, 0x3F	; 63
    367c:	89 8f       	std	Y+25, r24	; 0x19
    367e:	9a 8f       	std	Y+26, r25	; 0x1a
    3680:	ab 8f       	std	Y+27, r26	; 0x1b
    3682:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3684:	69 8d       	ldd	r22, Y+25	; 0x19
    3686:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    368a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	4a e7       	ldi	r20, 0x7A	; 122
    3692:	55 e4       	ldi	r21, 0x45	; 69
    3694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	8d 8b       	std	Y+21, r24	; 0x15
    369e:	9e 8b       	std	Y+22, r25	; 0x16
    36a0:	af 8b       	std	Y+23, r26	; 0x17
    36a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36a4:	6d 89       	ldd	r22, Y+21	; 0x15
    36a6:	7e 89       	ldd	r23, Y+22	; 0x16
    36a8:	8f 89       	ldd	r24, Y+23	; 0x17
    36aa:	98 8d       	ldd	r25, Y+24	; 0x18
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 e8       	ldi	r20, 0x80	; 128
    36b2:	5f e3       	ldi	r21, 0x3F	; 63
    36b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36b8:	88 23       	and	r24, r24
    36ba:	2c f4       	brge	.+10     	; 0x36c6 <HAL_VidHCLCD_4BitModeInit+0x24c>
		__ticks = 1;
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	9c 8b       	std	Y+20, r25	; 0x14
    36c2:	8b 8b       	std	Y+19, r24	; 0x13
    36c4:	3f c0       	rjmp	.+126    	; 0x3744 <HAL_VidHCLCD_4BitModeInit+0x2ca>
	else if (__tmp > 65535)
    36c6:	6d 89       	ldd	r22, Y+21	; 0x15
    36c8:	7e 89       	ldd	r23, Y+22	; 0x16
    36ca:	8f 89       	ldd	r24, Y+23	; 0x17
    36cc:	98 8d       	ldd	r25, Y+24	; 0x18
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	3f ef       	ldi	r19, 0xFF	; 255
    36d2:	4f e7       	ldi	r20, 0x7F	; 127
    36d4:	57 e4       	ldi	r21, 0x47	; 71
    36d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36da:	18 16       	cp	r1, r24
    36dc:	4c f5       	brge	.+82     	; 0x3730 <HAL_VidHCLCD_4BitModeInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36de:	69 8d       	ldd	r22, Y+25	; 0x19
    36e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	40 e2       	ldi	r20, 0x20	; 32
    36ec:	51 e4       	ldi	r21, 0x41	; 65
    36ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	9c 8b       	std	Y+20, r25	; 0x14
    3704:	8b 8b       	std	Y+19, r24	; 0x13
    3706:	0f c0       	rjmp	.+30     	; 0x3726 <HAL_VidHCLCD_4BitModeInit+0x2ac>
    3708:	80 e9       	ldi	r24, 0x90	; 144
    370a:	91 e0       	ldi	r25, 0x01	; 1
    370c:	9a 8b       	std	Y+18, r25	; 0x12
    370e:	89 8b       	std	Y+17, r24	; 0x11
    3710:	89 89       	ldd	r24, Y+17	; 0x11
    3712:	9a 89       	ldd	r25, Y+18	; 0x12
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	f1 f7       	brne	.-4      	; 0x3714 <HAL_VidHCLCD_4BitModeInit+0x29a>
    3718:	9a 8b       	std	Y+18, r25	; 0x12
    371a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371c:	8b 89       	ldd	r24, Y+19	; 0x13
    371e:	9c 89       	ldd	r25, Y+20	; 0x14
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	9c 8b       	std	Y+20, r25	; 0x14
    3724:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3726:	8b 89       	ldd	r24, Y+19	; 0x13
    3728:	9c 89       	ldd	r25, Y+20	; 0x14
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	69 f7       	brne	.-38     	; 0x3708 <HAL_VidHCLCD_4BitModeInit+0x28e>
    372e:	14 c0       	rjmp	.+40     	; 0x3758 <HAL_VidHCLCD_4BitModeInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3730:	6d 89       	ldd	r22, Y+21	; 0x15
    3732:	7e 89       	ldd	r23, Y+22	; 0x16
    3734:	8f 89       	ldd	r24, Y+23	; 0x17
    3736:	98 8d       	ldd	r25, Y+24	; 0x18
    3738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	9c 8b       	std	Y+20, r25	; 0x14
    3742:	8b 8b       	std	Y+19, r24	; 0x13
    3744:	8b 89       	ldd	r24, Y+19	; 0x13
    3746:	9c 89       	ldd	r25, Y+20	; 0x14
    3748:	98 8b       	std	Y+16, r25	; 0x10
    374a:	8f 87       	std	Y+15, r24	; 0x0f
    374c:	8f 85       	ldd	r24, Y+15	; 0x0f
    374e:	98 89       	ldd	r25, Y+16	; 0x10
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <HAL_VidHCLCD_4BitModeInit+0x2d6>
    3754:	98 8b       	std	Y+16, r25	; 0x10
    3756:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR&0xF0));
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR<<4));
    375e:	80 e1       	ldi	r24, 0x10	; 16
    3760:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HAL_VidHCLCD_4BitModeWriteCommand>
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	a0 e0       	ldi	r26, 0x00	; 0
    376a:	b0 e4       	ldi	r27, 0x40	; 64
    376c:	8b 87       	std	Y+11, r24	; 0x0b
    376e:	9c 87       	std	Y+12, r25	; 0x0c
    3770:	ad 87       	std	Y+13, r26	; 0x0d
    3772:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3774:	6b 85       	ldd	r22, Y+11	; 0x0b
    3776:	7c 85       	ldd	r23, Y+12	; 0x0c
    3778:	8d 85       	ldd	r24, Y+13	; 0x0d
    377a:	9e 85       	ldd	r25, Y+14	; 0x0e
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	4a e7       	ldi	r20, 0x7A	; 122
    3782:	55 e4       	ldi	r21, 0x45	; 69
    3784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	8f 83       	std	Y+7, r24	; 0x07
    378e:	98 87       	std	Y+8, r25	; 0x08
    3790:	a9 87       	std	Y+9, r26	; 0x09
    3792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3794:	6f 81       	ldd	r22, Y+7	; 0x07
    3796:	78 85       	ldd	r23, Y+8	; 0x08
    3798:	89 85       	ldd	r24, Y+9	; 0x09
    379a:	9a 85       	ldd	r25, Y+10	; 0x0a
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	40 e8       	ldi	r20, 0x80	; 128
    37a2:	5f e3       	ldi	r21, 0x3F	; 63
    37a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37a8:	88 23       	and	r24, r24
    37aa:	2c f4       	brge	.+10     	; 0x37b6 <HAL_VidHCLCD_4BitModeInit+0x33c>
		__ticks = 1;
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	9e 83       	std	Y+6, r25	; 0x06
    37b2:	8d 83       	std	Y+5, r24	; 0x05
    37b4:	3f c0       	rjmp	.+126    	; 0x3834 <HAL_VidHCLCD_4BitModeInit+0x3ba>
	else if (__tmp > 65535)
    37b6:	6f 81       	ldd	r22, Y+7	; 0x07
    37b8:	78 85       	ldd	r23, Y+8	; 0x08
    37ba:	89 85       	ldd	r24, Y+9	; 0x09
    37bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	3f ef       	ldi	r19, 0xFF	; 255
    37c2:	4f e7       	ldi	r20, 0x7F	; 127
    37c4:	57 e4       	ldi	r21, 0x47	; 71
    37c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37ca:	18 16       	cp	r1, r24
    37cc:	4c f5       	brge	.+82     	; 0x3820 <HAL_VidHCLCD_4BitModeInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	40 e2       	ldi	r20, 0x20	; 32
    37dc:	51 e4       	ldi	r21, 0x41	; 65
    37de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	bc 01       	movw	r22, r24
    37e8:	cd 01       	movw	r24, r26
    37ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	9e 83       	std	Y+6, r25	; 0x06
    37f4:	8d 83       	std	Y+5, r24	; 0x05
    37f6:	0f c0       	rjmp	.+30     	; 0x3816 <HAL_VidHCLCD_4BitModeInit+0x39c>
    37f8:	80 e9       	ldi	r24, 0x90	; 144
    37fa:	91 e0       	ldi	r25, 0x01	; 1
    37fc:	9c 83       	std	Y+4, r25	; 0x04
    37fe:	8b 83       	std	Y+3, r24	; 0x03
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	9c 81       	ldd	r25, Y+4	; 0x04
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	f1 f7       	brne	.-4      	; 0x3804 <HAL_VidHCLCD_4BitModeInit+0x38a>
    3808:	9c 83       	std	Y+4, r25	; 0x04
    380a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    380c:	8d 81       	ldd	r24, Y+5	; 0x05
    380e:	9e 81       	ldd	r25, Y+6	; 0x06
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3816:	8d 81       	ldd	r24, Y+5	; 0x05
    3818:	9e 81       	ldd	r25, Y+6	; 0x06
    381a:	00 97       	sbiw	r24, 0x00	; 0
    381c:	69 f7       	brne	.-38     	; 0x37f8 <HAL_VidHCLCD_4BitModeInit+0x37e>
    381e:	14 c0       	rjmp	.+40     	; 0x3848 <HAL_VidHCLCD_4BitModeInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3820:	6f 81       	ldd	r22, Y+7	; 0x07
    3822:	78 85       	ldd	r23, Y+8	; 0x08
    3824:	89 85       	ldd	r24, Y+9	; 0x09
    3826:	9a 85       	ldd	r25, Y+10	; 0x0a
    3828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	9e 83       	std	Y+6, r25	; 0x06
    3832:	8d 83       	std	Y+5, r24	; 0x05
    3834:	8d 81       	ldd	r24, Y+5	; 0x05
    3836:	9e 81       	ldd	r25, Y+6	; 0x06
    3838:	9a 83       	std	Y+2, r25	; 0x02
    383a:	89 83       	std	Y+1, r24	; 0x01
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	9a 81       	ldd	r25, Y+2	; 0x02
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	f1 f7       	brne	.-4      	; 0x3840 <HAL_VidHCLCD_4BitModeInit+0x3c6>
    3844:	9a 83       	std	Y+2, r25	; 0x02
    3846:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE&0xF0));
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE<<4));
    384e:	80 e6       	ldi	r24, 0x60	; 96
    3850:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HAL_VidHCLCD_4BitModeWriteCommand>
}
    3854:	e8 96       	adiw	r28, 0x38	; 56
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61
    3860:	cf 91       	pop	r28
    3862:	df 91       	pop	r29
    3864:	08 95       	ret

00003866 <HAL_VidHCLCD_4BitModeSendCommand>:
void HAL_VidHCLCD_4BitModeSendCommand(uint8 Copy_uint8Command)
{
    3866:	df 93       	push	r29
    3868:	cf 93       	push	r28
    386a:	0f 92       	push	r0
    386c:	cd b7       	in	r28, 0x3d	; 61
    386e:	de b7       	in	r29, 0x3e	; 62
    3870:	89 83       	std	Y+1, r24	; 0x01
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command&0xF0));
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	80 7f       	andi	r24, 0xF0	; 240
    3876:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command<<4));
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	82 95       	swap	r24
    387e:	80 7f       	andi	r24, 0xF0	; 240
    3880:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <HAL_VidHCLCD_4BitModeWriteCommand>
}
    3884:	0f 90       	pop	r0
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	08 95       	ret

0000388c <HAL_VidHCLCD_4BitModeWriteString>:
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
    388c:	df 93       	push	r29
    388e:	cf 93       	push	r28
    3890:	00 d0       	rcall	.+0      	; 0x3892 <HAL_VidHCLCD_4BitModeWriteString+0x6>
    3892:	0f 92       	push	r0
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
    3898:	9b 83       	std	Y+3, r25	; 0x03
    389a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Loc_uint8Count=0;
    389c:	19 82       	std	Y+1, r1	; 0x01
    389e:	0e c0       	rjmp	.+28     	; 0x38bc <HAL_VidHCLCD_4BitModeWriteString+0x30>
	while(Copy_uint8String[Loc_uint8Count]!='\0')
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	28 2f       	mov	r18, r24
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	8a 81       	ldd	r24, Y+2	; 0x02
    38a8:	9b 81       	ldd	r25, Y+3	; 0x03
    38aa:	fc 01       	movw	r30, r24
    38ac:	e2 0f       	add	r30, r18
    38ae:	f3 1f       	adc	r31, r19
    38b0:	80 81       	ld	r24, Z
    38b2:	0e 94 18 19 	call	0x3230	; 0x3230 <HAL_VidHCLCD_4BitModeWriteChar>
		Loc_uint8Count++;
    38b6:	89 81       	ldd	r24, Y+1	; 0x01
    38b8:	8f 5f       	subi	r24, 0xFF	; 255
    38ba:	89 83       	std	Y+1, r24	; 0x01
}
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
	uint8 Loc_uint8Count=0;
	while(Copy_uint8String[Loc_uint8Count]!='\0')
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	9b 81       	ldd	r25, Y+3	; 0x03
    38c6:	fc 01       	movw	r30, r24
    38c8:	e2 0f       	add	r30, r18
    38ca:	f3 1f       	adc	r31, r19
    38cc:	80 81       	ld	r24, Z
    38ce:	88 23       	and	r24, r24
    38d0:	39 f7       	brne	.-50     	; 0x38a0 <HAL_VidHCLCD_4BitModeWriteString+0x14>
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
		Loc_uint8Count++;
	}
}
    38d2:	0f 90       	pop	r0
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	08 95       	ret

000038de <HAL_VidHCLCD_4BitModeWriteNumber>:
/*1234*/
void HAL_VidHCLCD_4BitModeWriteNumber(uint32 Copy_uint32Number)
{
    38de:	0f 93       	push	r16
    38e0:	1f 93       	push	r17
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    38ea:	65 97       	sbiw	r28, 0x15	; 21
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	6a 8b       	std	Y+18, r22	; 0x12
    38f8:	7b 8b       	std	Y+19, r23	; 0x13
    38fa:	8c 8b       	std	Y+20, r24	; 0x14
    38fc:	9d 8b       	std	Y+21, r25	; 0x15
	uint8 Loc_uint8Digits[16];
	sint8 Loc_sint8Count=0;
    38fe:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint32Number==0)
    3900:	8a 89       	ldd	r24, Y+18	; 0x12
    3902:	9b 89       	ldd	r25, Y+19	; 0x13
    3904:	ac 89       	ldd	r26, Y+20	; 0x14
    3906:	bd 89       	ldd	r27, Y+21	; 0x15
    3908:	00 97       	sbiw	r24, 0x00	; 0
    390a:	a1 05       	cpc	r26, r1
    390c:	b1 05       	cpc	r27, r1
    390e:	99 f5       	brne	.+102    	; 0x3976 <HAL_VidHCLCD_4BitModeWriteNumber+0x98>
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
    3910:	80 e3       	ldi	r24, 0x30	; 48
    3912:	0e 94 18 19 	call	0x3230	; 0x3230 <HAL_VidHCLCD_4BitModeWriteChar>
    3916:	4f c0       	rjmp	.+158    	; 0x39b6 <HAL_VidHCLCD_4BitModeWriteNumber+0xd8>
	}
	else
	{
		while(Copy_uint32Number!=0)
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	08 2f       	mov	r16, r24
    391c:	11 27       	eor	r17, r17
    391e:	07 fd       	sbrc	r16, 7
    3920:	10 95       	com	r17
    3922:	8a 89       	ldd	r24, Y+18	; 0x12
    3924:	9b 89       	ldd	r25, Y+19	; 0x13
    3926:	ac 89       	ldd	r26, Y+20	; 0x14
    3928:	bd 89       	ldd	r27, Y+21	; 0x15
    392a:	2a e0       	ldi	r18, 0x0A	; 10
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	40 e0       	ldi	r20, 0x00	; 0
    3930:	50 e0       	ldi	r21, 0x00	; 0
    3932:	bc 01       	movw	r22, r24
    3934:	cd 01       	movw	r24, r26
    3936:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <__udivmodsi4>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	28 2f       	mov	r18, r24
    3940:	ce 01       	movw	r24, r28
    3942:	02 96       	adiw	r24, 0x02	; 2
    3944:	fc 01       	movw	r30, r24
    3946:	e0 0f       	add	r30, r16
    3948:	f1 1f       	adc	r31, r17
    394a:	20 83       	st	Z, r18
			Copy_uint32Number/=10;
    394c:	8a 89       	ldd	r24, Y+18	; 0x12
    394e:	9b 89       	ldd	r25, Y+19	; 0x13
    3950:	ac 89       	ldd	r26, Y+20	; 0x14
    3952:	bd 89       	ldd	r27, Y+21	; 0x15
    3954:	2a e0       	ldi	r18, 0x0A	; 10
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	40 e0       	ldi	r20, 0x00	; 0
    395a:	50 e0       	ldi	r21, 0x00	; 0
    395c:	bc 01       	movw	r22, r24
    395e:	cd 01       	movw	r24, r26
    3960:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <__udivmodsi4>
    3964:	da 01       	movw	r26, r20
    3966:	c9 01       	movw	r24, r18
    3968:	8a 8b       	std	Y+18, r24	; 0x12
    396a:	9b 8b       	std	Y+19, r25	; 0x13
    396c:	ac 8b       	std	Y+20, r26	; 0x14
    396e:	bd 8b       	std	Y+21, r27	; 0x15
			Loc_sint8Count++;
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	8f 5f       	subi	r24, 0xFF	; 255
    3974:	89 83       	std	Y+1, r24	; 0x01
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
	}
	else
	{
		while(Copy_uint32Number!=0)
    3976:	8a 89       	ldd	r24, Y+18	; 0x12
    3978:	9b 89       	ldd	r25, Y+19	; 0x13
    397a:	ac 89       	ldd	r26, Y+20	; 0x14
    397c:	bd 89       	ldd	r27, Y+21	; 0x15
    397e:	00 97       	sbiw	r24, 0x00	; 0
    3980:	a1 05       	cpc	r26, r1
    3982:	b1 05       	cpc	r27, r1
    3984:	49 f6       	brne	.-110    	; 0x3918 <HAL_VidHCLCD_4BitModeWriteNumber+0x3a>
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	81 50       	subi	r24, 0x01	; 1
    398a:	89 83       	std	Y+1, r24	; 0x01
    398c:	11 c0       	rjmp	.+34     	; 0x39b0 <HAL_VidHCLCD_4BitModeWriteNumber+0xd2>
		while(Loc_sint8Count>=0)
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
    398e:	89 81       	ldd	r24, Y+1	; 0x01
    3990:	28 2f       	mov	r18, r24
    3992:	33 27       	eor	r19, r19
    3994:	27 fd       	sbrc	r18, 7
    3996:	30 95       	com	r19
    3998:	ce 01       	movw	r24, r28
    399a:	02 96       	adiw	r24, 0x02	; 2
    399c:	fc 01       	movw	r30, r24
    399e:	e2 0f       	add	r30, r18
    39a0:	f3 1f       	adc	r31, r19
    39a2:	80 81       	ld	r24, Z
    39a4:	80 5d       	subi	r24, 0xD0	; 208
    39a6:	0e 94 18 19 	call	0x3230	; 0x3230 <HAL_VidHCLCD_4BitModeWriteChar>
			Loc_sint8Count--;
    39aa:	89 81       	ldd	r24, Y+1	; 0x01
    39ac:	81 50       	subi	r24, 0x01	; 1
    39ae:	89 83       	std	Y+1, r24	; 0x01
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
		while(Loc_sint8Count>=0)
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
    39b2:	88 23       	and	r24, r24
    39b4:	64 f7       	brge	.-40     	; 0x398e <HAL_VidHCLCD_4BitModeWriteNumber+0xb0>
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
			Loc_sint8Count--;
		}
	}
}
    39b6:	65 96       	adiw	r28, 0x15	; 21
    39b8:	0f b6       	in	r0, 0x3f	; 63
    39ba:	f8 94       	cli
    39bc:	de bf       	out	0x3e, r29	; 62
    39be:	0f be       	out	0x3f, r0	; 63
    39c0:	cd bf       	out	0x3d, r28	; 61
    39c2:	cf 91       	pop	r28
    39c4:	df 91       	pop	r29
    39c6:	1f 91       	pop	r17
    39c8:	0f 91       	pop	r16
    39ca:	08 95       	ret

000039cc <HAL_VidHCLCD_4BitModeSetPosition>:
void HAL_VidHCLCD_4BitModeSetPosition(uint8 Copy_uint8LineNum,uint8 Copy_uint8Position)
{
    39cc:	df 93       	push	r29
    39ce:	cf 93       	push	r28
    39d0:	00 d0       	rcall	.+0      	; 0x39d2 <HAL_VidHCLCD_4BitModeSetPosition+0x6>
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	89 83       	std	Y+1, r24	; 0x01
    39d8:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_uint8LineNum==1)
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	81 30       	cpi	r24, 0x01	; 1
    39de:	29 f4       	brne	.+10     	; 0x39ea <HAL_VidHCLCD_4BitModeSetPosition+0x1e>
	{
		HAL_VidHCLCD_4BitModeSendCommand(128+Copy_uint8Position);
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	80 58       	subi	r24, 0x80	; 128
    39e4:	0e 94 33 1c 	call	0x3866	; 0x3866 <HAL_VidHCLCD_4BitModeSendCommand>
    39e8:	07 c0       	rjmp	.+14     	; 0x39f8 <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	}
	else if(Copy_uint8LineNum==2)
    39ea:	89 81       	ldd	r24, Y+1	; 0x01
    39ec:	82 30       	cpi	r24, 0x02	; 2
    39ee:	21 f4       	brne	.+8      	; 0x39f8 <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	{
		HAL_VidHCLCD_4BitModeSendCommand(192+Copy_uint8Position);
    39f0:	8a 81       	ldd	r24, Y+2	; 0x02
    39f2:	80 54       	subi	r24, 0x40	; 64
    39f4:	0e 94 33 1c 	call	0x3866	; 0x3866 <HAL_VidHCLCD_4BitModeSendCommand>
	}
	else
	{
		/*Do Nothing*/
	}
}
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	cf 91       	pop	r28
    39fe:	df 91       	pop	r29
    3a00:	08 95       	ret

00003a02 <HBUTTON_Errorstate_Button_Init>:
#include"../../LIB/LBIT_MATH.h"
#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HBUTTON_Interface.h"

ErrorState  HBUTTON_Errorstate_Button_Init(Button_t* copy_Button_object)
{
    3a02:	df 93       	push	r29
    3a04:	cf 93       	push	r28
    3a06:	00 d0       	rcall	.+0      	; 0x3a08 <HBUTTON_Errorstate_Button_Init+0x6>
    3a08:	0f 92       	push	r0
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
    3a0e:	9b 83       	std	Y+3, r25	; 0x03
    3a10:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	89 83       	std	Y+1, r24	; 0x01
		Loc_ErrorState_Error_state = MDIO_Errorstate_SetPinDirection(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,PIN_INPUT);
    3a16:	ea 81       	ldd	r30, Y+2	; 0x02
    3a18:	fb 81       	ldd	r31, Y+3	; 0x03
    3a1a:	80 81       	ld	r24, Z
    3a1c:	ea 81       	ldd	r30, Y+2	; 0x02
    3a1e:	fb 81       	ldd	r31, Y+3	; 0x03
    3a20:	91 81       	ldd	r25, Z+1	; 0x01
    3a22:	69 2f       	mov	r22, r25
    3a24:	40 e0       	ldi	r20, 0x00	; 0
    3a26:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
    3a2a:	89 83       	std	Y+1, r24	; 0x01
			return Loc_ErrorState_Error_state;
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	cf 91       	pop	r28
    3a36:	df 91       	pop	r29
    3a38:	08 95       	ret

00003a3a <HBUTTON_Errorstate_Button_Pressed>:
ErrorState  HBUTTON_Errorstate_Button_Pressed(Button_t* copy_Button_object)
{
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	00 d0       	rcall	.+0      	; 0x3a40 <HBUTTON_Errorstate_Button_Pressed+0x6>
    3a40:	00 d0       	rcall	.+0      	; 0x3a42 <HBUTTON_Errorstate_Button_Pressed+0x8>
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	9c 83       	std	Y+4, r25	; 0x04
    3a48:	8b 83       	std	Y+3, r24	; 0x03

	uint8 Loc_Button_State;
	ErrorState Loc_ErrorState_Error_state=OK;
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	89 83       	std	Y+1, r24	; 0x01
	if((copy_Button_object->ButtonActiveState)==PULL_DOWN)/*check 3la button activate state*/
    3a4e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a50:	fc 81       	ldd	r31, Y+4	; 0x04
    3a52:	82 81       	ldd	r24, Z+2	; 0x02
    3a54:	88 23       	and	r24, r24
    3a56:	71 f4       	brne	.+28     	; 0x3a74 <HBUTTON_Errorstate_Button_Pressed+0x3a>
	{
		/*pull down */
		MDIO_Errorstate_GetPinValue(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,&Loc_Button_State);
    3a58:	eb 81       	ldd	r30, Y+3	; 0x03
    3a5a:	fc 81       	ldd	r31, Y+4	; 0x04
    3a5c:	80 81       	ld	r24, Z
    3a5e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a60:	fc 81       	ldd	r31, Y+4	; 0x04
    3a62:	91 81       	ldd	r25, Z+1	; 0x01
    3a64:	9e 01       	movw	r18, r28
    3a66:	2e 5f       	subi	r18, 0xFE	; 254
    3a68:	3f 4f       	sbci	r19, 0xFF	; 255
    3a6a:	69 2f       	mov	r22, r25
    3a6c:	a9 01       	movw	r20, r18
    3a6e:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <MDIO_Errorstate_GetPinValue>
    3a72:	14 c0       	rjmp	.+40     	; 0x3a9c <HBUTTON_Errorstate_Button_Pressed+0x62>
	}
	else if((copy_Button_object->ButtonActiveState)==PULL_UP)
    3a74:	eb 81       	ldd	r30, Y+3	; 0x03
    3a76:	fc 81       	ldd	r31, Y+4	; 0x04
    3a78:	82 81       	ldd	r24, Z+2	; 0x02
    3a7a:	81 30       	cpi	r24, 0x01	; 1
    3a7c:	71 f4       	brne	.+28     	; 0x3a9a <HBUTTON_Errorstate_Button_Pressed+0x60>
	{
		/*internal pull up activate*/
		MDIO_Errorstate_GetPinValue(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,&Loc_Button_State);
    3a7e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a80:	fc 81       	ldd	r31, Y+4	; 0x04
    3a82:	80 81       	ld	r24, Z
    3a84:	eb 81       	ldd	r30, Y+3	; 0x03
    3a86:	fc 81       	ldd	r31, Y+4	; 0x04
    3a88:	91 81       	ldd	r25, Z+1	; 0x01
    3a8a:	9e 01       	movw	r18, r28
    3a8c:	2e 5f       	subi	r18, 0xFE	; 254
    3a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a90:	69 2f       	mov	r22, r25
    3a92:	a9 01       	movw	r20, r18
    3a94:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <MDIO_Errorstate_GetPinValue>
    3a98:	01 c0       	rjmp	.+2      	; 0x3a9c <HBUTTON_Errorstate_Button_Pressed+0x62>
	}
	else
	{
		Loc_ErrorState_Error_state=NOK;
    3a9a:	19 82       	std	Y+1, r1	; 0x01
	}

return Loc_ErrorState_Error_state;
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a9e:	0f 90       	pop	r0
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	cf 91       	pop	r28
    3aa8:	df 91       	pop	r29
    3aaa:	08 95       	ret

00003aac <main>:

#define F_CPU 16000000UL
#include<util/delay.h>

int main (void)
{
    3aac:	df 93       	push	r29
    3aae:	cf 93       	push	r28
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	2f 97       	sbiw	r28, 0x0f	; 15
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	f8 94       	cli
    3aba:	de bf       	out	0x3e, r29	; 62
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	cd bf       	out	0x3d, r28	; 61
	          /*Initialize LCD PINS*/
	/*Control Pins*/
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RS_PIN,PIN_OUTPUT);
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	61 e0       	ldi	r22, 0x01	; 1
    3ac4:	41 e0       	ldi	r20, 0x01	; 1
    3ac6:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RW_PIN,PIN_OUTPUT);
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	62 e0       	ldi	r22, 0x02	; 2
    3ace:	41 e0       	ldi	r20, 0x01	; 1
    3ad0:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,E_PIN,PIN_OUTPUT);
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	63 e0       	ldi	r22, 0x03	; 3
    3ad8:	41 e0       	ldi	r20, 0x01	; 1
    3ada:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	          /*data Pins*/
	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN4,PIN_OUTPUT);
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	64 e0       	ldi	r22, 0x04	; 4
    3ae2:	41 e0       	ldi	r20, 0x01	; 1
    3ae4:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN5,PIN_OUTPUT);
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	65 e0       	ldi	r22, 0x05	; 5
    3aec:	41 e0       	ldi	r20, 0x01	; 1
    3aee:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN6,PIN_OUTPUT);
    3af2:	80 e0       	ldi	r24, 0x00	; 0
    3af4:	66 e0       	ldi	r22, 0x06	; 6
    3af6:	41 e0       	ldi	r20, 0x01	; 1
    3af8:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN7,PIN_OUTPUT);
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	67 e0       	ldi	r22, 0x07	; 7
    3b00:	41 e0       	ldi	r20, 0x01	; 1
    3b02:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	        /*Welcome Message*/
	HAL_VidHCLCD_4BitModeInit();
    3b06:	0e 94 3d 1a 	call	0x347a	; 0x347a <HAL_VidHCLCD_4BitModeInit>
	HAL_VidHCLCD_4BitModeWriteString("welcome..");
    3b0a:	80 e6       	ldi	r24, 0x60	; 96
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	0e 94 46 1c 	call	0x388c	; 0x388c <HAL_VidHCLCD_4BitModeWriteString>
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	aa e7       	ldi	r26, 0x7A	; 122
    3b18:	b4 e4       	ldi	r27, 0x44	; 68
    3b1a:	8b 87       	std	Y+11, r24	; 0x0b
    3b1c:	9c 87       	std	Y+12, r25	; 0x0c
    3b1e:	ad 87       	std	Y+13, r26	; 0x0d
    3b20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	4a e7       	ldi	r20, 0x7A	; 122
    3b30:	55 e4       	ldi	r21, 0x45	; 69
    3b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	8f 83       	std	Y+7, r24	; 0x07
    3b3c:	98 87       	std	Y+8, r25	; 0x08
    3b3e:	a9 87       	std	Y+9, r26	; 0x09
    3b40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b42:	6f 81       	ldd	r22, Y+7	; 0x07
    3b44:	78 85       	ldd	r23, Y+8	; 0x08
    3b46:	89 85       	ldd	r24, Y+9	; 0x09
    3b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	40 e8       	ldi	r20, 0x80	; 128
    3b50:	5f e3       	ldi	r21, 0x3F	; 63
    3b52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b56:	88 23       	and	r24, r24
    3b58:	2c f4       	brge	.+10     	; 0x3b64 <main+0xb8>
		__ticks = 1;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	9e 83       	std	Y+6, r25	; 0x06
    3b60:	8d 83       	std	Y+5, r24	; 0x05
    3b62:	3f c0       	rjmp	.+126    	; 0x3be2 <main+0x136>
	else if (__tmp > 65535)
    3b64:	6f 81       	ldd	r22, Y+7	; 0x07
    3b66:	78 85       	ldd	r23, Y+8	; 0x08
    3b68:	89 85       	ldd	r24, Y+9	; 0x09
    3b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	3f ef       	ldi	r19, 0xFF	; 255
    3b70:	4f e7       	ldi	r20, 0x7F	; 127
    3b72:	57 e4       	ldi	r21, 0x47	; 71
    3b74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b78:	18 16       	cp	r1, r24
    3b7a:	4c f5       	brge	.+82     	; 0x3bce <main+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	40 e2       	ldi	r20, 0x20	; 32
    3b8a:	51 e4       	ldi	r21, 0x41	; 65
    3b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	bc 01       	movw	r22, r24
    3b96:	cd 01       	movw	r24, r26
    3b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	9e 83       	std	Y+6, r25	; 0x06
    3ba2:	8d 83       	std	Y+5, r24	; 0x05
    3ba4:	0f c0       	rjmp	.+30     	; 0x3bc4 <main+0x118>
    3ba6:	80 e9       	ldi	r24, 0x90	; 144
    3ba8:	91 e0       	ldi	r25, 0x01	; 1
    3baa:	9c 83       	std	Y+4, r25	; 0x04
    3bac:	8b 83       	std	Y+3, r24	; 0x03
    3bae:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	f1 f7       	brne	.-4      	; 0x3bb2 <main+0x106>
    3bb6:	9c 83       	std	Y+4, r25	; 0x04
    3bb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bba:	8d 81       	ldd	r24, Y+5	; 0x05
    3bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bbe:	01 97       	sbiw	r24, 0x01	; 1
    3bc0:	9e 83       	std	Y+6, r25	; 0x06
    3bc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	69 f7       	brne	.-38     	; 0x3ba6 <main+0xfa>
    3bcc:	14 c0       	rjmp	.+40     	; 0x3bf6 <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bce:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd0:	78 85       	ldd	r23, Y+8	; 0x08
    3bd2:	89 85       	ldd	r24, Y+9	; 0x09
    3bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	9e 83       	std	Y+6, r25	; 0x06
    3be0:	8d 83       	std	Y+5, r24	; 0x05
    3be2:	8d 81       	ldd	r24, Y+5	; 0x05
    3be4:	9e 81       	ldd	r25, Y+6	; 0x06
    3be6:	9a 83       	std	Y+2, r25	; 0x02
    3be8:	89 83       	std	Y+1, r24	; 0x01
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	9a 81       	ldd	r25, Y+2	; 0x02
    3bee:	01 97       	sbiw	r24, 0x01	; 1
    3bf0:	f1 f7       	brne	.-4      	; 0x3bee <main+0x142>
    3bf2:	9a 83       	std	Y+2, r25	; 0x02
    3bf4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HAL_VidHCLCD_4BitModeSendCommand(0x01);
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	0e 94 33 1c 	call	0x3866	; 0x3866 <HAL_VidHCLCD_4BitModeSendCommand>
	/*SET Rx  D0 And Tx D1 Pins*/
	MDIO_Errorstate_SetPinDirection(MDIO_PORTD,PIN0,PIN_INPUT);
    3bfc:	83 e0       	ldi	r24, 0x03	; 3
    3bfe:	60 e0       	ldi	r22, 0x00	; 0
    3c00:	40 e0       	ldi	r20, 0x00	; 0
    3c02:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTD,PIN1,PIN_OUTPUT);
    3c06:	83 e0       	ldi	r24, 0x03	; 3
    3c08:	61 e0       	ldi	r22, 0x01	; 1
    3c0a:	41 e0       	ldi	r20, 0x01	; 1
    3c0c:	0e 94 42 0c 	call	0x1884	; 0x1884 <MDIO_Errorstate_SetPinDirection>
	/*UART Init*/
	MUART_VidInit();
    3c10:	0e 94 a3 05 	call	0xb46	; 0xb46 <MUART_VidInit>
	uint8 Loc_uint8Char;
	while(1)
	{
		Loc_uint8Char=MUART_uint8ReciverChar();
    3c14:	0e 94 33 06 	call	0xc66	; 0xc66 <MUART_uint8ReciverChar>
    3c18:	8f 87       	std	Y+15, r24	; 0x0f
		HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Char);
    3c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c1c:	0e 94 18 19 	call	0x3230	; 0x3230 <HAL_VidHCLCD_4BitModeWriteChar>
    3c20:	f9 cf       	rjmp	.-14     	; 0x3c14 <main+0x168>

00003c22 <__udivmodsi4>:
    3c22:	a1 e2       	ldi	r26, 0x21	; 33
    3c24:	1a 2e       	mov	r1, r26
    3c26:	aa 1b       	sub	r26, r26
    3c28:	bb 1b       	sub	r27, r27
    3c2a:	fd 01       	movw	r30, r26
    3c2c:	0d c0       	rjmp	.+26     	; 0x3c48 <__udivmodsi4_ep>

00003c2e <__udivmodsi4_loop>:
    3c2e:	aa 1f       	adc	r26, r26
    3c30:	bb 1f       	adc	r27, r27
    3c32:	ee 1f       	adc	r30, r30
    3c34:	ff 1f       	adc	r31, r31
    3c36:	a2 17       	cp	r26, r18
    3c38:	b3 07       	cpc	r27, r19
    3c3a:	e4 07       	cpc	r30, r20
    3c3c:	f5 07       	cpc	r31, r21
    3c3e:	20 f0       	brcs	.+8      	; 0x3c48 <__udivmodsi4_ep>
    3c40:	a2 1b       	sub	r26, r18
    3c42:	b3 0b       	sbc	r27, r19
    3c44:	e4 0b       	sbc	r30, r20
    3c46:	f5 0b       	sbc	r31, r21

00003c48 <__udivmodsi4_ep>:
    3c48:	66 1f       	adc	r22, r22
    3c4a:	77 1f       	adc	r23, r23
    3c4c:	88 1f       	adc	r24, r24
    3c4e:	99 1f       	adc	r25, r25
    3c50:	1a 94       	dec	r1
    3c52:	69 f7       	brne	.-38     	; 0x3c2e <__udivmodsi4_loop>
    3c54:	60 95       	com	r22
    3c56:	70 95       	com	r23
    3c58:	80 95       	com	r24
    3c5a:	90 95       	com	r25
    3c5c:	9b 01       	movw	r18, r22
    3c5e:	ac 01       	movw	r20, r24
    3c60:	bd 01       	movw	r22, r26
    3c62:	cf 01       	movw	r24, r30
    3c64:	08 95       	ret

00003c66 <__prologue_saves__>:
    3c66:	2f 92       	push	r2
    3c68:	3f 92       	push	r3
    3c6a:	4f 92       	push	r4
    3c6c:	5f 92       	push	r5
    3c6e:	6f 92       	push	r6
    3c70:	7f 92       	push	r7
    3c72:	8f 92       	push	r8
    3c74:	9f 92       	push	r9
    3c76:	af 92       	push	r10
    3c78:	bf 92       	push	r11
    3c7a:	cf 92       	push	r12
    3c7c:	df 92       	push	r13
    3c7e:	ef 92       	push	r14
    3c80:	ff 92       	push	r15
    3c82:	0f 93       	push	r16
    3c84:	1f 93       	push	r17
    3c86:	cf 93       	push	r28
    3c88:	df 93       	push	r29
    3c8a:	cd b7       	in	r28, 0x3d	; 61
    3c8c:	de b7       	in	r29, 0x3e	; 62
    3c8e:	ca 1b       	sub	r28, r26
    3c90:	db 0b       	sbc	r29, r27
    3c92:	0f b6       	in	r0, 0x3f	; 63
    3c94:	f8 94       	cli
    3c96:	de bf       	out	0x3e, r29	; 62
    3c98:	0f be       	out	0x3f, r0	; 63
    3c9a:	cd bf       	out	0x3d, r28	; 61
    3c9c:	09 94       	ijmp

00003c9e <__epilogue_restores__>:
    3c9e:	2a 88       	ldd	r2, Y+18	; 0x12
    3ca0:	39 88       	ldd	r3, Y+17	; 0x11
    3ca2:	48 88       	ldd	r4, Y+16	; 0x10
    3ca4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ca6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ca8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3caa:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cac:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cae:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cb0:	b9 84       	ldd	r11, Y+9	; 0x09
    3cb2:	c8 84       	ldd	r12, Y+8	; 0x08
    3cb4:	df 80       	ldd	r13, Y+7	; 0x07
    3cb6:	ee 80       	ldd	r14, Y+6	; 0x06
    3cb8:	fd 80       	ldd	r15, Y+5	; 0x05
    3cba:	0c 81       	ldd	r16, Y+4	; 0x04
    3cbc:	1b 81       	ldd	r17, Y+3	; 0x03
    3cbe:	aa 81       	ldd	r26, Y+2	; 0x02
    3cc0:	b9 81       	ldd	r27, Y+1	; 0x01
    3cc2:	ce 0f       	add	r28, r30
    3cc4:	d1 1d       	adc	r29, r1
    3cc6:	0f b6       	in	r0, 0x3f	; 63
    3cc8:	f8 94       	cli
    3cca:	de bf       	out	0x3e, r29	; 62
    3ccc:	0f be       	out	0x3f, r0	; 63
    3cce:	cd bf       	out	0x3d, r28	; 61
    3cd0:	ed 01       	movw	r28, r26
    3cd2:	08 95       	ret

00003cd4 <_exit>:
    3cd4:	f8 94       	cli

00003cd6 <__stop_program>:
    3cd6:	ff cf       	rjmp	.-2      	; 0x3cd6 <__stop_program>
